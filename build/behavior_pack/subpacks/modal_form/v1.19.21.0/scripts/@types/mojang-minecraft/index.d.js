export default"// Type definitions for Minecraft Bedrock Edition script APIs (experimental) 0.1\n// Project: https://docs.microsoft.com/minecraft/creator/\n// Definitions by: Jake Shirley <https://github.com/JakeShirley>\n//                 Mike Ammerlaan <https://github.com/mammerla>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\n/* *****************************************************************************\n   Copyright (c) Microsoft Corporation.\n   ***************************************************************************** */\n/**\n * Contains many types related to manipulating a Minecraft\n * world, including entities, blocks, dimensions, and more.\n *\n * Manifest Details\n * ```json\n * {\n *   // mojang-minecraft\n *   \"uuid\": \"b26a4d4c-afdf-4690-88f8-931846312678\",\n *   \"version\": [ 0, 1, 0 ]\n * }\n * ```\n *\n */\ntype EntityComponents = {\n    (componentName: 'minecraft:ageable'                     | 'ageable'                     ): EntityAgeableComponent\n    (componentName: 'minecraft:breathable'                  | 'breathable'                  ): EntityBreathableComponent\n    (componentName: 'minecraft:color'                       | 'color'                       ): EntityColorComponent\n    (componentName: 'minecraft:flying_speed'                | 'flying_speed'                ): EntityFlyingSpeedComponent\n    (componentName: 'minecraft:healable'                    | 'healable'                    ): EntityHealableComponent\n    (componentName: 'minecraft:health'                      | 'health'                      ): EntityHealthComponent\n    (componentName: 'minecraft:item'                        | 'item'                        ): EntityItemComponent\n    (componentName: 'minecraft:inventory'                   | 'inventory'                   ): EntityInventoryComponent\n    (componentName: 'minecraft:lava_movement'               | 'lava_movement'               ): EntityLavaMovementComponent\n    (componentName: 'minecraft:leashable'                   | 'leashable'                   ): EntityLeashableComponent\n    (componentName: 'minecraft:movement.amphibious'         | 'movement.amphibious'         ): EntityMovementAmphibiousComponent\n    (componentName: 'minecraft:movement.basic'              | 'movement.basic'              ): EntityMovementBasicComponent\n    (componentName: 'minecraft:movement'                    | 'movement'                    ): EntityMovementComponent\n    (componentName: 'minecraft:movement.fly'                | 'movement.fly'                ): EntityMovementFlyComponent\n    (componentName: 'minecraft:movement.generic'            | 'movement.generic'            ): EntityMovementGenericComponent\n    (componentName: 'minecraft:movement.glide'              | 'movement.glide'              ): EntityMovementGlideComponent\n    (componentName: 'minecraft:movement.hover'              | 'movement.hover'              ): EntityMovementHoverComponent\n    (componentName: 'minecraft:movement.jump'               | 'movement.jump'               ): EntityMovementJumpComponent\n    (componentName: 'minecraft:movement.skip'               | 'movement.skip'               ): EntityMovementSkipComponent\n    (componentName: 'minecraft:movement.sway'               | 'movement.sway'               ): EntityMovementSwayComponent\n    (componentName: 'minecraft:navigation.climb'            | 'navigation.climb'            ): EntityNavigationClimbComponent\n    (componentName: 'minecraft:navigation.float'            | 'navigation.float'            ): EntityNavigationFloatComponent\n    (componentName: 'minecraft:navigation.fly'              | 'navigation.fly'              ): EntityNavigationFlyComponent\n    (componentName: 'minecraft:navigation.generic'          | 'navigation.generic'          ): EntityNavigationGenericComponent\n    (componentName: 'minecraft:navigation.hover'            | 'navigation.hover'            ): EntityNavigationHoverComponent\n    (componentName: 'minecraft:navigation.walk'             | 'navigation.walk'             ): EntityNavigationWalkComponent\n    (componentName: 'minecraft:rideable'                    | 'rideable'                    ): EntityRideableComponent\n    (componentName: 'minecraft:strength'                    | 'strength'                    ): EntityStrengthComponent\n    (componentName: 'minecraft:tameable'                    | 'tameable'                    ): EntityTameableComponent\n    (componentName: 'minecraft:underwater_movement'         | 'underwater_movement'         ): EntityUnderwaterMovementComponent\n    (componentName: 'minecraft:can_climb'                   | 'can_climb'                   ): EntityCanClimbComponent\n    (componentName: 'minecraft:can_fly'                     | 'can_fly'                     ): EntityCanFlyComponent\n    (componentName: 'minecraft:can_power_jump'              | 'can_power_jump'              ): EntityCanPowerJumpComponent\n    (componentName: 'minecraft:fire_immune'                 | 'fire_immune'                 ): EntityFireImmuneComponent\n    (componentName: 'minecraft:floats_in_liquid'            | 'floats_in_liquid'            ): EntityFloatsInLiquidComponent\n    (componentName: 'minecraft:is_dyable'                   | 'is_dyable'                   ): EntityIsDyableComponent\n    (componentName: 'minecraft:is_baby'                     | 'is_baby'                     ): EntityIsBabyComponent\n    (componentName: 'minecraft:is_charged'                  | 'is_charged'                  ): EntityIsChargedComponent\n    (componentName: 'minecraft:is_chested'                  | 'is_chested'                  ): EntityIsChestedComponent\n    (componentName: 'minecraft:is_hidden_when_invisible'    | 'is_hidden_when_invisible'    ): EntityIsHiddenWhenInvisibleComponent\n    (componentName: 'minecraft:is_ignited'                  | 'is_ignited'                  ): EntityIsIgnitedComponent\n    (componentName: 'minecraft:is_illager_captain'          | 'is_illager_captain'          ): EntityIsIllagerCaptainComponent\n    (componentName: 'minecraft:is_saddled'                  | 'is_saddled'                  ): EntityIsSaddledComponent\n    (componentName: 'minecraft:is_shaking'                  | 'is_shaking'                  ): EntityIsShakingComponent\n    (componentName: 'minecraft:is_sheared'                  | 'is_sheared'                  ): EntityIsShearedComponent\n    (componentName: 'minecraft:is_stackable'                | 'is_stackable'                ): EntityIsStackableComponent\n    (componentName: 'minecraft:is_stunned'                  | 'is_stunned'                  ): EntityIsStunnedComponent\n    (componentName: 'minecraft:is_tamed'                    | 'is_tamed'                    ): EntityIsTamedComponent\n    (componentName: 'minecraft:wants_jockey'                | 'wants_jockey'                ): EntityWantsJockeyComponent\n    (componentName: 'minecraft:friction_modifier'           | 'friction_modifier'           ): EntityFrictionModifierComponent\n    (componentName: 'minecraft:ground_offset'               | 'ground_offset'               ): EntityGroundOffsetComponent\n    (componentName: 'minecraft:mark_variant'                | 'mark_variant'                ): EntityMarkVariantComponent\n    (componentName: 'minecraft:push_through'                | 'push_through'                ): EntityPushThroughComponent\n    (componentName: 'minecraft:scale'                       | 'scale'                       ): EntityScaleComponent\n    (componentName: 'minecraft:skin_id'                     | 'skin_id'                     ): EntitySkinIdComponent\n    (componentName: 'minecraft:variant'                     | 'variant'                     ): EntityVariantComponent\n    (componentName: string): IEntityComponent\n};\n/**\n * Represents a direction for expressing relative position or\n * facing.\n */\ndeclare enum Direction {\n    /**\n     * Represents an object located or facing in the down (z - 1)\n     * direction.\n     */\n    down = 0,\n    /**\n     * Represents an object located or facing in the up (z + 1)\n     * direction.\n     */\n    up = 1,\n    /**\n     * Represents an object located or facing in the north (z - 1)\n     * direction.\n     */\n    north = 2,\n    /**\n     * Represents an object located or facing in the south (z + 1)\n     * direction.\n     */\n    south = 3,\n    /**\n     * Represents an object located or facing in the west (x - 1)\n     * direction.\n     */\n    west = 4,\n    /**\n     * Represents an object located or facing in the east (x + 1)\n     * direction.\n     */\n    east = 5,\n}\n/**\n * Represents a game mode for the current world experience.\n */\ndeclare enum GameMode {\n    /**\n     * World is in a survival mode, where players can take damage\n     * and entities may not be peaceful. Survival mode is where the\n     * player must collect resources, build structures while\n     * surviving in their generated world. Activities can, over\n     * time, chip away at player health and hunger bar.\n     */\n    survival = 0,\n    /**\n     * World is in a full creative mode. In creative mode, the\n     * player has all the resources available in the item selection\n     * tabs and the survival selection tab. They can also destroy\n     * blocks instantly including those which would normally be\n     * indestructible. Command and structure blocks can also be\n     * used in creative mode. Items also do not lose durability or\n     * disappear.\n     */\n    creative = 1,\n    /**\n     * World is in a more locked-down experience, where blocks may\n     * not be manipulated.\n     */\n    adventure = 2,\n}\n/**\n * Contains objectives and participants for the scoreboard.\n */\ndeclare enum ScoreboardIdentityType {\n    /**\n     * This scoreboard participant is tied to a player.\n     */\n    player = 1,\n    /**\n     * This scoreboard participant is tied to an entity.\n     */\n    entity = 2,\n    /**\n     * This scoreboard participant is tied to a pseudo player\n     * entity - typically this is used to store scores as data or\n     * as abstract progress.\n     */\n    fakePlayer = 3,\n}\n/**\n * An event that fires as players enter chat messages.\n */\ndeclare class BeforeChatEvent {\n    /**\n     * If set to true in a beforeChat event handler, this message\n     * is not broadcast out.\n     */\n    'cancel': boolean;\n    /**\n     * Message that is being broadcast. In a beforeChat event\n     * handler, _message_ can be updated with edits before the\n     * message is displayed to players.\n     */\n    'message': string;\n    /**\n     * Player that sent the chat message.\n     */\n    'sender': Player;\n    /**\n     * If true, this message is directly targeted to one or more\n     * players (i.e., is not broadcast.)\n     */\n    'sendToTargets': boolean;\n    /**\n     * List of players that will receive this message.\n     */\n    'targets': Player[];\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to an event that fires\n * before chat messages are sent.\n */\ndeclare class BeforeChatEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called before new chat messages\n     * are sent.\n     * @param callback\n     */\n    subscribe(callback: (arg: BeforeChatEvent) => void): (arg: BeforeChatEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called before new chat\n     * messages are sent.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BeforeChatEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to firing of a data driven\n * entity event - for example, the minecraft:ageable_grow_up\n * event on a chicken.\n */\ndeclare class BeforeDataDrivenEntityTriggerEvent {\n    /**\n     * If set to true, this entity event is not triggered.\n     */\n    'cancel': boolean;\n    /**\n     * Entity that the event triggered on.\n     */\n    readonly 'entity': Entity;\n    /**\n     * Name of the data driven event being triggered.\n     */\n    readonly 'id': string;\n    /**\n     * An updateable list of modifications to component state that\n     * are the effect of this triggered event.\n     */\n    'modifiers': DefinitionModifier[];\n    protected constructor();\n}\n/**\n * Contains information related to firing of a data driven\n * entity event - for example, the minecraft:ageable_grow_up\n * event on a chicken.\n */\ndeclare class BeforeDataDrivenEntityTriggerEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called before a data driven\n     * entity event is triggered.\n     * @param callback\n     * @param options\n     */\n    subscribe(\n        callback: (arg: BeforeDataDrivenEntityTriggerEvent) => void,\n        options?: EntityDataDrivenTriggerEventOptions,\n    ): (arg: BeforeDataDrivenEntityTriggerEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback that will be called before a data driven\n     * entity event is triggered.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BeforeDataDrivenEntityTriggerEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information regarding an explosion that has\n * happened.\n */\ndeclare class BeforeExplosionEvent {\n    /**\n     * If set to true, cancels the explosion event.\n     */\n    'cancel': boolean;\n    /**\n     * Dimension where the explosion has occurred.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * A collection of blocks impacted by this explosion event.\n     * Note that this property can be updated to change the set of\n     * blocks impacted.\n     */\n    'impactedBlocks': BlockLocation[];\n    /**\n     * Optional source of the explosion.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to before an explosion\n * occurs.\n */\ndeclare class BeforeExplosionEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when before an explosion\n     * occurs. The callback can optionally change or cancel\n     * explosion behavior.\n     * @param callback\n     */\n    subscribe(callback: (arg: BeforeExplosionEvent) => void): (arg: BeforeExplosionEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called from before when an\n     * explosion would occur.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BeforeExplosionEvent) => void): void;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to an item's definition\n * and components changing.\n */\ndeclare class BeforeItemDefinitionEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an item's\n     * definition and components change.\n     * @param callback\n     */\n    subscribe(\n        callback: (arg: BeforeItemDefinitionTriggeredEvent) => void,\n    ): (arg: BeforeItemDefinitionTriggeredEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an item's\n     * definition and components change.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BeforeItemDefinitionTriggeredEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to a triggering of a custom\n * item definition change.\n */\ndeclare class BeforeItemDefinitionTriggeredEvent {\n    /**\n     * If set to true, will cancel the application of this item\n     * definition change.\n     */\n    'cancel': boolean;\n    /**\n     * Name of the data-driven item event that is triggering this\n     * change.\n     */\n    readonly 'eventName': string;\n    /**\n     * The impacted item stack that is being used.\n     */\n    'item': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Contains information related to an item being used.\n */\ndeclare class BeforeItemUseEvent {\n    /**\n     * If set to true, this will cancel the item use behavior.\n     */\n    'cancel': boolean;\n    /**\n     * The impacted item stack that is being used.\n     */\n    'item': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that fire before an item is used.\n */\ndeclare class BeforeItemUseEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called before an item is used.\n     * @param callback\n     */\n    subscribe(callback: (arg: BeforeItemUseEvent) => void): (arg: BeforeItemUseEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called before an item is used.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BeforeItemUseEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to an item being used on a\n * block.\n */\ndeclare class BeforeItemUseOnEvent {\n    /**\n     * The face of the block that an item is being used on.\n     */\n    readonly 'blockFace': Direction;\n    /**\n     * Location of the block being impacted.\n     */\n    readonly 'blockLocation': BlockLocation;\n    /**\n     * If set to true, this will cancel the item use behavior.\n     */\n    'cancel': boolean;\n    /**\n     * X coordinate of the item-use impact location on the face of\n     * the target block.\n     */\n    readonly 'faceLocationX': number;\n    /**\n     * Y coordinate of the item-use impact location on the face of\n     * the target block.\n     */\n    readonly 'faceLocationY': number;\n    /**\n     * The impacted item stack that is being used on a block.\n     */\n    'item': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that fire before an item being used on a\n * block event.\n */\ndeclare class BeforeItemUseOnEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called before an item is used\n     * on a block.\n     * @param callback\n     */\n    subscribe(callback: (arg: BeforeItemUseOnEvent) => void): (arg: BeforeItemUseOnEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called before an item is used\n     * on a block.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BeforeItemUseOnEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to changes before a piston\n * expands or retracts.\n */\ndeclare class BeforePistonActivateEvent extends BlockEvent {\n    /**\n     * Block impacted by this event.\n     */\n    readonly 'block': Block;\n    /**\n     * If this is set to true within an event handler, the piston\n     * activation is canceled.\n     */\n    'cancel': boolean;\n    /**\n     * Dimension that contains the block that is the subject of\n     * this event.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * True if the piston is the process of expanding.\n     */\n    readonly 'isExpanding': boolean;\n    /**\n     * Contains additional properties and details of the piston.\n     */\n    readonly 'piston': BlockPistonComponent;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to an event that fires\n * before a piston is activated.\n */\ndeclare class BeforePistonActivateEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called before a piston expands\n     * or retracts.\n     * @param callback\n     */\n    subscribe(callback: (arg: BeforePistonActivateEvent) => void): (arg: BeforePistonActivateEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called before a piston expands\n     * or retracts.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BeforePistonActivateEvent) => void): void;\n    protected constructor();\n}\n/**\n * Represents a block in a dimension. A block represents a\n * unique X, Y, and Z within a dimension and get/sets the state\n * of the block at that location. This type was significantly\n * updated in version 1.17.10.21.\n */\ndeclare class Block {\n    /**\n     * Returns the dimension that the block is within.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * Identifier of the type of block for this block.\n     */\n    readonly 'id': string;\n    /**\n     * Whether this particular block is empty (air).\n     */\n    readonly 'isEmpty': boolean;\n    /**\n     * Returns or sets whether this block has a liquid on it.\n     */\n    'isWaterlogged': boolean;\n    /**\n     * Coordinates of the specified block.\n     */\n    readonly 'location': BlockLocation;\n    /**\n     * Additional block configuration data that describes the\n     * block.\n     */\n    readonly 'permutation': BlockPermutation;\n    /**\n     * Gets the type of block.\n     */\n    readonly 'type': BlockType;\n    /**\n     * X coordinate of the block.\n     */\n    readonly 'x': number;\n    /**\n     * Y coordinate of the block.\n     */\n    readonly 'y': number;\n    /**\n     * Z coordinate of the block.\n     */\n    readonly 'z': number;\n    /**\n     * @remarks\n     * Gets additional configuration properties (a component) for\n     * specific capabilities of particular blocks - for example, an\n     * inventory component of a chest block.\n     * @param componentName\n     * Identifier of the component. If a namespace is not\n     * specified, minecraft: is assumed.\n     * @returns\n     * Returns the component object if it is present on the\n     * particular block.\n     * @throws This function can throw errors.\n     */\n    getComponent: {\n        (componentName: 'minecraft:inventory'                   | 'inventory'                   ): BlockInventoryComponent\n        // (componentName: string): BlockLavaContainerComponent\n        // (componentName: string): BlockPistonComponent\n        // (componentName: string): BlockPotionContainerComponent\n        // (componentName: string): BlockRecordPlayerComponent\n        // (componentName: string): BlockSnowContainerComponent\n        // (componentName: string): BlockWaterContainerComponent\n        (componentName: string): any\n    };\n    /**\n     * @returns\n     * The list of tags that the block has.\n     */\n    getTags(): string[];\n    /**\n     * @remarks\n     * Checks to see if the permutation of this block has a\n     * specific tag.\n     * @param tag\n     * Tag to check for.\n     * @returns\n     * Returns `true` if the permutation of this block has the tag,\n     * else `false`.\n     * @example check_block_tags.js\n     * ```typescript\n     *        import { world, BlockLocation } from \"mojang-minecraft\";\n     *\n     *        // Fetch the block\n     *        const block = world.getDimension(\"overworld\").getBlock(new BlockLocation(1, 2, 3));\n     *\n     *        console.log(`Block is dirt: ${block.hasTag(\"dirt\")}`);\n     *        console.log(`Block is wood: ${block.hasTag(\"wood\")}`);\n     *        console.log(`Block is stone: ${block.hasTag(\"stone\")}`);\n     *\n     * ```\n     */\n    hasTag(tag: string): boolean;\n    /**\n     * @remarks\n     * Sets the block in the dimension to the state of the\n     * permutation.\n     * @param permutation\n     * Permutation that contains a set of property states for the\n     * Block.\n     */\n    setPermutation(permutation: BlockPermutation): void;\n    /**\n     * @remarks\n     * Sets the type of block.\n     * @param blockType\n     * Identifier of the type of block to apply - for example,\n     * minecraft:powered_repeater.\n     */\n    setType(blockType: BlockType): void;\n    protected constructor();\n}\n/**\n * Holds information for expressing the net size of a volume of\n * blocks.\n */\ndeclare class BlockAreaSize {\n    /**\n     * X size (west to east) component of this block area.\n     */\n    'x': number;\n    /**\n     * Y size (down to up) of this block area size.\n     */\n    'y': number;\n    /**\n     * Z size (south to north) of this block area size.\n     */\n    'z': number;\n    /**\n     * @remarks\n     * Creates a new BlockAreaSize object.\n     * @param x\n     * @param y\n     * @param z\n     */\n    constructor(x: number, y: number, z: number);\n    /**\n     * @remarks\n     * Tests whether this block area size is equal to another\n     * BlockAreaSize object.\n     * @param other\n     */\n    equals(other: BlockAreaSize): boolean;\n}\n/**\n * Contains information regarding an event where a player\n * breaks a block.\n */\ndeclare class BlockBreakEvent extends BlockEvent {\n    /**\n     * Block broken in this event. Note that because this event\n     * fires right after a block is broken, the block you will\n     * receive will likely be of type 'minecraft:air'. See the\n     * .brokenBlockPermutation property for information on this\n     * block before it was broken.\n     */\n    readonly 'block': Block;\n    /**\n     * Returns permutation information about this block before it\n     * was broken.\n     */\n    readonly 'brokenBlockPermutation': BlockPermutation;\n    /**\n     * Dimension that contains the block that has been broken in\n     * this event.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * Player that broke the block for this event.\n     */\n    readonly 'player': Player;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when a block is\n * broken.\n */\ndeclare class BlockBreakEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a block is broken\n     * by a player.\n     * @param callback\n     */\n    subscribe(callback: (arg: BlockBreakEvent) => void): (arg: BlockBreakEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an block is\n     * broken.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BlockBreakEvent) => void): void;\n    protected constructor();\n}\n/**\n * Base type for components associated with blocks.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class BlockComponent {\n    protected constructor();\n}\n/**\n * Contains information regarding an event that impacts a\n * specific block.\n */\ndeclare class BlockEvent {\n    /**\n     * Block impacted by this event.\n     */\n    readonly 'block': Block;\n    /**\n     * Dimension that contains the block that is the subject of\n     * this event.\n     */\n    readonly 'dimension': Dimension;\n    protected constructor();\n}\n/**\n * Contains information regarding an explosion that has\n * occurred for a specific block.\n */\ndeclare class BlockExplodeEvent extends BlockEvent {\n    /**\n     * Block impacted by this explosion event.\n     */\n    readonly 'block': Block;\n    /**\n     * Dimension that contains the block that is the subject of\n     * this explosion event.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * Optional source of the explosion.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when an explosion\n * occurs, as it impacts individual blocks.\n */\ndeclare class BlockExplodeEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an explosion\n     * occurs, as it impacts individual blocks.\n     * @param callback\n     */\n    subscribe(callback: (arg: BlockExplodeEvent) => void): (arg: BlockExplodeEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an explosion\n     * occurs, as it impacts individual blocks.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BlockExplodeEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains more information for events where a block is hit.\n */\ndeclare class BlockHitInformation {\n    /**\n     * Block that was hit.\n     */\n    readonly 'block': Block;\n    /**\n     * Face of the block that was hit.\n     */\n    readonly 'face': Direction;\n    /**\n     * X coordinate on the face that was hit.\n     */\n    readonly 'faceLocationX': number;\n    /**\n     * Y coordinate on the face that was hit.\n     */\n    readonly 'faceLocationY': number;\n    protected constructor();\n}\n/**\n * Represents the inventory of a block in the world. Used with\n * blocks like chests.\n */\ndeclare class BlockInventoryComponent extends BlockComponent {\n    /**\n     * The container which holds an {@link mojang-minecraft.ItemStack}.\n     * @throws This property can throw when used.\n     */\n    readonly 'container': BlockInventoryComponentContainer;\n    /**\n     * Coordinates of the specified block.\n     */\n    readonly 'location': BlockLocation;\n    protected constructor();\n}\n/**\n * Represents the inventory of a {@link mojang-minecraft.Block} in the\n * world. Used with blocks like chests.\n */\ndeclare class BlockInventoryComponentContainer extends Container {\n    /**\n     * Contains a count of the slots in the container that are\n     * empty.\n     * @throws This property can throw when used.\n     */\n    readonly 'emptySlotsCount': number;\n    /**\n     * Returns the size capacity of the inventory container on this\n     * block.\n     * @throws This property can throw when used.\n     */\n    readonly 'size': number;\n    /**\n     * @remarks\n     * Adds an item to the specified container. Item will be placed\n     * in the first available empty slot. (use .setItem if you wish\n     * to set items in a particular slot.)\n     * @param itemStack\n     * The stack of items to add.\n     * @throws This function can throw errors.\n     */\n    addItem(itemStack: ItemStack): void;\n    /**\n     * @remarks\n     * Gets the item stack for the set of items at the specified\n     * slot. If the slot is empty, returns undefined. This method\n     * does not change or clear the contents of the specified slot.\n     * @param slot\n     * Zero-based index of the slot to retrieve items from.\n     * @throws This function can throw errors.\n     * @example getItem.js\n     * ```typescript\n     *        const itemStack = rightChestContainer.getItem(0);\n     *        test.assert(itemStack.id === \"apple\", \"Expected apple\");\n     *        test.assert(itemStack.amount === 10, \"Expected 10 apples\");\n     * ```\n     */\n    getItem(slot: number): ItemStack;\n    /**\n     * @remarks\n     * Sets an item stack within a particular slot.\n     * @param slot\n     * Zero-based index of the slot to set an item at.\n     * @param itemStack\n     * Stack of items to place within the specified slot.\n     * @throws This function can throw errors.\n     */\n    setItem(slot: number, itemStack: ItemStack): void;\n    /**\n     * @remarks\n     * Swaps items between two different slots within containers.\n     * @param slot\n     * Zero-based index of the slot to swap from this container.\n     * @param otherSlot\n     * Zero-based index of the slot to swap with.\n     * @param otherContainer\n     * Target container to swap with. Note this can be the same\n     * container as this source.\n     * @throws This function can throw errors.\n     * @example swapItems.js\n     * ```typescript\n     *        rightChestContainer.swapItems(1, 0, leftChestContainer); // swap item in slot 1 of rightChestContainer with item in slot 0 of leftChestContainer\n     *\n     * ```\n     */\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean;\n    /**\n     * @remarks\n     * Moves an item from one slot to another, potentially across\n     * containers.\n     * @param fromSlot\n     * @param toSlot\n     * Zero-based index of the slot to move to.\n     * @param toContainer\n     * Target container to transfer to. Note this can be the same\n     * container as the source.\n     * @throws This function can throw errors.\n     * @example transferItem.js\n     * ```typescript\n     *        rightChestContainer.transferItem(0, 4, chestCartContainer); // transfer the apple from the right chest to a chest cart\n     *\n     * ```\n     */\n    transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean;\n    protected constructor();\n}\n/**\n * Represents a fluid container block that currently contains\n * lava.\n */\ndeclare class BlockLavaContainerComponent extends BlockComponent {\n    /**\n     * Relative level of lava within this block. Valid values are\n     * between FluidContainer.minFillLevel (0) and\n     * FluidContainer.maxFillLevel (6).\n     */\n    'fillLevel': number;\n    /**\n     * Source location of the block.\n     */\n    readonly 'location': BlockLocation;\n    protected constructor();\n}\n/**\n * Contains the integer X, Y, Z coordinates for a block. For\n * decimal locations useful for entities, items, and more, see\n * {@link mojang-minecraft.Location}.\n */\ndeclare class BlockLocation {\n    /**\n     * The X coordinate.\n     */\n    'x': number;\n    /**\n     * The integer-based Y position.\n     */\n    'y': number;\n    /**\n     * The integer-based Z position.\n     */\n    'z': number;\n    /**\n     * @remarks\n     * Returns a BlockLocation for a block above this BlockLocation\n     * (that is, y + 1).\n     */\n    above(): BlockLocation;\n    /**\n     * @remarks\n     * Returns an array of block locations representing all blocks\n     * in the volume (cuboid) between this location and another\n     * location.\n     * @param other\n     * Additional BlockLocation used to determine the set of\n     * locations in between this location and another point.\n     * @returns\n     * Array of block locations representing the volume between\n     * this location and another, inclusive of the start and end\n     * points.\n     */\n    blocksBetween(other: BlockLocation): BlockLocation[];\n    /**\n     * @remarks\n     * Creates a new instance of an abstract block location.\n     * @param x\n     * X position of the block location. This number should be an\n     * integer.\n     * @param y\n     * Y position of the block location. This number should be an\n     * integer.\n     * @param z\n     * Z position of the block location. This number should be an\n     * integer.\n     */\n    constructor(x: number, y: number, z: number);\n    /**\n     * @remarks\n     * Compares this BlockLocation and another BlockLocation to one\n     * another.\n     * @param other\n     * Other block location to compare this BlockLocation to.\n     * @returns\n     * True if the two block locations are equal.\n     */\n    equals(other: BlockLocation): boolean;\n    /**\n     * @remarks\n     * Returns a block location using a position relative to this\n     * block location\n     * @param x\n     * X offset relative to this BlockLocation.\n     * @param y\n     * Y offset relative to this BlockLocation.\n     * @param z\n     * Z offset relative to this BlockLocation.\n     * @returns\n     * BlockLocation that is positioned relative to this\n     * BlockLocation.\n     */\n    offset(x: number, y: number, z: number): BlockLocation;\n}\n/**\n * Contains the combination of type {@link mojang-minecraft.BlockType}\n * and properties (also sometimes called block state) which\n * describe a block (but does not belong to a specific\n * {@link mojang-minecraft.Block}). This type was introduced as of\n * version 1.17.10.21.\n */\ndeclare class BlockPermutation {\n    /**\n     * The {@link mojang-minecraft.BlockType} that the permutation has.\n     */\n    readonly 'type': BlockType;\n    /**\n     * @remarks\n     * Creates a copy of this permutation.\n     * @returns\n     * A copy of the permutation.\n     */\n    clone(): BlockPermutation;\n    /**\n     * @returns\n     * Returns the list of all of the properties that the\n     * permutation has.\n     */\n    getAllProperties(): IBlockProperty[];\n    /**\n     * @remarks\n     * Gets a property for the permutation.\n     * @param propertyName\n     * @returns\n     * Returns the property if the permutation has it, else `null`.\n     * @throws This function can throw errors.\n     */\n    getProperty(propertyName: string): IBlockProperty;\n    /**\n     * @remarks\n     * Creates a copy of the permutation.\n     */\n    getTags(): string[];\n    /**\n     * @remarks\n     * Checks to see if the permutation has a specific tag.\n     * @param tag\n     * @returns\n     * Returns `true` if the permutation has the tag, else `false`.\n     * @example check_block_tags.js\n     * ```typescript\n     *        import { world, BlockLocation } from \"mojang-minecraft\";\n     *\n     *        // Fetch the block\n     *        const block = world.getDimension(\"overworld\").getBlock(new BlockLocation(1, 2, 3));\n     *        const blockPerm = block.getPermutation();\n     *\n     *        console.log(`Block is dirt: ${blockPerm.hasTag(\"dirt\")}`);\n     *        console.log(`Block is wood: ${blockPerm.hasTag(\"wood\")}`);\n     *        console.log(`Block is stone: ${blockPerm.hasTag(\"stone\")}`);\n     *\n     * ```\n     */\n    hasTag(tag: string): boolean;\n    protected constructor();\n}\n/**\n * When present, this block has piston-like behavior. Contains\n * additional properties for discovering block piston state.\n */\ndeclare class BlockPistonComponent extends BlockComponent {\n    /**\n     * A set of locations for blocks that are impacted by the\n     * activation of this piston.\n     * @throws This property can throw when used.\n     */\n    readonly 'attachedBlocks': BlockLocation[];\n    /**\n     * Whether the piston is fully expanded.\n     * @throws This property can throw when used.\n     */\n    readonly 'isExpanded': boolean;\n    /**\n     * Whether the piston is in the process of expanding.\n     * @throws This property can throw when used.\n     */\n    readonly 'isExpanding': boolean;\n    /**\n     * Whether the piston is in the process of expanding or\n     * retracting.\n     * @throws This property can throw when used.\n     */\n    readonly 'isMoving': boolean;\n    /**\n     * Whether the piston is fully retracted.\n     * @throws This property can throw when used.\n     */\n    readonly 'isRetracted': boolean;\n    /**\n     * Whether the piston is in the process of retracting.\n     * @throws This property can throw when used.\n     */\n    readonly 'isRetracting': boolean;\n    /**\n     * Source location of the block.\n     */\n    readonly 'location': BlockLocation;\n    protected constructor();\n}\n/**\n * Contains information regarding an event where a player\n * places a block.\n */\ndeclare class BlockPlaceEvent extends BlockEvent {\n    /**\n     * Block placed in this event.\n     */\n    readonly 'block': Block;\n    /**\n     * Dimension that contains the block that has been placed in\n     * this event.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * Player that placed the block for this event.\n     */\n    readonly 'player': Player;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when a block is\n * placed.\n */\ndeclare class BlockPlaceEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a block is placed\n     * by a player.\n     * @param callback\n     */\n    subscribe(callback: (arg: BlockPlaceEvent) => void): (arg: BlockPlaceEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an block is\n     * placed.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: BlockPlaceEvent) => void): void;\n    protected constructor();\n}\n/**\n * Represents a fluid container block that currently contains a\n * potion.\n */\ndeclare class BlockPotionContainerComponent extends BlockComponent {\n    /**\n     * Relative level of potion liquid within this block. Valid\n     * values are between FluidContainer.minFillLevel (0) and\n     * FluidContainer.maxFillLevel (6).\n     */\n    'fillLevel': number;\n    /**\n     * Source location of the block.\n     */\n    readonly 'location': BlockLocation;\n    /**\n     * @remarks\n     * Sets the potion type based on an item stack.\n     * @param item\n     * Potion to use as the type of potion for this potion\n     * container.\n     * @throws This function can throw errors.\n     */\n    setPotionType(item: ItemStack): void;\n    protected constructor();\n}\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class BlockProperties {\n    static readonly 'active' = 'active';\n    /**\n     * Integer property that represents the age of the block. Valid\n     * values are between 0 and 15 inclusive.\n     */\n    static readonly 'age' = 'age';\n    /**\n     * Boolean property that determines if saplings should grow.\n     */\n    static readonly 'ageBit' = 'age_bit';\n    /**\n     * Boolean property that determines if an explosion propagates\n     * underwater.\n     */\n    static readonly 'allowUnderwaterBit' = 'allow_underwater_bit';\n    /**\n     * Boolean property that determines if a tripwire is attached\n     * to another tripwire.\n     */\n    static readonly 'attachedBit' = 'attached_bit';\n    /**\n     * String property that represents the type of attachment used\n     * by a bell or grindstone block. Valid values are 'standing',\n     * 'hanging', 'side' and 'multiple'.\n     */\n    static readonly 'attachment' = 'attachment';\n    /**\n     * String property that determines the thickness of a bamboo\n     * stalk. Valid values are 'thin' and 'thick'.\n     */\n    static readonly 'bambooLeafSize' = 'bamboo_leaf_size';\n    /**\n     * String property that determines the size of bamboo leaves.\n     * Valid values are 'no_leaves', 'small_leaves', and\n     * 'large_leaves'.\n     */\n    static readonly 'bambooStalkThickness' = 'bamboo_stalk_thickness';\n    static readonly 'bigDripleafHead' = 'big_dripleaf_head';\n    /**\n     * String property that represents the tilt state of big\n     * dripleaf block. Valid values are 'none', 'unstable',\n     * 'partial_tilt' and 'full_tilt'.\n     */\n    static readonly 'bigDripleafTilt' = 'big_dripleaf_tilt';\n    /**\n     * Integer property that tracks how many bites of cake have\n     * been taken. Valid values are between 0 and 6 inclusive.\n     */\n    static readonly 'biteCounter' = 'bite_counter';\n    static readonly 'blockLightLevel' = 'block_light_level';\n    static readonly 'bloom' = 'bloom';\n    /**\n     * Boolean property that determines if a bottle is shown in the\n     * first slot of the brewing stand.\n     */\n    static readonly 'brewingStandSlotABit' = 'brewing_stand_slot_a_bit';\n    /**\n     * Boolean property that determines if a bottle is shown in the\n     * second slot of the brewing stand.\n     */\n    static readonly 'brewingStandSlotBBit' = 'brewing_stand_slot_b_bit';\n    /**\n     * Boolean property that determines if a bottle is shown in the\n     * third slot of the brewing stand.\n     */\n    static readonly 'brewingStandSlotCBit' = 'brewing_stand_slot_c_bit';\n    /**\n     * Boolean property that determines if a button is in a pressed\n     * state or not.\n     */\n    static readonly 'buttonPressedBit' = 'button_pressed_bit';\n    /**\n     * Integer property that describes how many extra candles are\n     * in the same block space. Valid values are between 0 and 3\n     * inclusive.\n     */\n    static readonly 'candles' = 'candles';\n    static readonly 'canSummon' = 'can_summon';\n    /**\n     * String property that represents the type of liquid in a\n     * cauldron. Valid values are 'water', 'powder_snow', and\n     * 'lava'.\n     */\n    static readonly 'cauldronLiquid' = 'cauldron_liquid';\n    /**\n     * String property that represents the type of work benches\n     * that are within Minecraft Education experiences. Valid\n     * values are 'compound_creator', 'material_reducer',\n     * 'element_constructor' and 'lab_table'.\n     */\n    static readonly 'chemistryTableType' = 'chemistry_table_type';\n    /**\n     * String property determines the pattern of quartz and purpur\n     * blocks. Valid values are 'default', 'chiseled', 'lines',\n     * 'smooth'.\n     */\n    static readonly 'chiselType' = 'chisel_type';\n    /**\n     * Integer property that describes how many sea pickles are in\n     * a cluster. Valid values are between 0 and 3 inclusive.\n     */\n    static readonly 'clusterCount' = 'cluster_count';\n    /**\n     * String property that represents the color of a block, like\n     * wool. Valid values are 'white', 'orange', 'magenta',\n     * 'light_blue', 'yellow', 'lime', 'pink', 'gray', 'silver',\n     * 'cyan', 'purple', 'blue', 'brown', 'green', 'red' and\n     * 'black'.\n     */\n    static readonly 'color' = 'color';\n    /**\n     * Boolean property that determines if a torch has a particular\n     * color.\n     */\n    static readonly 'colorBit' = 'color_bit';\n    static readonly 'composterFillLevel' = 'composter_fill_level';\n    /**\n     * Boolean property that determines if a command block is\n     * conditional or not.\n     */\n    static readonly 'conditionalBit' = 'conditional_bit';\n    /**\n     * String property that represents the color of a coral block.\n     * Valid values are 'blue', 'pink', 'purple', 'red', 'yellow',\n     * 'blue dead', 'pink dead', 'red dead', and 'yellow dead'.\n     */\n    static readonly 'coralColor' = 'coral_color';\n    /**\n     * Integer property that describes the rotation of coral fans.\n     * Valid values are between 0 and 3 inclusive.\n     */\n    static readonly 'coralDirection' = 'coral_direction';\n    static readonly 'coralFanDirection' = 'coral_fan_direction';\n    /**\n     * Boolean property that represents the type of hanging for\n     * coral fan.\n     */\n    static readonly 'coralHangTypeBit' = 'coral_hang_type_bit';\n    /**\n     * Boolean property that describes if a top snow block is\n     * covering another block.\n     */\n    static readonly 'coveredBit' = 'covered_bit';\n    /**\n     * String property that determines the cracked state of turtle\n     * eggs. Valid values are 'no_cracks', 'cracked', and\n     * 'max_cracked'.\n     */\n    static readonly 'crackedState' = 'cracked_state';\n    /**\n     * String property that determines the damage state of an\n     * anvil. Valid values are 'undamaged', 'slightly_damaged',\n     * 'very_damaged', and 'broken'\n     */\n    static readonly 'damage' = 'damage';\n    /**\n     * Boolean property that determines if coral, coral fans, or\n     * sea pickles are dead.\n     */\n    static readonly 'deadBit' = 'dead_bit';\n    static readonly 'deprecated' = 'deprecated';\n    /**\n     * Integer property determines the north, south, east, or west\n     * direction of a block. Valid values include are south = 0,\n     * west = 1, north = 2, east = 3.\n     */\n    static readonly 'direction' = 'direction';\n    /**\n     * String property that determines the dirt type of a block.\n     * Valid values are 'normal' and 'coarse'.\n     */\n    static readonly 'dirtType' = 'dirt_type';\n    /**\n     * Boolean property that determines if a tripwire is disarmed\n     * or not.\n     */\n    static readonly 'disarmedBit' = 'disarmed_bit';\n    /**\n     * Boolean property that determines if a door's hinge is\n     * mirrored or not.\n     */\n    static readonly 'doorHingeBit' = 'door_hinge_bit';\n    /**\n     * String property that represents the type of a double plant\n     * block. Valid values are 'sunflower', 'syringa', 'grass',\n     * 'fern', 'rose', and 'paeonia'.\n     */\n    static readonly 'doublePlantType' = 'double_plant_type';\n    /**\n     * Boolean property that describes if bubble columns drag\n     * entities down or push them up.\n     */\n    static readonly 'dragDown' = 'drag_down';\n    /**\n     * String property that represents the type of a pointed\n     * dripstone block. Valid values are 'tip', 'frustum', 'base',\n     * 'middle' and 'merge'.\n     */\n    static readonly 'dripstoneThickness' = 'dripstone_thickness';\n    /**\n     * Boolean property that determines if an end portal block has\n     * an Eye of Ender in it.\n     */\n    static readonly 'endPortalEyeBit' = 'end_portal_eye_bit';\n    /**\n     * Boolean property that determines if a TNT block should start\n     * its explode sequence.\n     */\n    static readonly 'explodeBit' = 'explode_bit';\n    static readonly 'extinguished' = 'extinguished';\n    /**\n     * Integer property that determines the facing direction of\n     * some types of blocks. Valid values include down = 0, up = 1,\n     * north = 2, south = 3, west = 4, east = 5.\n     */\n    static readonly 'facingDirection' = 'facing_direction';\n    /**\n     * Integer property that determines the fill level of a\n     * cauldron block. Valid values are between 0 and 6 inclusive.\n     */\n    static readonly 'fillLevel' = 'fill_level';\n    /**\n     * String property that represents the type of flow. Valid\n     * values are 'poppy', 'orchid', 'allium', 'houstonia',\n     * 'tulip_red', 'tulip_orange', 'tulip_white', 'tulip_pink',\n     * 'oxeye', 'cornflower' and 'lily_of_the_valley'.\n     */\n    static readonly 'flowerType' = 'flower_type';\n    /**\n     * Integer property that represents the rotation of signs and\n     * standing banners. Valid values are between 0 and 15\n     * inclusive.\n     */\n    static readonly 'groundSignDirection' = 'ground_sign_direction';\n    static readonly 'growingPlantAge' = 'growing_plant_age';\n    /**\n     * Integer property that determines the growth level of crops.\n     * Valid values are between 0 and 7 inclusive.\n     */\n    static readonly 'growth' = 'growth';\n    /**\n     * Boolean property that represents if a lantern block is\n     * hanging or not.\n     */\n    static readonly 'hanging' = 'hanging';\n    /**\n     * Boolean property that determines if a block is the pillow\n     * side of a bed.\n     */\n    static readonly 'headPieceBit' = 'head_piece_bit';\n    /**\n     * Integer property that determines the height of a top snow\n     * block. Valid values are between 0 and 7 inclusive.\n     */\n    static readonly 'height' = 'height';\n    static readonly 'honeyLevel' = 'honey_level';\n    /**\n     * Integer property that determines which huge mushroom block\n     * should be displayed. Valid values are between 0 and 15\n     * inclusive.\n     */\n    static readonly 'hugeMushroomBits' = 'huge_mushroom_bits';\n    /**\n     * Boolean property that determines if a block should burn\n     * infinitely.\n     */\n    static readonly 'infiniburnBit' = 'infiniburn_bit';\n    /**\n     * Boolean property that determines if a fence block is\n     * connected to a wall block.\n     */\n    static readonly 'inWallBit' = 'in_wall_bit';\n    /**\n     * Boolean property that describes if an item frame block has a\n     * map in it.\n     */\n    static readonly 'itemFrameMapBit' = 'item_frame_map_bit';\n    static readonly 'itemFramePhotoBit' = 'item_frame_photo_bit';\n    static readonly 'kelpAge' = 'kelp_age';\n    static readonly 'leverDirection' = 'lever_direction';\n    /**\n     * Integer property that represents the level of liquid blocks.\n     * Valid values are between 0 and 15 inclusive.\n     */\n    static readonly 'liquidDepth' = 'liquid_depth';\n    /**\n     * Boolean property that determines if a block is lit or not.\n     */\n    static readonly 'lit' = 'lit';\n    /**\n     * Integer property that represents the moisture level of crop.\n     * Valid values are between 0 and 7 inclusive.\n     */\n    static readonly 'moisturizedAmount' = 'moisturized_amount';\n    /**\n     * String property that represents the stone type of an\n     * Infested Stone block. Valid values are 'stone',\n     * 'cobblestone', 'stone_brick', 'mossy_stone_brick',\n     * 'cracked_stone_brick' and 'chiseled_stone_brick'.\n     */\n    static readonly 'monsterEggStoneType' = 'monster_egg_stone_type';\n    static readonly 'multiFaceDirectionBits' = 'multi_face_direction_bits';\n    /**\n     * String property that represents the leaf type of some block\n     * types. Valid values are 'acacia' and 'dark_oak'.\n     */\n    static readonly 'newLeafType' = 'new_leaf_type';\n    /**\n     * String property that represents the wood type of certain\n     * types of blocks. Valid values are 'acacia' and 'dark_oak'.\n     */\n    static readonly 'newLogType' = 'new_log_type';\n    /**\n     * Boolean property that determines if a skull block should\n     * drop loot.\n     */\n    static readonly 'noDropBit' = 'no_drop_bit';\n    /**\n     * Boolean property that determines if a bed block is occupied.\n     */\n    static readonly 'occupiedBit' = 'occupied_bit';\n    /**\n     * String property that represents the leaf type of some block\n     * types. Valid values are 'oak', 'spruce', 'birch', and\n     * 'jungle'.\n     */\n    static readonly 'oldLeafType' = 'old_leaf_type';\n    /**\n     * String property that determines the wood type of certain\n     * types of blocks. Valid values are 'oak', 'spruce', 'birch'\n     * and 'jungle'.\n     */\n    static readonly 'oldLogType' = 'old_log_type';\n    /**\n     * Boolean property that determines if a door, gate, or\n     * trapdoor is open.\n     */\n    static readonly 'openBit' = 'open_bit';\n    /**\n     * Boolean property that determines if a comparator's output is\n     * lit.\n     */\n    static readonly 'outputLitBit' = 'output_lit_bit';\n    /**\n     * Boolean property that determines if a comparator is set to\n     * subtract output.\n     */\n    static readonly 'outputSubtractBit' = 'output_subtract_bit';\n    /**\n     * Boolean property that determines if a leaf block is\n     * persistent.\n     */\n    static readonly 'persistentBit' = 'persistent_bit';\n    static readonly 'pillarAxis' = 'pillar_axis';\n    /**\n     * String property that determines the orientation of portal\n     * blocks. Valid values include 'unknown', 'x', and 'z'.\n     */\n    static readonly 'portalAxis' = 'portal_axis';\n    /**\n     * Boolean property that is true when an observer or tripwire\n     * sends a redstone signal.\n     */\n    static readonly 'poweredBit' = 'powered_bit';\n    static readonly 'prismarineBlockType' = 'prismarine_block_type';\n    static readonly 'propaguleStage' = 'propagule_stage';\n    /**\n     * Boolean property that returns true if a rail has a redstone\n     * signal.\n     */\n    static readonly 'railDataBit' = 'rail_data_bit';\n    /**\n     * Integer property determines the orientation of a placed rail\n     * block. Valid values are between 0 and 8 inclusive.\n     */\n    static readonly 'railDirection' = 'rail_direction';\n    /**\n     * Integer property that determines the signal strength of a\n     * redstone signal. Valid values are between 0 and 15\n     * inclusive.\n     */\n    static readonly 'redstoneSignal' = 'redstone_signal';\n    /**\n     * Integer property that represents the amount of delay of a\n     * repeater. Valid values are between 0 and 3 inclusive.\n     */\n    static readonly 'repeaterDelay' = 'repeater_delay';\n    static readonly 'respawnAnchorCharge' = 'respawn_anchor_charge';\n    static readonly 'rotation' = 'rotation';\n    /**\n     * String property that represents the pattern of a sandstone\n     * block. Valid values are 'default', 'heiroglyphs', 'cut', and\n     * 'smooth'.\n     */\n    static readonly 'sandStoneType' = 'sand_stone_type';\n    /**\n     * String property that represents the sand type of a block.\n     * Valid values are 'normal' and 'red'.\n     */\n    static readonly 'sandType' = 'sand_type';\n    /**\n     * String property that determines the type of the sapling\n     * block. Valid values are 'evergreen', 'birch', 'jungle',\n     * 'acacia', and 'roofed_oak'.\n     */\n    static readonly 'saplingType' = 'sapling_type';\n    /**\n     * String property that determines the type of a sea grass\n     * block. Valid values are 'default', 'double_top' and\n     * 'double_bot'.\n     */\n    static readonly 'seaGrassType' = 'sea_grass_type';\n    /**\n     * String property that represents the type of a sponge block.\n     * Valid values are 'dry' and 'wet'.\n     */\n    static readonly 'spongeType' = 'sponge_type';\n    /**\n     * Integer property that determines the stability of a\n     * scaffolding block. Valid values are between 0 and 5\n     * inclusive.\n     */\n    static readonly 'stability' = 'stability';\n    /**\n     * Boolean property that describes if a scaffolding block has\n     * been checked for stability.\n     */\n    static readonly 'stabilityCheck' = 'stability_check';\n    /**\n     * String property that determines the type of a stone brick\n     * block. Valid values are 'default', 'mossy', 'cracked',\n     * 'chiseled' and 'smooth'.\n     */\n    static readonly 'stoneBrickType' = 'stone_brick_type';\n    /**\n     * String property that represents the type of certain types of\n     * stone slab blocks. Valid values are 'smooth_stone',\n     * 'sandstone', 'wood', 'cobblestone', 'brick', 'stone_brick',\n     * 'quartz' and 'nether_brick'.\n     */\n    static readonly 'stoneSlabType' = 'stone_slab_type';\n    /**\n     * String property that represents the type of certain types of\n     * stone slab blocks. Valid values are 'red_sandstone',\n     * 'purpur', 'prismarine_rough', 'prismarine_dark',\n     * 'prismarine_brick', 'mossy_cobblestone', 'smooth_sandstone'\n     * and 'red_nether_brick'.\n     */\n    static readonly 'stoneSlabType2' = 'stone_slab_type_2';\n    /**\n     * String property that represents the type of certain types of\n     * stone slab blocks. Valid values are 'end_stone_brick',\n     * 'smooth_red_sandstone', 'polished_andesite', 'andesite',\n     * 'diorite', 'polished_diorite', 'granite', and\n     * 'polished_granite'.\n     */\n    static readonly 'stoneSlabType3' = 'stone_slab_type_3';\n    /**\n     * String property that represents the type of certain types of\n     * stone slab blocks. Valid values are 'mossy_stone_brick',\n     * 'smooth_quartz', 'stone', 'cut_sandstone', and\n     * 'cut_red_sandstone'.\n     */\n    static readonly 'stoneSlabType4' = 'stone_slab_type_4';\n    /**\n     * String property that determines the type of a stone block.\n     * Valid values are 'stone', 'granite', 'granite_smooth',\n     * 'diorite', 'diorite_smooth', 'andesite', and\n     * 'andesite_smooth'.\n     */\n    static readonly 'stoneType' = 'stone_type';\n    /**\n     * Boolean property that represents if a wood log has been\n     * stripped of bark.\n     */\n    static readonly 'strippedBit' = 'stripped_bit';\n    /**\n     * String property that represents the state of a structure\n     * block. Valid values are 'data', 'save', 'load', 'corner',\n     * 'invalid' and 'export'.\n     */\n    static readonly 'structureBlockType' = 'structure_block_type';\n    /**\n     * String property that determines which void mode to draw for\n     * structure blocks. Valid values are 'void' and 'air'.\n     */\n    static readonly 'structureVoidType' = 'structure_void_type';\n    /**\n     * Boolean property that indicates if a tripwire block is\n     * suspended.\n     */\n    static readonly 'suspendedBit' = 'suspended_bit';\n    /**\n     * String property that represents the type of a tall grass\n     * block. Valid values are 'default', 'tall', 'fern', and\n     * 'snow'.\n     */\n    static readonly 'tallGrassType' = 'tall_grass_type';\n    /**\n     * Boolean property that determines if a hopper block is active\n     * or not.\n     */\n    static readonly 'toggleBit' = 'toggle_bit';\n    /**\n     * Boolean property that determines if a slab is the top half\n     * of the block or not\n     */\n    static readonly 'topSlotBit' = 'top_slot_bit';\n    /**\n     * String property that determines the direction of a torch in\n     * relation to the block it is attached to. Valid values are\n     * 'unknown', 'west', 'east', 'north', 'south', 'top'.\n     */\n    static readonly 'torchFacingDirection' = 'torch_facing_direction';\n    /**\n     * Boolean property that determines if a dispenser is\n     * triggered.\n     */\n    static readonly 'triggeredBit' = 'triggered_bit';\n    /**\n     * String property that represents the amount of turtle eggs in\n     * an egg block. Valid values are 'one_egg', 'two_egg',\n     * 'three_egg' and 'four_egg'.\n     */\n    static readonly 'turtleEggCount' = 'turtle_egg_count';\n    static readonly 'twistingVinesAge' = 'twisting_vines_age';\n    /**\n     * Boolean property that determines if a leaf block or flower\n     * block should be updated.\n     */\n    static readonly 'updateBit' = 'update_bit';\n    /**\n     * Boolean property that determines if a block is the upper\n     * half of an object like a door or a tall plant.\n     */\n    static readonly 'upperBlockBit' = 'upper_block_bit';\n    /**\n     * Boolean property that determines if a stair block or\n     * trapdoor block is upside-down.\n     */\n    static readonly 'upsideDownBit' = 'upside_down_bit';\n    /**\n     * Integer property that represents the facing direction for\n     * vines. Valid values are between 0 and 15 inclusive.\n     */\n    static readonly 'vineDirectionBits' = 'vine_direction_bits';\n    /**\n     * String property that represents the type of stone used in a\n     * wall block. Valid values are 'cobblestone',\n     * 'mossy_cobblestone', 'granite', 'diorite', 'andesite',\n     * 'sandstone', 'brick', 'stone_brick', 'mossy_stone_brick',\n     * 'nether_brick', 'end_brick', 'prismarine', 'red_sandstone'\n     * and 'red_nether_brick'.\n     */\n    static readonly 'wallBlockType' = 'wall_block_type';\n    /**\n     * String property that determines what kind of connection a\n     * wall has to the east. Valid values are 'none', 'short' and\n     * 'tall'.\n     */\n    static readonly 'wallConnectionTypeEast' = 'wall_connection_type_east';\n    /**\n     * String property that determines what kind of connection a\n     * wall has to the north. Valid values are 'none', 'short' and\n     * 'tall'.\n     */\n    static readonly 'wallConnectionTypeNorth' = 'wall_connection_type_north';\n    /**\n     * String property that determines what kind of connection a\n     * wall has to the south. Valid values are 'none', 'short' and\n     * 'tall'.\n     */\n    static readonly 'wallConnectionTypeSouth' = 'wall_connection_type_south';\n    /**\n     * String property that determines what kind of connection a\n     * wall has to the west. Valid values are 'none', 'short' and\n     * 'tall'.\n     */\n    static readonly 'wallConnectionTypeWest' = 'wall_connection_type_west';\n    /**\n     * Boolean property that determines if a wall should contain a\n     * post.\n     */\n    static readonly 'wallPostBit' = 'wall_post_bit';\n    static readonly 'weepingVinesAge' = 'weeping_vines_age';\n    /**\n     * Integer property that represents the rotation of stairs.\n     * Valid values are between 0 and 3 inclusive.\n     */\n    static readonly 'weirdoDirection' = 'weirdo_direction';\n    /**\n     * String property that determines the wood type of a block.\n     * Valid values are 'oak', 'spruce', 'birch', 'jungle',\n     * 'acacia', and 'dark_oak'.\n     */\n    static readonly 'woodType' = 'wood_type';\n    protected constructor();\n}\n/**\n * Contains additional options for configuring a block raycast\n * query.\n */\ndeclare class BlockRaycastOptions {\n    /**\n     * If true, liquid blocks will be considered as blocks that\n     * 'stop' the raycast.\n     */\n    'includeLiquidBlocks': boolean;\n    /**\n     * If true, passable blocks like vines and flowers will be\n     * considered as blocks that 'stop' the raycast.\n     */\n    'includePassableBlocks': boolean;\n    /**\n     * Maximum distance, in blocks, to process the raycast.\n     */\n    'maxDistance': number;\n}\n/**\n * Represents a block that can play a record.\n */\ndeclare class BlockRecordPlayerComponent {\n    /**\n     * @remarks\n     * Clears the currently playing record of this record-playing\n     * block.\n     * @throws This function can throw errors.\n     */\n    clearRecord(): void;\n    /**\n     * @remarks\n     * Returns true if the record-playing block is currently\n     * playing a record.\n     * @throws This function can throw errors.\n     */\n    isPlaying(): boolean;\n    /**\n     * @remarks\n     * Sets and plays a record based on an item type.\n     * @param recordItemType\n     * @throws This function can throw errors.\n     */\n    setRecord(recordItemType: ItemType): void;\n    protected constructor();\n}\n/**\n * Represents a fluid container block that currently contains\n * snow.\n */\ndeclare class BlockSnowContainerComponent extends BlockComponent {\n    /**\n     * Relative level of snow within this block. Valid values are\n     * between FluidContainer.minFillLevel (0) and\n     * FluidContainer.maxFillLevel (6).\n     */\n    'fillLevel': number;\n    /**\n     * Source location of the block.\n     */\n    readonly 'location': BlockLocation;\n    protected constructor();\n}\n/**\n * The type (or template) of a block. Does not contain\n * permutation data (state) other than the type of block it\n * represents. This type was introduced as of version\n * 1.17.10.21.\n */\ndeclare class BlockType {\n    /**\n     * Represents whether this type of block can be waterlogged.\n     */\n    readonly 'canBeWaterlogged': boolean;\n    /**\n     * Block type name - for example, `minecraft:acacia_stairs`.\n     */\n    readonly 'id': string;\n    /**\n     * @remarks\n     * Creates the default {@link mojang-minecraft.BlockPermutation} for\n     * this type which uses the default values for all properties.\n     * @returns\n     * Returns created permutation.\n     * @throws This function can throw errors.\n     */\n    createDefaultBlockPermutation(): BlockPermutation;\n    protected constructor();\n}\n/**\n * Represents a fluid container block that currently contains\n * water.\n */\ndeclare class BlockWaterContainerComponent extends BlockComponent {\n    /**\n     * Represents a color facet of the water.\n     */\n    'customColor': Color;\n    /**\n     * Relative level of water within this block. Valid values are\n     * between FluidContainer.minFillLevel (0) and\n     * FluidContainer.maxFillLevel (6).\n     */\n    'fillLevel': number;\n    /**\n     * Source location of the block.\n     */\n    readonly 'location': BlockLocation;\n    /**\n     * @remarks\n     * Adds an item and colors the water based on a dye item type.\n     * @param itemType\n     * @throws This function can throw errors.\n     */\n    addDye(itemType: ItemType): void;\n    protected constructor();\n}\n/**\n * Contains the state of a boolean-based property for a\n * {@link mojang-minecraft.BlockPermutation}.\n */\ndeclare class BoolBlockProperty extends IBlockProperty {\n    /**\n     * The name of this property.\n     */\n    readonly 'name': string;\n    /**\n     * A list of valid values for this property.\n     */\n    readonly 'validValues': boolean[];\n    /**\n     * The current value of this property.\n     * @throws\n     * Setting this property can throw if the value passed is not\n     * valid for the property. Use\n     * {@link mojang-minecraft.BoolBlockProperty.validValues} to check\n     * allowed values.\n     */\n    'value': boolean;\n    protected constructor();\n}\n/**\n * Contains information related to changes to a button push.\n */\ndeclare class ButtonPushEvent extends BlockEvent {\n    /**\n     * Block impacted by this event.\n     */\n    readonly 'block': Block;\n    /**\n     * Dimension that contains the block that is the subject of\n     * this event.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * Optional source that triggered the button push.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when a button is\n * pushed.\n */\ndeclare class ButtonPushEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a button is pushed.\n     * @param callback\n     */\n    subscribe(callback: (arg: ButtonPushEvent) => void): (arg: ButtonPushEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a button is\n     * pushed.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ButtonPushEvent) => void): void;\n    protected constructor();\n}\n/**\n * An event that fires as players enter chat messages.\n */\ndeclare class ChatEvent {\n    /**\n     * Message that is being broadcast. In a beforeChat event\n     * handler, _message_ can be updated with edits before the\n     * message is displayed to players.\n     */\n    'message': string;\n    /**\n     * Player that sent the chat message.\n     */\n    'sender': Player;\n    /**\n     * If true, this message is directly targeted to one or more\n     * players (i.e., is not broadcast.)\n     */\n    'sendToTargets': boolean;\n    /**\n     * List of players that will receive this message.\n     */\n    'targets': Player[];\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to chat messages being\n * sent.\n */\ndeclare class ChatEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when new chat messages\n     * are sent.\n     * @param callback\n     * @example custom_command.js\n     * ```typescript\n     *        const chatCallback = World.events.beforeChat.subscribe((eventData) => {\n     *          if (eventData.message.includes(\"cancel\")) {\n     *            // Cancel event if the message contains \"cancel\"\n     *            eventData.canceled = true;\n     *          } else {\n     *            // Modify chat message being sent\n     *            eventData.message = `Modified '${eventData.message}'`;\n     *          }\n     *        });\n     *\n     * ```\n     */\n    subscribe(callback: (arg: ChatEvent) => void): (arg: ChatEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when new chat messages\n     * are sent.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ChatEvent) => void): void;\n    protected constructor();\n}\n/**\n * Represents a fully customizable color within Minecraft.\n */\ndeclare class Color {\n    /**\n     * Determines a color's alpha (opacity) component. Valid values\n     * are between 0 (transparent) and 1.0 (opaque).\n     */\n    'alpha': number;\n    /**\n     * Determines a color's blue component. Valid values are\n     * between 0 and 1.0.\n     */\n    'blue': number;\n    /**\n     * Determines a color's green component. Valid values are\n     * between 0 and 1.0.\n     */\n    'green': number;\n    /**\n     * Determines a color's red component. Valid values are between\n     * 0 and 1.0.\n     */\n    'red': number;\n    /**\n     * @remarks\n     * Creates a new color using the specified color values.\n     * @param red\n     * @param green\n     * @param blue\n     * @param alpha\n     */\n    constructor(red: number, green: number, blue: number, alpha: number);\n}\ndeclare class CommandResult {\n    readonly 'successCount': number;\n    protected constructor();\n}\n/**\n * Represents a container that can hold sets of items. Used\n * with entities such as Players, Chest Minecarts, Llamas, and\n * more.\n */\ndeclare class Container {\n    /**\n     * Contains a count of the slots in the container that are\n     * empty.\n     * @throws This property can throw when used.\n     */\n    readonly 'emptySlotsCount': number;\n    /**\n     * Represents the size of the container. For example, a\n     * standard single-block chest has a size of 27, for the 27\n     * slots in their inventory.\n     * @throws This property can throw when used.\n     */\n    readonly 'size': number;\n    /**\n     * @remarks\n     * Adds an item to the specified container. Item will be placed\n     * in the first available empty slot. (use .setItem if you wish\n     * to set items in a particular slot.)\n     * @param itemStack\n     * The stack of items to add.\n     * @throws This function can throw errors.\n     */\n    addItem(itemStack: ItemStack): void;\n    /**\n     * @remarks\n     * Gets the item stack for the set of items at the specified\n     * slot. If the slot is empty, returns undefined. This method\n     * does not change or clear the contents of the specified slot.\n     * @param slot\n     * Zero-based index of the slot to retrieve items from.\n     * @throws This function can throw errors.\n     * @example getItem.js\n     * ```typescript\n     *        const rightInventoryComp = rightChestCart.getComponent(\"inventory\");\n     *        const rightChestContainer = rightInventoryComp.container;\n     *\n     *        const itemStack = rightChestContainer.getItem(0);\n     *\n     *        test.assert(itemStack.id === \"apple\", \"Expected apple\");\n     *        test.assert(itemStack.amount === 10, \"Expected 10 apples\");\n     * ```\n     */\n    getItem(slot: number): ItemStack;\n    /**\n     * @remarks\n     * Sets an item stack within a particular slot.\n     * @param slot\n     * Zero-based index of the slot to set an item at.\n     * @param itemStack\n     * Stack of items to place within the specified slot.\n     * @throws This function can throw errors.\n     */\n    setItem(slot: number, itemStack: ItemStack): void;\n    /**\n     * @remarks\n     * Swaps items between two different slots within containers.\n     * @param slot\n     * Zero-based index of the slot to swap from this container.\n     * @param otherSlot\n     * Zero-based index of the slot to swap with.\n     * @param otherContainer\n     * Target container to swap with. Note this can be the same\n     * container as this source.\n     * @throws This function can throw errors.\n     * @example swapItems.js\n     * ```typescript\n     *        rightChestContainer.swapItems(1, 0, leftChestContainer); // swap the cake and emerald\n     *\n     * ```\n     */\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean;\n    /**\n     * @remarks\n     * Moves an item from one slot to another, potentially across\n     * containers.\n     * @param fromSlot\n     * @param toSlot\n     * Zero-based index of the slot to move to.\n     * @param toContainer\n     * Target container to transfer to. Note this can be the same\n     * container as the source.\n     * @throws This function can throw errors.\n     * @example transferItem.js\n     * ```typescript\n     *        rightChestContainer.transferItem(0, 4, chestCartContainer); // transfer the apple from the right chest to a chest cart\n     *\n     * ```\n     */\n    transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean;\n    protected constructor();\n}\n/**\n * Contains information related to firing of a data driven\n * entity event - for example, the minecraft:ageable_grow_up\n * event on a chicken.\n */\ndeclare class DataDrivenEntityTriggerEvent {\n    /**\n     * Entity that the event triggered on.\n     */\n    readonly 'entity': Entity;\n    /**\n     * Name of the data driven event being triggered.\n     */\n    readonly 'id': string;\n    /**\n     * A list of modifications to component state that are the\n     * effect of this triggered event.\n     */\n    readonly 'modifiers': DefinitionModifier[];\n    protected constructor();\n}\n/**\n * Contains event registration related to firing of a data\n * driven entity event - for example, the\n * minecraft:ageable_grow_up event on a chicken.\n */\ndeclare class DataDrivenEntityTriggerEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called after a data driven\n     * entity event is triggered.\n     * @param callback\n     * @param options\n     */\n    subscribe(\n        callback: (arg: DataDrivenEntityTriggerEvent) => void,\n        options?: EntityDataDrivenTriggerEventOptions,\n    ): (arg: DataDrivenEntityTriggerEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback that will be called after a data driven\n     * entity event is triggered.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: DataDrivenEntityTriggerEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains a set of updates to the component definition state\n * of an entity.\n */\ndeclare class DefinitionModifier {\n    /**\n     * A list of components that will be added via this definition\n     * modification.\n     */\n    readonly 'componentGroupsToAdd': string[];\n    /**\n     * A list of components that will be removed via this\n     * definition modification.\n     */\n    readonly 'componentGroupsToRemove': string[];\n    /**\n     * A list of entity definition events that will be fired via\n     * this update.\n     */\n    'triggers': Trigger[];\n}\n/**\n * A class that represents a particular dimension (e.g., The\n * End) within a world.\n */\ndeclare class Dimension {\n    /**\n     * Identifier of the dimension.\n     * @throws This property can throw when used.\n     */\n    readonly 'id': string;\n    /**\n     * @remarks\n     * Creates an explosion at the specified location.\n     * @param location\n     * The location of the explosion.\n     * @param radius\n     * Radius, in blocks, of the explosion to create.\n     * @param explosionOptions\n     * Additional configurable options for the explosion.\n     * @throws This function can throw errors.\n     * @example createExplosion.ts\n     * ```typescript\n     *          overworld.createExplosion(targetLocation, 10, new mc.ExplosionOptions());\n     * ```\n     * @example createFireAndWaterExplosions.ts\n     * ```typescript\n     *          const explosionLoc = new mc.Location(targetLocation.x + 0.5, targetLocation.y + 0.5, targetLocation.z + 0.5);\n     *\n     *          const fireExplosionOptions = new mc.ExplosionOptions();\n     *\n     *          // Explode with fire\n     *          fireExplosionOptions.causesFire = true;\n     *\n     *          overworld.createExplosion(explosionLoc, 15, fireExplosionOptions);\n     *          const waterExplosionOptions = new mc.ExplosionOptions();\n     *\n     *          // Explode in water\n     *          waterExplosionOptions.allowUnderwater = true;\n     *\n     *          const belowWaterLoc = new mc.Location(targetLocation.x + 3, targetLocation.y + 1, targetLocation.z + 3);\n     *\n     *          overworld.createExplosion(belowWaterLoc, 10, waterExplosionOptions);\n     * ```\n     * @example createNoBlockExplosion.ts\n     * ```typescript\n     *          const explosionOptions = new mc.ExplosionOptions();\n     *\n     *          // Start by exploding without breaking blocks\n     *          explosionOptions.breaksBlocks = false;\n     *\n     *          const explodeNoBlocksLoc = new mc.Location(\n     *            Math.floor(targetLocation.x + 1),\n     *            Math.floor(targetLocation.y + 2),\n     *            Math.floor(targetLocation.z + 1)\n     *          );\n     *\n     *          overworld.createExplosion(explodeNoBlocksLoc, 15, explosionOptions);\n     * ```\n     */\n    createExplosion(location: Location, radius: number, explosionOptions: ExplosionOptions): void;\n    /**\n     * @remarks\n     * Returns a block instance at the given location. This method\n     * was introduced as of version 1.17.10.21.\n     * @param location\n     * The location at which to return a block.\n     * @returns\n     * Block at the specified location.\n     */\n    getBlock(location: BlockLocation): Block;\n    /**\n     * @remarks\n     * Gets the first block that intersects with a vector emanating\n     * from a location.\n     * @param location\n     * @param direction\n     * @param options\n     * Additional options for processing this raycast query.\n     * @throws This function can throw errors.\n     */\n    getBlockFromRay(location: Location, direction: Vector, options?: BlockRaycastOptions): Block;\n    /**\n     * @remarks\n     * Returns a set of entities based on a set of conditions\n     * defined via the EntityQueryOptions set of filter criteria.\n     * @param getEntities\n     * @returns\n     * An entity iterator that can be used to loop over the\n     * returned entities.\n     * @throws This function can throw errors.\n     * @example testThatEntityIsFeatherItem.ts\n     * ```typescript\n     *          const query = new mc.EntityQueryOptions();\n     *          query.type = \"item\";\n     *          query.location = targetLocation;\n     *          const items = overworld.getEntities(query);\n     *\n     *          for (const item of items) {\n     *            const itemComp = item.getComponent(\"item\") as any;\n     *\n     *            if (itemComp) {\n     *              if (itemComp.itemStack.id.endsWith(\"feather\")) {\n     *                console.log(\"Success! Found a feather\", 1);\n     *              }\n     *            }\n     *          }\n     * ```\n     */\n    getEntities(getEntities?: EntityQueryOptions): EntityIterator;\n    /**\n     * @remarks\n     * Returns a set of entities at a particular location.\n     * @param location\n     * The location at which to return entities.\n     * @returns\n     * Zero or more entities at the specified location.\n     */\n    getEntitiesAtBlockLocation(location: BlockLocation): Entity[];\n    /**\n     * @remarks\n     * Gets entities that intersect with a specified vector\n     * emanating from a location.\n     * @param location\n     * @param direction\n     * @param options\n     * Additional options for processing this raycast query.\n     * @throws This function can throw errors.\n     */\n    getEntitiesFromRay(location: Location, direction: Vector, options?: EntityRaycastOptions): Entity[];\n    /**\n     * @remarks\n     * Returns a set of players based on a set of conditions\n     * defined via the EntityQueryOptions set of filter criteria.\n     * @param getPlayers\n     * @returns\n     * An entity iterator that can be used to loop over the\n     * returned players.\n     * @throws This function can throw errors.\n     */\n    getPlayers(getPlayers?: EntityQueryOptions): PlayerIterator;\n    /**\n     * @remarks\n     * Tests whether a particular location contains an Air (empty)\n     * block.\n     * @param location\n     * The location at which to check for emptiness\n     * @returns\n     * True if the block at the location is air (empty)\n     */\n    isEmpty(location: BlockLocation): boolean;\n    /**\n     * @remarks\n     * Runs a particular command from the context of the broader\n     * dimension.\n     * @param commandString\n     * Command to run. Note that command strings should not start\n     * with slash.\n     * @returns\n     * For commands that return data, returns a JSON structure with\n     * command response values.\n     * @throws This function can throw errors.\n     * @example commands.js\n     * ```typescript\n     *        world.getDimension(\"overworld\").runCommand(\"say You got a new high score!\");\n     *        world.getDimension(\"overworld\").runCommand(\"scoreboard players set @p score 10\");\n     *\n     * ```\n     */\n    runCommand(commandString: string): any;\n    /**\n     * @remarks\n     * Runs a particular command asynchronously from the context of\n     * the broader dimension. Where possible - and especially for\n     * long-running operations - you should use runCommandAsync\n     * over runCommand.\n     * @param commandString\n     * Command to run. Note that command strings should not start\n     * with slash.\n     * @returns\n     * For commands that return data, returns a CommandResult with\n     * an indicator of command results.\n     * @throws This function can throw errors.\n     */\n    runCommandAsync(commandString: string): Promise<CommandResult>;\n    /**\n     * @remarks\n     * Creates a new entity (e.g., a mob) at the specified\n     * location.\n     * @param identifier\n     * Identifier of the type of entity to spawn. If no namespace\n     * is specified, 'minecraft:' is assumed.\n     * @param location\n     * The location at which to create the entity.\n     * @returns\n     * Newly created entity at the specified location.\n     * @throws This function can throw errors.\n     * @example createOldHorse.ts\n     * ```typescript\n     *          // create a horse and trigger the 'ageable_grow_up' event, ensuring the horse is created as an adult\n     *          overworld.spawnEntity(\"minecraft:horse<minecraft:ageable_grow_up>\", targetLocation);\n     * ```\n     * @example quickFoxLazyDog.ts\n     * ```typescript\n     *          const fox = overworld.spawnEntity(\n     *            \"minecraft:fox\",\n     *            new mc.BlockLocation(targetLocation.x + 1, targetLocation.y + 2, targetLocation.z + 3)\n     *          );\n     *          fox.addEffect(mc.MinecraftEffectTypes.speed, 10, 20);\n     *          log(\"Created a fox.\");\n     *\n     *          const wolf = overworld.spawnEntity(\n     *            \"minecraft:wolf\",\n     *            new mc.BlockLocation(targetLocation.x + 4, targetLocation.y + 2, targetLocation.z + 3)\n     *          );\n     *          wolf.addEffect(mc.MinecraftEffectTypes.slowness, 10, 20);\n     *          wolf.isSneaking = true;\n     *          log(\"Created a sneaking wolf.\", 1);\n     * ```\n     * @example trapTick.ts\n     * ```typescript\n     *          let ticks = 0;\n     *\n     *          mc.world.events.tick.subscribe((event: mc.TickEvent) => {\n     *            ticks++;\n     *\n     *            // Minecraft runs at 20 ticks per second\n     *            if (ticks % 1200 === 0) {\n     *              overworld.runCommand(\"say Another minute passes...\");\n     *            }\n     *          });\n     * ```\n     */\n    spawnEntity(identifier: string, location: BlockLocation | Location): Entity;\n    /**\n     * @remarks\n     * Creates a new item stack as an entity at the specified\n     * location.\n     * @param item\n     * @param location\n     * The location at which to create the item stack.\n     * @returns\n     * Newly created item stack entity at the specified location.\n     * @throws This function can throw errors.\n     * @example itemStacks.ts\n     * ```typescript\n     *          const oneItemLoc = new mc.BlockLocation(3, 2, 1);\n     *          const fiveItemsLoc = new mc.BlockLocation(1, 2, 1);\n     *          const diamondPickaxeLoc = new mc.BlockLocation(2, 2, 4);\n     *\n     *          const oneEmerald = new mc.ItemStack(mc.MinecraftItemTypes.emerald, 1, 0);\n     *          const onePickaxe = new mc.ItemStack(mc.MinecraftItemTypes.diamondPickaxe, 1, 0);\n     *          const fiveEmeralds = new mc.ItemStack(mc.MinecraftItemTypes.emerald, 5, 0);\n     *\n     *          overworld.spawnItem(oneEmerald, oneItemLoc);\n     *          overworld.spawnItem(fiveEmeralds, fiveItemsLoc);\n     *          overworld.spawnItem(onePickaxe, diamondPickaxeLoc);\n     * ```\n     * @example spawnItem.ts\n     * ```typescript\n     *          const featherItem = new mc.ItemStack(mc.MinecraftItemTypes.feather, 1, 0);\n     *\n     *          overworld.spawnItem(featherItem, targetLocation);\n     *          log(\"New feather created!\");\n     * ```\n     */\n    spawnItem(item: ItemStack, location: BlockLocation | Location): Entity;\n    /**\n     * @remarks\n     * Creates a new particle emitter at a specified location in\n     * the world.\n     * @param effectName\n     * Identifier of the particle to create.\n     * @param location\n     * The location at which to create the particle emitter.\n     * @param molangVariables\n     * A set of additional, customizable variables that can be\n     * adjusted for this particle emitter.\n     * @returns\n     * Newly created entity at the specified location.\n     */\n    spawnParticle(effectName: string, location: Location, molangVariables: MolangVariableMap): void;\n    protected constructor();\n}\n/**\n * Class used in conjunction with\n * {@link mojang-minecraft.PropertyRegistry} to define dynamic\n * properties that can be used on entities of a specified type\n * or at the global World- level.\n */\ndeclare class DynamicPropertiesDefinition {\n    /**\n     * @remarks\n     * Defines a new boolean dynamic property.\n     * @param identifier\n     * @throws This function can throw errors.\n     */\n    defineBoolean(identifier: string): void;\n    /**\n     * @remarks\n     * Defines a new number dynamic property.\n     * @param identifier\n     * @throws This function can throw errors.\n     */\n    defineNumber(identifier: string): void;\n    /**\n     * @remarks\n     * Defines a new string dynamic property.\n     * @param identifier\n     * @param maxLength\n     * @throws This function can throw errors.\n     */\n    defineString(identifier: string, maxLength: number): void;\n}\n/**\n * Represents an effect - like poison - that has been added to\n * an Entity.\n */\ndeclare class Effect {\n    /**\n     * Gets an amplifier that may have been applied to this effect.\n     * Sample values range typically from 0 to 4. Example: The\n     * effect 'Jump Boost II' will have an amplifier value of 1.\n     */\n    readonly 'amplifier': number;\n    /**\n     * Gets the player-friendly name of this effect.\n     */\n    readonly 'displayName': string;\n    /**\n     * Gets the entire specified duration, in ticks, of this\n     * effect.\n     */\n    readonly 'duration': number;\n    protected constructor();\n}\n/**\n * Contains information related to changes to an effect - like\n * poison - being added to an entity.\n */\ndeclare class EffectAddEvent {\n    /**\n     * Additional properties and details of the effect.\n     */\n    'effect': Effect;\n    /**\n     * Additional variant number for the effect.\n     */\n    'effectState': number;\n    /**\n     * Entity that the effect is being added to.\n     */\n    'entity': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when an effect is\n * added to an entity.\n */\ndeclare class EffectAddEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an effect is added\n     * to an entity.\n     * @param callback\n     * @param options\n     */\n    subscribe(callback: (arg: EffectAddEvent) => void, options?: EntityEventOptions): (arg: EffectAddEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an effect is added\n     * to an entity.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: EffectAddEvent) => void): void;\n    protected constructor();\n}\n/**\n * Represents a type of effect - like poison - that can be\n * applied to an entity.\n */\ndeclare class EffectType {\n    /**\n     * @remarks\n     * Identifier name of this effect type.\n     * @returns\n     * Identifier of the effect type.\n     */\n    getName(): string;\n    protected constructor();\n}\n/**\n * This class represents a specific leveled enchantment that is\n * applied to an item.\n */\ndeclare class Enchantment {\n    /**\n     * The level of this enchantment instance.\n     */\n    'level': number;\n    /**\n     * The enchantment type of this instance.\n     */\n    readonly 'type': EnchantmentType;\n    constructor(enchantmentType: EnchantmentType, level?: number);\n}\n/**\n * This class represents a collection of enchantments that can\n * be applied to an item.\n */\ndeclare class EnchantmentList implements Iterable<Enchantment> {\n    /**\n     * The item slot/type that this collection is applied to.\n     */\n    readonly 'slot': number;\n    [Symbol.iterator](): Iterator<Enchantment>;\n    /**\n     * @remarks\n     * Attempts to add the enchantment to this collection. Returns\n     * true if successful.\n     * @param enchantment\n     */\n    addEnchantment(enchantment: Enchantment): boolean;\n    /**\n     * @remarks\n     * Returns whether or not the provided EnchantmentInstance can\n     * be added to this collection.\n     * @param enchantment\n     */\n    canAddEnchantment(enchantment: Enchantment): boolean;\n    constructor(enchantmentSlot: number);\n    /**\n     * @remarks\n     * Returns an enchantment associated with a type.\n     * @param enchantmentType\n     */\n    getEnchantment(enchantmentType: EnchantmentType): Enchantment;\n    /**\n     * @remarks\n     * If this collection has an EnchantmentInstance with type,\n     * returns the level of the enchantment. Returns 0 if not\n     * present.\n     * @param enchantmentType\n     */\n    hasEnchantment(enchantmentType: EnchantmentType): number;\n    next(): IteratorResult<Enchantment>;\n    /**\n     * @remarks\n     * Removes an EnchantmentInstance with type from this\n     * collection if present.\n     * @param enchantmentType\n     */\n    removeEnchantment(enchantmentType: EnchantmentType): void;\n}\n/**\n * This enum represents the item slot or type that an\n * enchantment can be applied to.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class EnchantmentSlot {\n    static readonly 'all' = -1;\n    static readonly 'armorFeet' = 4;\n    static readonly 'armorHead' = 1;\n    static readonly 'armorLegs' = 8;\n    static readonly 'armorTorso' = 2;\n    static readonly 'axe' = 512;\n    static readonly 'bow' = 32;\n    static readonly 'carrotStick' = 8192;\n    static readonly 'cosmeticHead' = 262144;\n    static readonly 'crossbow' = 65536;\n    static readonly 'elytra' = 16384;\n    static readonly 'fishingRod' = 4096;\n    static readonly 'flintsteel' = 256;\n    static readonly 'gArmor' = 15;\n    static readonly 'gDigging' = 3648;\n    static readonly 'gTool' = 131520;\n    static readonly 'hoe' = 64;\n    static readonly 'none' = 0;\n    static readonly 'pickaxe' = 1024;\n    static readonly 'shears' = 128;\n    static readonly 'shield' = 131072;\n    static readonly 'shovel' = 2048;\n    static readonly 'spear' = 32768;\n    static readonly 'sword' = 16;\n    protected constructor();\n}\n/**\n * Contains information on a type of enchantment.\n */\ndeclare class EnchantmentType {\n    /**\n     * The name of the enchantment type.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum level this type of enchantment can have.\n     */\n    readonly 'maxLevel': number;\n    protected constructor();\n}\n/**\n * Represents the state of an entity (a mob, the player, or\n * other moving objects like minecarts) in the world.\n */\ndeclare class Entity {\n    /**\n     * Dimension that the entity is currently within.\n     * @throws This property can throw when used.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * Location of the center of the head component of the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'headLocation': Location;\n    /**\n     * Unique identifier of the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'id': string;\n    /**\n     * Whether the entity is sneaking - that is, moving more slowly\n     * and more quietly.\n     */\n    'isSneaking': boolean;\n    /**\n     * Current location of the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'location': Location;\n    /**\n     * Given name of the entity.\n     */\n    'nameTag': string;\n    /**\n     * Main rotation of the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'rotation': XYRotation;\n    /**\n     * Returns a scoreboard identity that represents this entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'scoreboard': ScoreboardIdentity;\n    /**\n     * Retrieves or sets an entity that is used as the target of\n     * AI-related behaviors, like attacking.\n     */\n    'target': Entity;\n    /**\n     * Velocity of the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'velocity': Vector;\n    /**\n     * Vector of the current view of the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'viewVector': Vector;\n    /**\n     * @remarks\n     * Adds an effect, like poison, to the entity.\n     * @param effectType\n     * Type of effect to add to the entity.\n     * @param duration\n     * Amount of time, in seconds, for the effect to apply.\n     * @param amplifier\n     * Optional amplification of the effect to apply.\n     * @param showParticles\n     * @throws This function can throw errors.\n     * @example addEffect.js\n     * ```typescript\n     *        const villagerId = \"minecraft:villager_v2<minecraft:ageable_grow_up>\";\n     *        const villagerLoc = new BlockLocation(1, 2, 1);\n     *        const villager = test.spawn(villagerId, villagerLoc);\n     *        const duration = 20;\n     *\n     *        villager.addEffect(MinecraftEffectTypes.poison, duration, 1);\n     *\n     * ```\n     * @example quickFoxLazyDog.ts\n     * ```typescript\n     *          const fox = overworld.spawnEntity(\n     *            \"minecraft:fox\",\n     *            new mc.BlockLocation(targetLocation.x + 1, targetLocation.y + 2, targetLocation.z + 3)\n     *          );\n     *          fox.addEffect(mc.MinecraftEffectTypes.speed, 10, 20);\n     *          log(\"Created a fox.\");\n     *\n     *          const wolf = overworld.spawnEntity(\n     *            \"minecraft:wolf\",\n     *            new mc.BlockLocation(targetLocation.x + 4, targetLocation.y + 2, targetLocation.z + 3)\n     *          );\n     *          wolf.addEffect(mc.MinecraftEffectTypes.slowness, 10, 20);\n     *          wolf.isSneaking = true;\n     *          log(\"Created a sneaking wolf.\", 1);\n     * ```\n     */\n    addEffect(effectType: EffectType, duration: number, amplifier?: number, showParticles?: boolean): void;\n    /**\n     * @remarks\n     * Adds a specified tag to an entity.\n     * @param tag\n     * Content of the tag to add.\n     * @throws This function can throw errors.\n     */\n    addTag(tag: string): boolean;\n    /**\n     * @remarks\n     * Gets the first block that intersects with the vector of the\n     * view of this entity.\n     * @param options\n     * Additional options for processing this raycast query.\n     * @throws This function can throw errors.\n     */\n    getBlockFromViewVector(options?: BlockRaycastOptions): Block;\n    /**\n     * @remarks\n     * Gets a component (that represents additional capabilities)\n     * for an entity.\n     * @param componentId\n     * The identifier of the component (e.g., 'minecraft:rideable')\n     * to retrieve. If no namespace prefix is specified,\n     * 'minecraft:' is assumed. If the component is not present on\n     * the entity, undefined is returned.\n     */\n    getComponent: EntityComponents;\n    /**\n     * @remarks\n     * Returns all components that are both present on this entity\n     * and supported by the API.\n     */\n    getComponents(): IEntityComponent[];\n    /**\n     * @remarks\n     * Returns a property value.\n     * @param identifier\n     * @returns\n     * Returns the value for the property, or undefined if the\n     * property has not been set.\n     * @throws This function can throw errors.\n     */\n    getDynamicProperty(identifier: string): boolean | number | string;\n    /**\n     * @remarks\n     * Returns the effect for the specified EffectType on the\n     * entity, or undefined if the effect is not present.\n     * @param effectType\n     * @returns\n     * Effect object for the specified effect, or undefined if the\n     * effect is not present.\n     * @throws This function can throw errors.\n     */\n    getEffect(effectType: EffectType): Effect;\n    /**\n     * @remarks\n     * Gets the first entity that intersects with the vector of the\n     * view of this entity.\n     * @param options\n     * Additional options for processing this raycast query.\n     * @throws This function can throw errors.\n     */\n    getEntitiesFromViewVector(options?: EntityRaycastOptions): Entity[];\n    /**\n     * @remarks\n     * Returns all tags associated with an entity.\n     * @throws This function can throw errors.\n     */\n    getTags(): string[];\n    /**\n     * @remarks\n     * Returns true if the specified component is present on this\n     * entity.\n     * @param componentId\n     * The identifier of the component (e.g., 'minecraft:rideable')\n     * to retrieve. If no namespace prefix is specified,\n     * 'minecraft:' is assumed.\n     */\n    hasComponent(componentId: string): boolean;\n    /**\n     * @remarks\n     * Tests whether an entity has a particular tag.\n     * @param tag\n     * Identifier of the tag to test for.\n     * @throws This function can throw errors.\n     */\n    hasTag(tag: string): boolean;\n    /**\n     * @remarks\n     * Kills this entity. The entity will drop loot as normal.\n     * @throws This function can throw errors.\n     */\n    kill(): void;\n    /**\n     * @remarks\n     * Removes a specified property.\n     * @param identifier\n     * @throws This function can throw errors.\n     */\n    removeDynamicProperty(identifier: string): boolean;\n    /**\n     * @remarks\n     * Removes a specified tag from an entity.\n     * @param tag\n     * Content of the tag to remove.\n     * @throws This function can throw errors.\n     */\n    removeTag(tag: string): boolean;\n    /**\n     * @remarks\n     * Runs a particular command from the context of this entity.\n     * @param commandString\n     * Command to run. Note that command strings should not start\n     * with slash.\n     * @returns\n     * For commands that return data, returns a JSON structure with\n     * command response values.\n     * @throws This function can throw errors.\n     * @example commands.js\n     * ```typescript\n     *        entity.runCommand(\"say You got a new high score!\");\n     *        entity.runCommand(\"scoreboard players set @p score 10\");\n     *\n     * ```\n     */\n    runCommand(commandString: string): any;\n    /**\n     * @remarks\n     * Runs a particular command asynchronously from the context of\n     * this entity. Where possible, running a command\n     * asynchronously is recommended, especially for long running\n     * operations.\n     * @param commandString\n     * Command to run. Note that command strings should not start\n     * with slash.\n     * @returns\n     * For commands that return data, returns a JSON structure with\n     * command response values.\n     * @throws This function can throw errors.\n     */\n    runCommandAsync(commandString: string): Promise<CommandResult>;\n    /**\n     * @remarks\n     * Sets a specified property to a value.\n     * @param identifier\n     * @param value\n     * Data value of the property to set.\n     * @throws This function can throw errors.\n     */\n    setDynamicProperty(identifier: string, value: boolean | number | string): void;\n    /**\n     * @remarks\n     * Sets the main rotation of the entity.\n     * @param degreesX\n     * @param degreesY\n     * @throws This function can throw errors.\n     */\n    setRotation(degreesX: number, degreesY: number): void;\n    /**\n     * @remarks\n     * Sets a velocity for the entity to move with.\n     * @param velocity\n     * X/Y/Z components of the velocity.\n     * @throws This function can throw errors.\n     */\n    setVelocity(velocity: Vector): void;\n    /**\n     * @remarks\n     * Teleports the selected entity to a new location\n     * @param location\n     * New location for the entity.\n     * @param dimension\n     * Dimension to move the selected entity to.\n     * @param xRotation\n     * X rotation of the entity after teleportation.\n     * @param yRotation\n     * Y rotation of the entity after teleportation.\n     * @param keepVelocity\n     * @throws This function can throw errors.\n     */\n    teleport(\n        location: Location,\n        dimension: Dimension,\n        xRotation: number,\n        yRotation: number,\n        keepVelocity?: boolean,\n    ): void;\n    /**\n     * @remarks\n     * Teleports the selected entity to a new location, and will\n     * have the entity facing a specified location.\n     * @param location\n     * New location for the entity.\n     * @param dimension\n     * Dimension to move the selected entity to.\n     * @param facingLocation\n     * Location that this entity will be facing.\n     * @param keepVelocity\n     * @throws This function can throw errors.\n     */\n    teleportFacing(location: Location, dimension: Dimension, facingLocation: Location, keepVelocity?: boolean): void;\n    /**\n     * @remarks\n     * Triggers an entity type event. For every entity, a number of\n     * events are defined in an entities' definition for key entity\n     * behaviors; for example, creepers have a\n     * minecraft:start_exploding type event.\n     * @param eventName\n     * Name of the entity type event to trigger. If a namespace is\n     * not specified, minecraft: is assumed.\n     * @throws This function can throw errors.\n     */\n    triggerEvent(eventName: string): void;\n    protected constructor();\n}\n/**\n * When added, this component makes the entity spawn with a\n * rider of the specified entityType.\n */\ndeclare class EntityAddRiderComponent extends IEntityComponent {\n    /**\n     * The type of entity that is added as a rider for this entity\n     * when spawned under certain conditions.\n     * @throws This property can throw when used.\n     */\n    readonly 'entityType': string;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:addrider.\n     */\n    readonly 'id': string;\n    /**\n     * Optional spawn event to trigger on the rider when that rider\n     * is spawned for this entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'spawnEvent': string;\n    protected constructor();\n}\n/**\n * Adds a timer for the entity to grow up. It can be\n * accelerated by giving the entity the items it likes as\n * defined by feedItems.\n */\ndeclare class EntityAgeableComponent extends IEntityComponent {\n    /**\n     * List of items that the entity drops when it grows up.\n     * @throws This property can throw when used.\n     */\n    readonly 'dropItems': string[];\n    /**\n     * Amount of time before the entity grows up, -1 for always a\n     * baby.\n     * @throws This property can throw when used.\n     */\n    readonly 'duration': number;\n    /**\n     * List of items that can be fed to the entity. Includes 'item'\n     * for the item name and 'growth' to define how much time it\n     * grows up by.\n     * @throws This property can throw when used.\n     */\n    readonly 'feedItems': EntityDefinitionFeedItem[];\n    /**\n     * Event to run when this entity grows up.\n     * @throws This property can throw when used.\n     */\n    readonly 'growUp': Trigger;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:ageable.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * Defines what blocks this entity can breathe in and gives\n * them the ability to suffocate.\n */\ndeclare class EntityBreathableComponent extends IEntityComponent {\n    /**\n     * List of blocks this entity can breathe in, in addition to\n     * the separate properties for classes of blocks.\n     * @throws This property can throw when used.\n     */\n    readonly 'breatheBlocks': BlockPermutation[];\n    /**\n     * If true, this entity can breathe in air.\n     * @throws This property can throw when used.\n     */\n    readonly 'breathesAir': boolean;\n    /**\n     * If true, this entity can breathe in lava.\n     * @throws This property can throw when used.\n     */\n    readonly 'breathesLava': boolean;\n    /**\n     * If true, this entity can breathe in solid blocks.\n     * @throws This property can throw when used.\n     */\n    readonly 'breathesSolids': boolean;\n    /**\n     * If true, this entity can breathe in water.\n     * @throws This property can throw when used.\n     */\n    readonly 'breathesWater': boolean;\n    /**\n     * If true, this entity will have visible bubbles while in\n     * water.\n     * @throws This property can throw when used.\n     */\n    readonly 'generatesBubbles': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:breathable.\n     */\n    readonly 'id': string;\n    /**\n     * Time in seconds to recover breath to maximum.\n     * @throws This property can throw when used.\n     */\n    readonly 'inhaleTime': number;\n    /**\n     * List of blocks this entity can't breathe in.\n     * @throws This property can throw when used.\n     */\n    readonly 'nonBreatheBlocks': BlockPermutation[];\n    /**\n     * Time in seconds between suffocation damage.\n     * @throws This property can throw when used.\n     */\n    readonly 'suffocateTime': number;\n    /**\n     * Time in seconds the entity can hold its breath.\n     * @throws This property can throw when used.\n     */\n    readonly 'totalSupply': number;\n    /**\n     * @remarks\n     * Sets the current air supply of the entity.\n     * @param value\n     * New air supply for the entity.\n     * @throws This function can throw errors.\n     */\n    setAirSupply(value: number): void;\n    protected constructor();\n}\n/**\n * When added, this component signifies that the entity can\n * climb up ladders.\n */\ndeclare class EntityCanClimbComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:can_climb.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that the entity can\n * fly, and the pathfinder won't be restricted to paths where a\n * solid block is required underneath it.\n */\ndeclare class EntityCanFlyComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:can_fly.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that the entity can\n * power jump like the horse does within Minecraft.\n */\ndeclare class EntityCanPowerJumpComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:can_power_jump.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * Defines the entity's color. Only works on certain entities\n * that have predefined color values (sheep, llama, shulker).\n */\ndeclare class EntityColorComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:color.\n     */\n    readonly 'id': string;\n    /**\n     * The palette color value of the entity.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Contains information related to the creation of a new\n * entity.\n */\ndeclare class EntityCreateEvent {\n    /**\n     * New entity that was created.\n     */\n    'entity': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when a new entity is\n * created.\n */\ndeclare class EntityCreateEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a new entity is\n     * created.\n     * @param callback\n     * @example runEntityCreatedEvent.ts\n     * ```typescript\n     *          // register a new function that is called when a new entity is created.\n     *          const entityCreatedCallback = mc.world.events.entityCreate.subscribe((entityEvent: mc.EntityCreateEvent) => {\n     *            if (entityEvent && entityEvent.entity) {\n     *              log(\"New entity of type '\" + +entityEvent.entity + \"' created!\", 1);\n     *            } else {\n     *              log(\"The entity event didn't work as expected.\", -1);\n     *            }\n     *          });\n     * ```\n     */\n    subscribe(callback: (arg: EntityCreateEvent) => void): (arg: EntityCreateEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a new entity is\n     * created.\n     * @param callback\n     * @throws This function can throw errors.\n     * @example unsubscribeEntityCreatedEvent.ts\n     * ```typescript\n     *          if (entityCreatedCallbacks.length > 0) {\n     *            let callback = entityCreatedCallbacks.pop();\n     *\n     *            if (callback) {\n     *              mc.world.events.entityCreate.unsubscribe(callback);\n     *            }\n     *          }\n     * ```\n     */\n    unsubscribe(callback: (arg: EntityCreateEvent) => void): void;\n    protected constructor();\n}\n/**\n * Specifies additional filters that are used in registering a\n * data driven trigger event for entities.\n */\ndeclare class EntityDataDrivenTriggerEventOptions {\n    /**\n     * If this value is set, this event will only fire for entities\n     * that match the entities within this collection.\n     */\n    'entities': Entity[];\n    /**\n     * If this value is set, this event will only fire if the\n     * impacted entities' type matches this parameter.\n     */\n    'entityTypes': string[];\n    /**\n     * If this value is set, this event will only fire if the\n     * impacted triggered event matches one of the events listed in\n     * this parameter.\n     */\n    'eventTypes': string[];\n}\n/**\n * As part of the Ageable component, represents a set of items\n * that can be fed to an entity and the rate at which that\n * causes them to grow.\n */\ndeclare class EntityDefinitionFeedItem {\n    /**\n     * The amount by which an entity's age will increase when fed\n     * this item. Values usually range between 0 and 1.\n     */\n    readonly 'growth': number;\n    /**\n     * Identifier of type of item that can be fed. If a namespace\n     * is not specified, 'minecraft:' is assumed. Example values\n     * include 'wheat' or 'golden_apple'.\n     */\n    readonly 'item': string;\n    protected constructor();\n}\n/**\n * Contains optional parameters for registering an entity\n * event.\n */\ndeclare class EntityEventOptions {\n    /**\n     * If this value is set, this event will only fire for entities\n     * that match the entities within this collection.\n     */\n    'entities': Entity[];\n    /**\n     * If this value is set, this event will only fire if the\n     * impacted entities' type matches this parameter.\n     */\n    'entityTypes': string[];\n}\n/**\n * When added, this component signifies that this entity\n * doesn't take damage from fire.\n */\ndeclare class EntityFireImmuneComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:fire_immune.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity can\n * float in liquid blocks.\n */\ndeclare class EntityFloatsInLiquidComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:floats_in_liquid.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * Represents the flying speed of an entity.\n */\ndeclare class EntityFlyingSpeedComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:flying_speed.\n     */\n    readonly 'id': string;\n    /**\n     * Speed while flying value of the entity.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Defines how much friction affects this entity.\n */\ndeclare class EntityFrictionModifierComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:friction_modifier.\n     */\n    readonly 'id': string;\n    /**\n     * The higher the number, the more the friction affects this\n     * entity. A value of 1.0 means regular friction, while 2.0\n     * means twice as much.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Sets the offset from the ground that the entity is actually\n * at.\n */\ndeclare class EntityGroundOffsetComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:ground_offset.\n     */\n    readonly 'id': string;\n    /**\n     * The value of the entity's offset from the terrain, in\n     * blocks.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Defines the interactions with this entity for healing it.\n */\ndeclare class EntityHealableComponent extends IEntityComponent {\n    /**\n     * A set of filters for when these Healable items would apply.\n     * @throws This property can throw when used.\n     */\n    readonly 'filters': FilterGroup;\n    /**\n     * Determines if an item can be used regardless of the entity\n     * being at full health.\n     * @throws This property can throw when used.\n     */\n    readonly 'forceUse': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:healable.\n     */\n    readonly 'id': string;\n    /**\n     * A set of items that can specifically heal this entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'items': FeedItem[];\n    protected constructor();\n}\n/**\n * Defines the health properties of an entity.\n */\ndeclare class EntityHealthComponent extends IEntityComponent {\n    /**\n     * Read-only. Returns the current value of health for the\n     * entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'current': number;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:health.\n     */\n    readonly 'id': string;\n    /**\n     * Value for health as defined through entity components.\n     * @throws This property can throw when used.\n     */\n    readonly 'value': number;\n    /**\n     * @remarks\n     * Resets the current health value of the entity to its default\n     * value.\n     * @throws This function can throw errors.\n     */\n    resetToDefaultValue(): void;\n    /**\n     * @remarks\n     * Resets the current health of the entity to its maximum\n     * value.\n     * @throws This function can throw errors.\n     */\n    resetToMaxValue(): void;\n    /**\n     * @remarks\n     * Resets the current health to the minimum value.\n     * @throws This function can throw errors.\n     */\n    resetToMinValue(): void;\n    /**\n     * @remarks\n     * Sets the current health of the entity.\n     * @param value\n     * @throws This function can throw errors.\n     */\n    setCurrent(value: number): void;\n    protected constructor();\n}\n/**\n * Contains information related to an entity hitting (melee\n * attacking) another entity.\n */\ndeclare class EntityHitEvent {\n    /**\n     * Entity that made a hit/melee attack.\n     */\n    readonly 'entity': Entity;\n    /**\n     * Block that was hit by the attack, or undefined if the hit\n     * attack did not hit a block. If both hitEntity and hitBlock\n     * are undefined, then the entity basically swiped into the\n     * air.\n     */\n    readonly 'hitBlock': Block;\n    /**\n     * Entity that was hit by the attack, or undefined if the hit\n     * attack did not hit an entity. If both hitEntity and hitBlock\n     * are undefined, then the entity basically swiped into the\n     * air.\n     */\n    readonly 'hitEntity': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when an entity makes\n * a melee attack on another entity.\n */\ndeclare class EntityHitEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an entity hits\n     * another entity.\n     * @param callback\n     * @param options\n     */\n    subscribe(callback: (arg: EntityHitEvent) => void, options?: EntityEventOptions): (arg: EntityHitEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an entity makes a\n     * melee attack on another entity.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: EntityHitEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains additional information about an entity that was\n * hit.\n */\ndeclare class EntityHitInformation {\n    /**\n     * Entity that was hit.\n     */\n    readonly 'entity': Entity;\n    protected constructor();\n}\n/**\n * Contains information related to an entity hitting (melee\n * attacking) another entity.\n */\ndeclare class EntityHurtEvent {\n    /**\n     * A summary of the reason that damage was caused.\n     */\n    readonly 'cause': string;\n    /**\n     * Describes the amount of damage caused.\n     */\n    readonly 'damage': number;\n    /**\n     * Optional entity that caused the damaging attack, or\n     * undefined if the hurt reason was not because of another\n     * entity.\n     */\n    readonly 'damagingEntity': Entity;\n    /**\n     * Entity that was hurt.\n     */\n    readonly 'hurtEntity': Entity;\n    /**\n     * Optional entity for a projectile that potentially hurt an\n     * entity.\n     */\n    readonly 'projectile': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when an entity is\n * hurt.\n */\ndeclare class EntityHurtEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an entity is hurt.\n     * @param callback\n     * @param options\n     */\n    subscribe(callback: (arg: EntityHurtEvent) => void, options?: EntityEventOptions): (arg: EntityHurtEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an entity is hurt.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: EntityHurtEvent) => void): void;\n    protected constructor();\n}\n/**\n * Defines this entity's inventory properties.\n */\ndeclare class EntityInventoryComponent extends IEntityComponent {\n    /**\n     * Number of slots that this entity can gain per extra\n     * strength.\n     * @throws This property can throw when used.\n     */\n    readonly 'additionalSlotsPerStrength': number;\n    /**\n     * If true, the contents of this inventory can be removed by a\n     * hopper.\n     * @throws This property can throw when used.\n     */\n    readonly 'canBeSiphonedFrom': boolean;\n    /**\n     * Defines the interactions with this entity for healing it.\n     * @throws This property can throw when used.\n     */\n    readonly 'container': InventoryComponentContainer;\n    /**\n     * Type of container this entity has.\n     * @throws This property can throw when used.\n     */\n    readonly 'containerType': string;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:healable.\n     */\n    readonly 'id': string;\n    /**\n     * Number of slots the container has.\n     * @throws This property can throw when used.\n     */\n    readonly 'inventorySize': number;\n    /**\n     * If true, the entity will not drop it's inventory on death.\n     * @throws This property can throw when used.\n     */\n    readonly 'private': boolean;\n    /**\n     * If true, the entity's inventory can only be accessed by its\n     * owner or itself.\n     * @throws This property can throw when used.\n     */\n    readonly 'restrictToOwner': boolean;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is a\n * baby.\n */\ndeclare class EntityIsBabyComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_baby.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is\n * charged.\n */\ndeclare class EntityIsChargedComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_charged.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is\n * currently carrying a chest.\n */\ndeclare class EntityIsChestedComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_chested.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that dyes can be used\n * on this entity to change its color.\n */\ndeclare class EntityIsDyableComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_dyeable.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity can\n * hide from hostile mobs while invisible.\n */\ndeclare class EntityIsHiddenWhenInvisibleComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_hidden_when_invisible.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity this\n * currently on fire.\n */\ndeclare class EntityIsIgnitedComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_ignited.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is an\n * illager captain.\n */\ndeclare class EntityIsIllagerCaptainComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_illager_captain.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is\n * currently saddled.\n */\ndeclare class EntityIsSaddledComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_saddled.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is\n * currently shaking.\n */\ndeclare class EntityIsShakingComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_shaking.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is\n * currently sheared.\n */\ndeclare class EntityIsShearedComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_sheared.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity can be\n * stacked.\n */\ndeclare class EntityIsStackableComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_stackable.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is\n * currently stunned.\n */\ndeclare class EntityIsStunnedComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_stunned.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity is\n * currently tamed.\n */\ndeclare class EntityIsTamedComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:is_tamed.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * If added onto the entity, this indicates that the entity\n * represents a free-floating item in the world. Lets you\n * retrieve the actual item stack contents via the itemStack\n * property.\n */\ndeclare class EntityItemComponent {\n    /**\n     * Item stack represented by this entity in the world.\n     * @throws This property can throw when used.\n     */\n    readonly 'itemStack': ItemStack;\n    protected constructor();\n}\n/**\n * This type is usable for iterating over a set of entities.\n * This means it can be used in statements like for...of\n * statements, Array.from(iterator), and more.\n */\ndeclare class EntityIterator implements Iterable<Entity> {\n    [Symbol.iterator](): Iterator<Entity>;\n    /**\n     * @remarks\n     * Retrieves the next item in this iteration. The resulting\n     * IteratorResult contains .done and .value properties which\n     * can be used to see the next Entity in the iteration.\n     */\n    next(): IteratorResult<Entity>;\n    protected constructor();\n}\n/**\n * Defines the base movement speed in lava of this entity.\n */\ndeclare class EntityLavaMovementComponent extends IEntityComponent {\n    /**\n     * Read-only. Returns the current value of movement speed on\n     * lava for the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'current': number;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:lava_movement.\n     */\n    readonly 'id': string;\n    /**\n     * Value for movement speed on lava as defined through entity\n     * components.\n     * @throws This property can throw when used.\n     */\n    readonly 'value': number;\n    /**\n     * @remarks\n     * Resets the current movement speed on lava for the entity to\n     * its default value.\n     * @throws This function can throw errors.\n     */\n    resetToDefaultValue(): void;\n    /**\n     * @remarks\n     * Resets the movement speed on lava to the maximum value for\n     * the entity.\n     * @throws This function can throw errors.\n     */\n    resetToMaxValue(): void;\n    /**\n     * @remarks\n     * Resets the movement speed on lava speed to the minimum\n     * value.\n     * @throws This function can throw errors.\n     */\n    resetToMinValue(): void;\n    /**\n     * @remarks\n     * Sets the current value of movement speed on lava for the\n     * entity.\n     * @param value\n     * @throws This function can throw errors.\n     */\n    setCurrent(value: number): void;\n    protected constructor();\n}\n/**\n * Allows this entity to be leashed and defines the conditions\n * and events for this entity when is leashed.\n */\ndeclare class EntityLeashableComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:leashable.\n     */\n    readonly 'id': string;\n    /**\n     * Distance in blocks at which the 'spring' effect starts\n     * acting to keep this entity close to the entity that leashed\n     * it.\n     * @throws This property can throw when used.\n     */\n    readonly 'softDistance': number;\n    /**\n     * @remarks\n     * Leashes this entity to another entity.\n     * @param leashHolder\n     * The entity to leash this entity to.\n     * @throws This function can throw errors.\n     */\n    leash(leashHolder: Entity): void;\n    /**\n     * @remarks\n     * Unleashes this entity if it is leashed to another entity.\n     * @throws This function can throw errors.\n     */\n    unleash(): void;\n    protected constructor();\n}\n/**\n * Additional variant value. Can be used to further\n * differentiate variants.\n */\ndeclare class EntityMarkVariantComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:mark_variant.\n     */\n    readonly 'id': string;\n    /**\n     * The identifier of the variant. By convention, 0 is the\n     * identifier of the base entity.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Contains options for taming a rideable entity based on the\n * entity that mounts it.\n */\ndeclare class EntityMountTamingComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:mount_taming.\n     */\n    readonly 'id': string;\n    /**\n     * @remarks\n     * Sets this rideable entity as tamed.\n     * @param showParticles\n     * Whether to show effect particles when this entity is tamed.\n     * @throws This function can throw errors.\n     */\n    setTamed(showParticles: boolean): void;\n    protected constructor();\n}\n/**\n * When added, this movement control allows the mob to swim in\n * water and walk on land.\n */\ndeclare class EntityMovementAmphibiousComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.amphibious.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    protected constructor();\n}\n/**\n * This component accents the movement of an entity.\n */\ndeclare class EntityMovementBasicComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.basic.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    protected constructor();\n}\n/**\n * Defines the general movement speed of this entity.\n */\ndeclare class EntityMovementComponent extends IEntityComponent {\n    /**\n     * Read-only. Returns the current value of default movement\n     * speed for the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'current': number;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.\n     */\n    readonly 'id': string;\n    /**\n     * Value for default movement speed as defined through entity\n     * components.\n     * @throws This property can throw when used.\n     */\n    readonly 'value': number;\n    /**\n     * @remarks\n     * Resets the current default movement speed value for the\n     * entity to the default value.\n     * @throws This function can throw errors.\n     */\n    resetToDefaultValue(): void;\n    /**\n     * @remarks\n     * Resets the default movement speed to the maximum value for\n     * the entity.\n     * @throws This function can throw errors.\n     */\n    resetToMaxValue(): void;\n    /**\n     * @remarks\n     * Resets the default movement speed to the minimum value.\n     * @throws This function can throw errors.\n     */\n    resetToMinValue(): void;\n    /**\n     * @remarks\n     * Sets the current value of default movement speed for the\n     * entity.\n     * @param value\n     * @throws This function can throw errors.\n     */\n    setCurrent(value: number): void;\n    protected constructor();\n}\n/**\n * When added, this move control causes the mob to fly.\n */\ndeclare class EntityMovementFlyComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.fly.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    protected constructor();\n}\n/**\n * When added, this move control allows a mob to fly, swim,\n * climb, etc.\n */\ndeclare class EntityMovementGenericComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.generic.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    protected constructor();\n}\n/**\n * When added, this movement control allows the mob to glide.\n */\ndeclare class EntityMovementGlideComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.glide.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    /**\n     * Speed in effect when the entity is turning.\n     * @throws This property can throw when used.\n     */\n    readonly 'speedWhenTurning': number;\n    /**\n     * Start speed during a glide.\n     * @throws This property can throw when used.\n     */\n    readonly 'startSpeed': number;\n    protected constructor();\n}\n/**\n * When added, this move control causes the mob to hover.\n */\ndeclare class EntityMovementHoverComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.hover.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    protected constructor();\n}\n/**\n * Move control that causes the mob to jump as it moves with a\n * specified delay between jumps.\n */\ndeclare class EntityMovementJumpComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.jump.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    protected constructor();\n}\n/**\n * When added, this move control causes the mob to hop as it\n * moves.\n */\ndeclare class EntityMovementSkipComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.skip.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    protected constructor();\n}\n/**\n * When added, this move control causes the mob to sway side to\n * side giving the impression it is swimming.\n */\ndeclare class EntityMovementSwayComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:movement.sway.\n     */\n    readonly 'id': string;\n    /**\n     * The maximum number in degrees the mob can turn per tick.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxTurn': number;\n    /**\n     * Amplitude of the sway motion.\n     * @throws This property can throw when used.\n     */\n    readonly 'swayAmplitude': number;\n    /**\n     * Amount of sway frequency.\n     * @throws This property can throw when used.\n     */\n    readonly 'swayFrequency': number;\n    protected constructor();\n}\n/**\n * Allows this entity to generate paths that include vertical\n * walls (for example, like Minecraft spiders do.)\n */\ndeclare class EntityNavigationClimbComponent extends IEntityComponent {\n    /**\n     * Tells the pathfinder to avoid blocks that cause damage when\n     * finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidDamageBlocks': boolean;\n    /**\n     * Tells the pathfinder to avoid portals (like nether portals)\n     * when finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidPortals': boolean;\n    /**\n     * Whether or not the pathfinder should avoid tiles that are\n     * exposed to the sun when creating paths.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidSun': boolean;\n    /**\n     * Tells the pathfinder to avoid water when creating a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump out of water\n     * (like a dolphin).\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreach': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * and break it.\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreakDoors': boolean;\n    /**\n     * Tells the pathfinder whether or not it can float.\n     * @throws This property can throw when used.\n     */\n    readonly 'canFloat': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump up blocks.\n     * @throws This property can throw when used.\n     */\n    readonly 'canJump': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenDoors': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed iron\n     * door assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenIronDoors': boolean;\n    /**\n     * Whether a path can be created through a door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPassDoors': boolean;\n    /**\n     * Tells the pathfinder that it can start pathing when in the\n     * air.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathFromAir': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the lava.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverLava': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it will be pulled down\n     * by gravity while in water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSink': boolean;\n    /**\n     * Tells the pathfinder whether or not it can path anywhere\n     * through water and plays swimming animation along that path.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSwim': boolean;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground outside water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalk': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel in lava\n     * like walking on ground.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalkInLava': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:navigation.climb.\n     */\n    readonly 'id': string;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground or go underwater.\n     * @throws This property can throw when used.\n     */\n    readonly 'isAmphibious': boolean;\n    protected constructor();\n}\n/**\n * Allows this entity to generate paths by flying around the\n * air like the regular Ghast.\n */\ndeclare class EntityNavigationFloatComponent extends IEntityComponent {\n    /**\n     * Tells the pathfinder to avoid blocks that cause damage when\n     * finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidDamageBlocks': boolean;\n    /**\n     * Tells the pathfinder to avoid portals (like nether portals)\n     * when finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidPortals': boolean;\n    /**\n     * Whether or not the pathfinder should avoid tiles that are\n     * exposed to the sun when creating paths.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidSun': boolean;\n    /**\n     * Tells the pathfinder to avoid water when creating a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump out of water\n     * (like a dolphin).\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreach': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * and break it.\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreakDoors': boolean;\n    /**\n     * Tells the pathfinder whether or not it can float.\n     * @throws This property can throw when used.\n     */\n    readonly 'canFloat': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump up blocks.\n     * @throws This property can throw when used.\n     */\n    readonly 'canJump': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenDoors': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed iron\n     * door assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenIronDoors': boolean;\n    /**\n     * Whether a path can be created through a door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPassDoors': boolean;\n    /**\n     * Tells the pathfinder that it can start pathing when in the\n     * air.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathFromAir': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the lava.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverLava': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it will be pulled down\n     * by gravity while in water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSink': boolean;\n    /**\n     * Tells the pathfinder whether or not it can path anywhere\n     * through water and plays swimming animation along that path.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSwim': boolean;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground outside water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalk': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel in lava\n     * like walking on ground.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalkInLava': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:navigation.float.\n     */\n    readonly 'id': string;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground or go underwater.\n     * @throws This property can throw when used.\n     */\n    readonly 'isAmphibious': boolean;\n    protected constructor();\n}\n/**\n * Allows this entity to generate paths in the air (for\n * example, like Minecraft parrots do.)\n */\ndeclare class EntityNavigationFlyComponent extends IEntityComponent {\n    /**\n     * Tells the pathfinder to avoid blocks that cause damage when\n     * finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidDamageBlocks': boolean;\n    /**\n     * Tells the pathfinder to avoid portals (like nether portals)\n     * when finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidPortals': boolean;\n    /**\n     * Whether or not the pathfinder should avoid tiles that are\n     * exposed to the sun when creating paths.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidSun': boolean;\n    /**\n     * Tells the pathfinder to avoid water when creating a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump out of water\n     * (like a dolphin).\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreach': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * and break it.\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreakDoors': boolean;\n    /**\n     * Tells the pathfinder whether or not it can float.\n     * @throws This property can throw when used.\n     */\n    readonly 'canFloat': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump up blocks.\n     * @throws This property can throw when used.\n     */\n    readonly 'canJump': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenDoors': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed iron\n     * door assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenIronDoors': boolean;\n    /**\n     * Whether a path can be created through a door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPassDoors': boolean;\n    /**\n     * Tells the pathfinder that it can start pathing when in the\n     * air.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathFromAir': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the lava.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverLava': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it will be pulled down\n     * by gravity while in water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSink': boolean;\n    /**\n     * Tells the pathfinder whether or not it can path anywhere\n     * through water and plays swimming animation along that path.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSwim': boolean;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground outside water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalk': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel in lava\n     * like walking on ground.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalkInLava': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:navigation.fly.\n     */\n    readonly 'id': string;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground or go underwater.\n     * @throws This property can throw when used.\n     */\n    readonly 'isAmphibious': boolean;\n    protected constructor();\n}\n/**\n * Allows this entity to generate paths by walking, swimming,\n * flying and/or climbing around and jumping up and down a\n * block.\n */\ndeclare class EntityNavigationGenericComponent extends IEntityComponent {\n    /**\n     * Tells the pathfinder to avoid blocks that cause damage when\n     * finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidDamageBlocks': boolean;\n    /**\n     * Tells the pathfinder to avoid portals (like nether portals)\n     * when finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidPortals': boolean;\n    /**\n     * Whether or not the pathfinder should avoid tiles that are\n     * exposed to the sun when creating paths.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidSun': boolean;\n    /**\n     * Tells the pathfinder to avoid water when creating a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump out of water\n     * (like a dolphin).\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreach': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * and break it.\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreakDoors': boolean;\n    /**\n     * Tells the pathfinder whether or not it can float.\n     * @throws This property can throw when used.\n     */\n    readonly 'canFloat': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump up blocks.\n     * @throws This property can throw when used.\n     */\n    readonly 'canJump': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenDoors': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed iron\n     * door assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenIronDoors': boolean;\n    /**\n     * Whether a path can be created through a door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPassDoors': boolean;\n    /**\n     * Tells the pathfinder that it can start pathing when in the\n     * air.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathFromAir': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the lava.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverLava': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it will be pulled down\n     * by gravity while in water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSink': boolean;\n    /**\n     * Tells the pathfinder whether or not it can path anywhere\n     * through water and plays swimming animation along that path.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSwim': boolean;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground outside water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalk': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel in lava\n     * like walking on ground.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalkInLava': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:navigation.generic.\n     */\n    readonly 'id': string;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground or go underwater.\n     * @throws This property can throw when used.\n     */\n    readonly 'isAmphibious': boolean;\n    protected constructor();\n}\n/**\n * Allows this entity to generate paths in the air (for\n * example, like the Minecraft Bees do.) Keeps them from\n * falling out of the skies and doing predictive movement.\n */\ndeclare class EntityNavigationHoverComponent extends IEntityComponent {\n    /**\n     * Tells the pathfinder to avoid blocks that cause damage when\n     * finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidDamageBlocks': boolean;\n    /**\n     * Tells the pathfinder to avoid portals (like nether portals)\n     * when finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidPortals': boolean;\n    /**\n     * Whether or not the pathfinder should avoid tiles that are\n     * exposed to the sun when creating paths.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidSun': boolean;\n    /**\n     * Tells the pathfinder to avoid water when creating a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump out of water\n     * (like a dolphin).\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreach': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * and break it.\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreakDoors': boolean;\n    /**\n     * Tells the pathfinder whether or not it can float.\n     * @throws This property can throw when used.\n     */\n    readonly 'canFloat': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump up blocks.\n     * @throws This property can throw when used.\n     */\n    readonly 'canJump': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenDoors': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed iron\n     * door assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenIronDoors': boolean;\n    /**\n     * Whether a path can be created through a door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPassDoors': boolean;\n    /**\n     * Tells the pathfinder that it can start pathing when in the\n     * air.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathFromAir': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the lava.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverLava': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it will be pulled down\n     * by gravity while in water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSink': boolean;\n    /**\n     * Tells the pathfinder whether or not it can path anywhere\n     * through water and plays swimming animation along that path.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSwim': boolean;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground outside water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalk': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel in lava\n     * like walking on ground.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalkInLava': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:navigation.hover.\n     */\n    readonly 'id': string;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground or go underwater.\n     * @throws This property can throw when used.\n     */\n    readonly 'isAmphibious': boolean;\n    protected constructor();\n}\n/**\n * Allows this entity to generate paths by walking around and\n * jumping up and down a block like regular mobs.\n */\ndeclare class EntityNavigationWalkComponent extends IEntityComponent {\n    /**\n     * Tells the pathfinder to avoid blocks that cause damage when\n     * finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidDamageBlocks': boolean;\n    /**\n     * Tells the pathfinder to avoid portals (like nether portals)\n     * when finding a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidPortals': boolean;\n    /**\n     * Whether or not the pathfinder should avoid tiles that are\n     * exposed to the sun when creating paths.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidSun': boolean;\n    /**\n     * Tells the pathfinder to avoid water when creating a path.\n     * @throws This property can throw when used.\n     */\n    readonly 'avoidWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump out of water\n     * (like a dolphin).\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreach': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * and break it.\n     * @throws This property can throw when used.\n     */\n    readonly 'canBreakDoors': boolean;\n    /**\n     * Tells the pathfinder whether or not it can float.\n     * @throws This property can throw when used.\n     */\n    readonly 'canFloat': boolean;\n    /**\n     * Tells the pathfinder whether or not it can jump up blocks.\n     * @throws This property can throw when used.\n     */\n    readonly 'canJump': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed door\n     * assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenDoors': boolean;\n    /**\n     * Tells the pathfinder that it can path through a closed iron\n     * door assuming the AI will open the door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canOpenIronDoors': boolean;\n    /**\n     * Whether a path can be created through a door.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPassDoors': boolean;\n    /**\n     * Tells the pathfinder that it can start pathing when in the\n     * air.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathFromAir': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the lava.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverLava': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel on the\n     * surface of the water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canPathOverWater': boolean;\n    /**\n     * Tells the pathfinder whether or not it will be pulled down\n     * by gravity while in water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSink': boolean;\n    /**\n     * Tells the pathfinder whether or not it can path anywhere\n     * through water and plays swimming animation along that path.\n     * @throws This property can throw when used.\n     */\n    readonly 'canSwim': boolean;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground outside water.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalk': boolean;\n    /**\n     * Tells the pathfinder whether or not it can travel in lava\n     * like walking on ground.\n     * @throws This property can throw when used.\n     */\n    readonly 'canWalkInLava': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:navigation.swim.\n     */\n    readonly 'id': string;\n    /**\n     * Tells the pathfinder whether or not it can walk on the\n     * ground or go underwater.\n     * @throws This property can throw when used.\n     */\n    readonly 'isAmphibious': boolean;\n    protected constructor();\n}\n/**\n * Sets the distance through which the entity can push through.\n */\ndeclare class EntityPushThroughComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:push_through.\n     */\n    readonly 'id': string;\n    /**\n     * The value of the entity's push-through, in blocks.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Contains options for selecting entities within an area.\n */\ndeclare class EntityQueryOptions {\n    /**\n     * Limits the number of entities to return, opting for the\n     * closest N entities as specified by this property. The\n     * location value must also be specified on the query options\n     * object.\n     */\n    'closest': number;\n    /**\n     * Excludes entities that match one or more of the specified\n     * families.\n     */\n    'excludeFamilies': string[];\n    /**\n     * Excludes entities if have a specific gamemode that matches\n     * the specified gamemode.\n     */\n    'excludeGameModes': GameMode[];\n    /**\n     * Excludes entities that have a name that match one of the\n     * specified values.\n     */\n    'excludeNames': string[];\n    /**\n     * Excludes entities with a tag that matches one of the\n     * specified values.\n     */\n    'excludeTags': string[];\n    /**\n     * Excludes entities if they are one of the specified types.\n     */\n    'excludeTypes': string[];\n    /**\n     * If specified, includes entities that match all of the\n     * specified families.\n     */\n    'families': string[];\n    /**\n     * Limits the number of entities to return, opting for the\n     * farthest N entities as specified by this property. The\n     * location value must also be specified on the query options\n     * object.\n     */\n    'farthest': number;\n    /**\n     * If specified, includes entities with a gamemode that matches\n     * the specified gamemode.\n     */\n    'gameMode': GameMode;\n    /**\n     * Adds a seed location to the query that is used in\n     * conjunction with closest, farthest, limit, volume, and\n     * distance properties.\n     */\n    'location': Location;\n    /**\n     * If specified, includes entities that are less than this\n     * distance away from the location specified in the location\n     * property.\n     */\n    'maxDistance': number;\n    /**\n     * If specified, will only include entities that have at most\n     * this horizontal rotation.\n     */\n    'maxHorizontalRotation': number;\n    /**\n     * If defined, only players that have at most this level are\n     * returned.\n     */\n    'maxLevel': number;\n    /**\n     * If specified, only entities that have at most this vertical\n     * rotation are returned.\n     */\n    'maxVerticalRotation': number;\n    /**\n     * If specified, includes entities that are least this distance\n     * away from the location specified in the location property.\n     */\n    'minDistance': number;\n    /**\n     * If specified, will only include entities that have at a\n     * minimum this horizontal rotation.\n     */\n    'minHorizontalRotation': number;\n    /**\n     * If defined, only players that have at least this level are\n     * returned.\n     */\n    'minLevel': number;\n    /**\n     * If specified, will only include entities that have at least\n     * this vertical rotation.\n     */\n    'minVerticalRotation': number;\n    /**\n     * Includes entities with the specified name.\n     */\n    'name': string;\n    /**\n     * Gets/sets a collection of EntityQueryScoreOptions objects\n     * with filters for specific scoreboard objectives.\n     */\n    'scoreOptions': EntityQueryScoreOptions[];\n    /**\n     * Includes entities that match all of the specified tags.\n     */\n    'tags': string[];\n    /**\n     * If defined, entities that match this type are included.\n     */\n    'type': string;\n    /**\n     * In conjunction with location, specified a cuboid volume of\n     * entities to include.\n     */\n    'volume': BlockAreaSize;\n}\n/**\n * Contains additional options for filtering players based on\n * their score for an objective.\n */\ndeclare class EntityQueryScoreOptions {\n    /**\n     * If set to true, entities and players within this score range\n     * are excluded from query results.\n     */\n    'exclude': boolean;\n    /**\n     * If defined, only players that have a score equal to or under\n     * maxScore are included.\n     */\n    'maxScore': number;\n    /**\n     * If defined, only players that have a score equal to or over\n     * minScore are included.\n     */\n    'minScore': number;\n    /**\n     * Identifier of the scoreboard objective to filter on.\n     */\n    'objective': string;\n}\n/**\n * Contains additional options for an entity raycast operation.\n */\ndeclare class EntityRaycastOptions {\n    /**\n     * Maximum distance, in blocks, to process the raycast.\n     */\n    'maxDistance': number;\n}\n/**\n * When added, this component adds the capability that an\n * entity can be ridden by another entity.\n */\ndeclare class EntityRideableComponent extends IEntityComponent {\n    /**\n     * Zero-based index of the seat that can used to control this\n     * entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'controllingSeat': number;\n    /**\n     * Determines whether interactions are not supported if the\n     * entity is crouching.\n     * @throws This property can throw when used.\n     */\n    readonly 'crouchingSkipInteract': boolean;\n    /**\n     * A string-list of entity types that this entity can support\n     * as riders.\n     * @throws This property can throw when used.\n     */\n    readonly 'familyTypes': string[];\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:rideable.\n     */\n    readonly 'id': string;\n    /**\n     * Set of text that should be displayed when a player is\n     * looking to ride on this entity (commonly with touch-screen\n     * controls).\n     * @throws This property can throw when used.\n     */\n    readonly 'interactText': string;\n    /**\n     * If true, this entity will pull in entities that are in the\n     * correct family_types into any available seat.\n     * @throws This property can throw when used.\n     */\n    readonly 'pullInEntities': boolean;\n    /**\n     * If true, this entity will be picked when looked at by the\n     * rider.\n     * @throws This property can throw when used.\n     */\n    readonly 'riderCanInteract': boolean;\n    /**\n     * Number of seats for riders defined for this entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'seatCount': number;\n    /**\n     * The list of positions and number of riders for each position\n     * for entities riding this entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'seats': Seat[];\n    /**\n     * @remarks\n     * Adds an entity to this entity as a rider.\n     * @param rider\n     * Entity that will become the rider of this entity.\n     * @returns\n     * True if the rider entity was successfully added.\n     * @throws This function can throw errors.\n     */\n    addRider(rider: Entity): boolean;\n    /**\n     * @remarks\n     * Ejects the specified rider of this entity.\n     * @param rider\n     * Entity that should be ejected from this entity.\n     * @throws This function can throw errors.\n     */\n    ejectRider(rider: Entity): void;\n    /**\n     * @remarks\n     * Ejects all riders of this entity.\n     * @throws This function can throw errors.\n     */\n    ejectRiders(): void;\n    protected constructor();\n}\n/**\n * Sets the entity's visual size.\n */\ndeclare class EntityScaleComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:scale.\n     */\n    readonly 'id': string;\n    /**\n     * The value of the scale. 1.0 means the entity will appear at\n     * the scale they are defined in their model. Higher numbers\n     * make the entity bigger.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Skin Id value. Can be used to differentiate skins, such as\n * base skins for villagers.\n */\ndeclare class EntitySkinIdComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:skin_id.\n     */\n    readonly 'id': string;\n    /**\n     * The identifier of the skin. By convention, 0 is the\n     * identifier of the base skin.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Defines the entity's strength to carry items.\n */\ndeclare class EntityStrengthComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:strength.\n     */\n    readonly 'id': string;\n    /**\n     * Maximum strength of this entity, as defined in the entity\n     * type definition.\n     * @throws This property can throw when used.\n     */\n    readonly 'max': number;\n    /**\n     * Current strength value of this entity, after any effects or\n     * component updates are applied.\n     * @throws This property can throw when used.\n     */\n    readonly 'value': number;\n    protected constructor();\n}\n/**\n * Defines the rules for a mob to be tamed by the player.\n */\ndeclare class EntityTameableComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:tameable.\n     */\n    readonly 'id': string;\n    /**\n     * The chance of taming the entity with each item use between\n     * 0.0 and 1.0, where 1.0 is 100%\n     * @throws This property can throw when used.\n     */\n    readonly 'probability': number;\n    /**\n     * Event to run when this entity becomes tamed.\n     * @throws This property can throw when used.\n     */\n    readonly 'tameEvent': Trigger;\n    /**\n     * The list of items that can be used to tame this entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'tameItems': string[];\n    /**\n     * @remarks\n     * Tames this entity.\n     * @returns\n     * Returns true if the entity was tamed.\n     * @throws This function can throw errors.\n     */\n    tame(): boolean;\n    protected constructor();\n}\n/**\n * Represents information about a type of entity.\n */\ndeclare class EntityType {\n    /**\n     * Identifier of this entity type - for example,\n     * 'minecraft:skeleton'.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\ndeclare class EntityTypeIterator implements Iterable<EntityType> {\n    [Symbol.iterator](): Iterator<EntityType>;\n    next(): IteratorResult<EntityType>;\n    protected constructor();\n}\n/**\n * Used for accessing all entity types currently available for\n * use within the world.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class EntityTypes {\n    /**\n     * @remarks\n     * Retrieves an entity type using a string-based identifier.\n     * @param identifier\n     */\n    static get(identifier: string): EntityType;\n    /**\n     * @remarks\n     * Retrieves an iterator of all entity types within this world.\n     */\n    static getAll(): EntityTypeIterator;\n    protected constructor();\n}\n/**\n * Defines the general movement speed underwater of this\n * entity.\n */\ndeclare class EntityUnderwaterMovementComponent extends IEntityComponent {\n    /**\n     * Read-only. Returns the current value of movement speed\n     * underwater for the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'current': number;\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:underwater_movement.\n     */\n    readonly 'id': string;\n    /**\n     * Value for movement speed underwater as defined through\n     * entity components.\n     * @throws This property can throw when used.\n     */\n    readonly 'value': number;\n    /**\n     * @remarks\n     * Resets the current movement speed underwater for the entity\n     * to the default value implied by the current component state\n     * of the entity.\n     * @throws This function can throw errors.\n     */\n    resetToDefaultValue(): void;\n    /**\n     * @remarks\n     * Resets the movement speed underwater to the maximum value\n     * for the entity, as determined by the set of components that\n     * are on the entity.\n     * @throws This function can throw errors.\n     */\n    resetToMaxValue(): void;\n    /**\n     * @remarks\n     * Resets the movement speed underwater to the minimum value as\n     * defined by the component state of this entity.\n     * @throws This function can throw errors.\n     */\n    resetToMinValue(): void;\n    /**\n     * @remarks\n     * Sets the current value of movement speed underwater for the\n     * entity.\n     * @param value\n     * @throws This function can throw errors.\n     */\n    setCurrent(value: number): void;\n    protected constructor();\n}\n/**\n * Used to differentiate the component group of a variant of an\n * entity from others. (e.g. ocelot, villager).\n */\ndeclare class EntityVariantComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:variant.\n     */\n    readonly 'id': string;\n    /**\n     * The identifier of the variant. By convention, 0 is the\n     * identifier of the base entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'value': number;\n    protected constructor();\n}\n/**\n * When added, this component signifies that this entity wants\n * to become a jockey.\n */\ndeclare class EntityWantsJockeyComponent extends IEntityComponent {\n    /**\n     * Identifier of this component. Should always be\n     * minecraft:wants_jockey.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * Contains a set of events that are available across the scope\n * of the World.\n */\ndeclare class Events {\n    /**\n     * This event fires before a chat message is broadcast or\n     * delivered. The event can be canceled, and the message can\n     * also be updated.\n     */\n    readonly 'beforeChat': BeforeChatEventSignal;\n    /**\n     * This event is fired before the triggering of an entity event\n     * that updates the component definition state of an entity.\n     * Within this event, you can cancel or shape the impacted\n     * components and event triggers.\n     */\n    readonly 'beforeDataDrivenEntityTriggerEvent': BeforeDataDrivenEntityTriggerEventSignal;\n    /**\n     * This event is fired before an explosion occurs.\n     */\n    readonly 'beforeExplosion': BeforeExplosionEventSignal;\n    /**\n     * For custom items, this event is triggered before the set of\n     * defined components for the item change in response to a\n     * triggered event. Note that this event is only fired for\n     * custom data-driven items.\n     */\n    readonly 'beforeItemDefinitionEvent': BeforeItemDefinitionEventSignal;\n    /**\n     * This event fires before an item is used by an entity or\n     * player.\n     */\n    readonly 'beforeItemUse': BeforeItemUseEventSignal;\n    /**\n     * This event fires before an item is used on a block by an\n     * entity or player.\n     */\n    readonly 'beforeItemUseOn': BeforeItemUseOnEventSignal;\n    /**\n     * Fires before a piston is activated.\n     */\n    readonly 'beforePistonActivate': BeforePistonActivateEventSignal;\n    /**\n     * This event fires for a block that is broken by a player.\n     */\n    readonly 'blockBreak': BlockBreakEventSignal;\n    /**\n     * This event fires for each BlockLocation destroyed by an\n     * explosion. It is fired after the blocks have already been\n     * destroyed.\n     */\n    readonly 'blockExplode': BlockExplodeEventSignal;\n    /**\n     * This event fires for a block that is placed by a player.\n     */\n    readonly 'blockPlace': BlockPlaceEventSignal;\n    /**\n     * This event fires when a button is pushed.\n     */\n    readonly 'buttonPush': ButtonPushEventSignal;\n    /**\n     * This event is triggered after a chat message has been\n     * broadcast or sent to players.\n     */\n    readonly 'chat': ChatEventSignal;\n    /**\n     * This event is fired when an entity event has been triggered\n     * that will update the component definition state of an\n     * entity.\n     */\n    readonly 'dataDrivenEntityTriggerEvent': DataDrivenEntityTriggerEventSignal;\n    /**\n     * This event fires when an effect, like poisoning, is added to\n     * an entity.\n     */\n    readonly 'effectAdd': EffectAddEventSignal;\n    /**\n     * This event fires when a new entity is created.\n     */\n    readonly 'entityCreate': EntityCreateEventSignal;\n    /**\n     * This event fires when an entity hits (makes a melee attack)\n     * and potentially impacts another entity or block.\n     */\n    readonly 'entityHit': EntityHitEventSignal;\n    /**\n     * This event fires when an entity is hurt (takes damage).\n     */\n    readonly 'entityHurt': EntityHurtEventSignal;\n    /**\n     * This event is fired after an explosion occurs.\n     */\n    readonly 'explosion': ExplosionEventSignal;\n    /**\n     * This event fires when a chargeable item completes charging.\n     */\n    readonly 'itemCompleteCharge': ItemCompleteChargeEventSignal;\n    /**\n     * For custom items, this event is triggered when the\n     * fundamental set of defined components for the item change.\n     * Note that this event is only fired for custom data-driven\n     * items.\n     */\n    readonly 'itemDefinitionEvent': ItemDefinitionEventSignal;\n    /**\n     * This event fires when a chargeable item is released from\n     * charging.\n     */\n    readonly 'itemReleaseCharge': ItemReleaseChargeEventSignal;\n    /**\n     * This event fires when a chargeable item starts charging.\n     */\n    readonly 'itemStartCharge': ItemStartChargeEventSignal;\n    /**\n     * This event fires when any particular item is starting to be\n     * used by an entity or player.\n     */\n    readonly 'itemStartUseOn': ItemStartUseOnEventSignal;\n    /**\n     * This event fires when a chargeable item stops charging.\n     */\n    readonly 'itemStopCharge': ItemStopChargeEventSignal;\n    /**\n     * This event fires when any particular item is ending being\n     * used by an entity or player.\n     */\n    readonly 'itemStopUseOn': ItemStopUseOnEventSignal;\n    /**\n     * This event fires when any particular item is used by an\n     * entity or player.\n     */\n    readonly 'itemUse': ItemUseEventSignal;\n    /**\n     * This event fires when any particular item is used on a block\n     * by an entity or player.\n     */\n    readonly 'itemUseOn': ItemUseOnEventSignal;\n    /**\n     * This event fires when a lever activates or is deactivated.\n     */\n    readonly 'leverActivate': LeverActionEventSignal;\n    /**\n     * This event fires when a piston expands or retracts.\n     */\n    readonly 'pistonActivate': PistonActivateEventSignal;\n    /**\n     * This event fires when a player joins a world.\n     */\n    readonly 'playerJoin': PlayerJoinEventSignal;\n    /**\n     * This event fires when a player leaves a world.\n     */\n    readonly 'playerLeave': PlayerLeaveEventSignal;\n    /**\n     * This event fires when a projectile hits an entity or block.\n     */\n    'projectileHit': ProjectileHitEventSignal;\n    /**\n     * This event fires every tick - which is 20 times per second.\n     */\n    readonly 'tick': TickEventSignal;\n    /**\n     * This event will be triggered when the weather changes within\n     * Minecraft.\n     */\n    readonly 'weatherChange': WeatherChangeEventSignal;\n    /**\n     * This event fires when the script environment is initialized\n     * on a World. In addition, you can register dynamic properties\n     * within the scope of a world Initialize event.\n     */\n    readonly 'worldInitialize': WorldInitializeEventSignal;\n    protected constructor();\n}\n/**\n * Contains information regarding an explosion that has\n * happened.\n */\ndeclare class ExplosionEvent {\n    /**\n     * Dimension where the explosion has occurred.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * A collection of blocks impacted by this explosion event.\n     */\n    readonly 'impactedBlocks': BlockLocation[];\n    /**\n     * Optional source of the explosion.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when an explosion\n * occurs.\n */\ndeclare class ExplosionEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an explosion\n     * occurs.\n     * @param callback\n     */\n    subscribe(callback: (arg: ExplosionEvent) => void): (arg: ExplosionEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an explosion\n     * occurs.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ExplosionEvent) => void): void;\n    protected constructor();\n}\n/**\n * Additional configuration options for the\n * {@link mojang-minecraft.Dimension.createExplosion} method.\n */\ndeclare class ExplosionOptions {\n    /**\n     * Whether parts of the explosion also impact underwater.\n     */\n    'allowUnderwater': boolean;\n    /**\n     * Whether the explosion will break blocks within the blast\n     * radius.\n     */\n    'breaksBlocks': boolean;\n    /**\n     * If true, the explosion is accompanied by fires within or\n     * near the blast radius.\n     */\n    'causesFire': boolean;\n    /**\n     * Optional source of the explosion.\n     */\n    'source': Entity;\n}\n/**\n * As part of the Healable component, represents a specific\n * item that can be fed to an entity to cause health effects.\n */\ndeclare class FeedItem {\n    /**\n     * As part of the Healable component, an optional collection of\n     * side effects that can occur from being fed an item.\n     */\n    readonly 'effects': FeedItemEffect[];\n    /**\n     * The amount of health this entity gains when fed this item.\n     * This number is an integer starting at 0. Sample values can\n     * go as high as 40.\n     */\n    readonly 'healAmount': number;\n    /**\n     * Identifier of type of item that can be fed. If a namespace\n     * is not specified, 'minecraft:' is assumed. Example values\n     * include 'wheat' or 'golden_apple'.\n     */\n    readonly 'item': string;\n    protected constructor();\n}\n/**\n * Represents an effect that is applied as a result of a food\n * item being fed to an entity.\n */\ndeclare class FeedItemEffect {\n    /**\n     * Gets an amplifier that may have been applied to this effect.\n     * Valid values are integers starting at 0 and up - but usually\n     * ranging between 0 and 4.\n     */\n    readonly 'amplifier': number;\n    /**\n     * Chance that this effect is applied as a result of the entity\n     * being fed this item. Valid values range between 0 and 1.\n     */\n    readonly 'chance': number;\n    /**\n     * Gets the duration, in ticks, of this effect.\n     */\n    readonly 'duration': number;\n    /**\n     * Gets the identifier of the effect to apply. Example values\n     * include 'fire_resistance' or 'regeneration'.\n     */\n    readonly 'name': string;\n    protected constructor();\n}\n/**\n * Represents a set of filters for when an event should occur.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class FilterGroup {\n    protected constructor();\n}\n/**\n * Represents constants related to fluid containers.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class FluidContainer {\n    /**\n     * Constant that represents the maximum fill level of a fluid\n     * container.\n     */\n    static readonly 'maxFillLevel' = 6;\n    /**\n     * Constant that represents the minimum fill level of a fluid\n     * container.\n     */\n    static readonly 'minFillLevel' = 0;\n    protected constructor();\n}\n/**\n * Contains an interface for defining the state of a property\n * for a {@link mojang-minecraft.BlockPermutation}.\n */\ndeclare class IBlockProperty {\n    /**\n     * The name of this property.\n     */\n    readonly 'name': string;\n    protected constructor();\n}\n/**\n * Base interface that defines components associated with an\n * entity.\n */\ndeclare class IEntityComponent {\n    /**\n     * Identifier of this component.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * Contains the state of an integer-based property for a\n * {@link mojang-minecraft.BlockPermutation}.\n */\ndeclare class IntBlockProperty extends IBlockProperty {\n    /**\n     * The name of this property.\n     */\n    readonly 'name': string;\n    /**\n     * A list of valid values for this particular property.\n     */\n    readonly 'validValues': number[];\n    /**\n     * The current value of this property.\n     * @throws\n     * Setting this property can throw if the value passed is not\n     * valid for the property. Use\n     * {@link mojang-minecraft.IntBlockProperty.validValues} to check\n     * allowed values.\n     */\n    'value': number;\n    protected constructor();\n}\n/**\n * Represents a container that can hold stacks of items. Used\n * for entities like players, chest minecarts, llamas, and\n * more.\n */\ndeclare class InventoryComponentContainer extends Container {\n    /**\n     * The number of empty slots in the container.\n     * @throws This property can throw when used.\n     */\n    readonly 'emptySlotsCount': number;\n    /**\n     * Represents the size of the container. For example, a\n     * standard single-block chest has a size of 27, for the 27\n     * slots in their inventory.\n     * @throws This property can throw when used.\n     */\n    readonly 'size': number;\n    /**\n     * @remarks\n     * Adds an item to the specified container. Items will be\n     * placed in the first available empty slot. (Use\n     * {@link mojang-minecraft.InventoryComponentContainer.setItem} if you\n     * wish to set items in a particular slot.)\n     * @param itemStack\n     * The stack of items to add.\n     * @throws This function can throw errors.\n     */\n    addItem(itemStack: ItemStack): void;\n    /**\n     * @remarks\n     * Gets the item stack for the set of items at the specified\n     * slot. If the slot is empty, returns undefined. This method\n     * does not change or clear the contents of the specified slot.\n     * @param slot\n     * Zero-based index of the slot to retrieve items from.\n     * @throws This function can throw errors.\n     * @example getItem.js\n     * ```typescript\n     *        const itemStack = rightChestContainer.getItem(0);\n     *        test.assert(itemStack.id === \"apple\", \"Expected apple\");\n     *        test.assert(itemStack.amount === 10, \"Expected 10 apples\");\n     * ```\n     */\n    getItem(slot: number): ItemStack;\n    /**\n     * @remarks\n     * Sets an item stack within a particular slot.\n     * @param slot\n     * Zero-based index of the slot to set an item at.\n     * @param itemStack\n     * Stack of items to place within the specified slot.\n     * @throws This function can throw errors.\n     */\n    setItem(slot: number, itemStack: ItemStack): void;\n    /**\n     * @remarks\n     * Swaps items between two different slots within containers.\n     * @param slot\n     * Zero-based index of the slot to swap from this container.\n     * @param otherSlot\n     * Zero-based index of the slot to swap with.\n     * @param otherContainer\n     * Target container to swap with. Note this can be the same\n     * container as this source.\n     * @throws This function can throw errors.\n     * @example swapItems.js\n     * ```typescript\n     *        rightChestContainer.swapItems(1, 0, leftChestContainer); // swap the cake and emerald\n     *\n     * ```\n     */\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean;\n    /**\n     * @remarks\n     * Moves an item from one slot to another, potentially across\n     * containers.\n     * @param fromSlot\n     * @param toSlot\n     * Zero-based index of the slot to move to.\n     * @param toContainer\n     * Target container to transfer to. Note this can be the same\n     * container as the source.\n     * @throws This function can throw errors.\n     * @example transferItem.js\n     * ```typescript\n     *        rightChestContainer.transferItem(0, 4, chestCartContainer); // transfer the apple from the right chest to a chest cart\n     *\n     * ```\n     */\n    transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean;\n    protected constructor();\n}\n/**\n * Contains information related to a chargeable item completing\n * being charged.\n */\ndeclare class ItemCompleteChargeEvent {\n    /**\n     * Returns the item stack that has completed charging.\n     */\n    readonly 'itemStack': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    /**\n     * Returns the time, in ticks, for the remaining duration left\n     * before the charge completes its cycle.\n     */\n    readonly 'useDuration': number;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to the completion of\n * charging for a chargeable item.\n */\ndeclare class ItemCompleteChargeEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a chargeable item\n     * completes charging.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemCompleteChargeEvent) => void): (arg: ItemCompleteChargeEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a chargeable item\n     * completes charging.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemCompleteChargeEvent) => void): void;\n    protected constructor();\n}\n/**\n * When present on an item, this item has a cooldown effect\n * when used by entities.\n */\ndeclare class ItemCooldownComponent {\n    /**\n     * Represents the cooldown category that this item is\n     * associated with.\n     * @throws This property can throw when used.\n     */\n    readonly 'cooldownCategory': string;\n    /**\n     * Amount of time, in ticks, that remain for this item\n     * cooldown.\n     * @throws This property can throw when used.\n     */\n    readonly 'cooldownTicks': number;\n    /**\n     * Identifier of this component. Should always be\n     * 'minecraft:cooldown'.\n     */\n    readonly 'id': string;\n    /**\n     * @remarks\n     * Starts a new cooldown period for this item.\n     * @param player\n     * @throws This function can throw errors.\n     */\n    startCooldown(player: Player): void;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to an item's definition\n * and components changing.\n */\ndeclare class ItemDefinitionEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an item's\n     * definition and components change.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemDefinitionTriggeredEvent) => void): (arg: ItemDefinitionTriggeredEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an item's\n     * definition and components change.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemDefinitionTriggeredEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to a custom item having a data\n * definition change being triggered.\n */\ndeclare class ItemDefinitionTriggeredEvent {\n    /**\n     * Name of the data-driven item event that is triggering this\n     * change.\n     */\n    readonly 'eventName': string;\n    /**\n     * The impacted item stack that is being used.\n     */\n    'item': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * When present on an item, this item can take damage in the\n * process of being used. Note that this component only applies\n * to data-driven items.\n */\ndeclare class ItemDurabilityComponent {\n    /**\n     * Returns the current damage level of this particular item.\n     */\n    'damage': number;\n    /**\n     * A range of numbers that describes the chance of the item\n     * losing durability.\n     * @throws This property can throw when used.\n     */\n    readonly 'damageRange': NumberRange;\n    /**\n     * Identifier of this component. Should always be\n     * 'minecraft:durability'.\n     */\n    readonly 'id': string;\n    /**\n     * Represents the amount of damage that this item can take\n     * before breaking.\n     * @throws This property can throw when used.\n     */\n    readonly 'maxDurability': number;\n    /**\n     * @remarks\n     * Returns the maximum chance that this item would be damaged\n     * using the damageRange property, given an unbreaking level.\n     * @param unbreaking\n     * Unbreaking factor to consider in factoring the damage\n     * chance. Incoming unbreaking parameter must be greater than\n     * 0.\n     * @throws This function can throw errors.\n     */\n    getDamageChance(unbreaking?: number): number;\n    protected constructor();\n}\n/**\n * When present on an item, this item has applied enchantment\n * effects. Note that this component only applies to\n * data-driven items.\n */\ndeclare class ItemEnchantsComponent {\n    /**\n     * Returns a collection of the enchantments applied to this\n     * item stack.\n     */\n    'enchantments': EnchantmentList;\n    /**\n     * Identifier of this component.\n     */\n    readonly 'id': string;\n    /**\n     * @remarks\n     * Removes all enchantments applied to this item stack.\n     * @throws This function can throw errors.\n     */\n    removeAllEnchantments(): void;\n    protected constructor();\n}\n/**\n * When present on an item, this item is consumable by\n * entities. Note that this component only applies to\n * data-driven items.\n */\ndeclare class ItemFoodComponent {\n    /**\n     * If true, the player can always eat this item (even when not\n     * hungry).\n     * @throws This property can throw when used.\n     */\n    readonly 'canAlwaysEat': boolean;\n    /**\n     * Identifier of this component. Should always be\n     * 'minecraft:food'.\n     */\n    readonly 'id': string;\n    /**\n     * Represents how much nutrition this food item will give an\n     * entity when eaten.\n     * @throws This property can throw when used.\n     */\n    readonly 'nutrition': number;\n    /**\n     * When an item is eaten, this value is used according to this\n     * formula (nutrition * saturation_modifier * 2) to apply a\n     * saturation buff.\n     * @throws This property can throw when used.\n     */\n    readonly 'saturationModifier': number;\n    /**\n     * When specified, converts the active item to the one\n     * specified by this property.\n     * @throws This property can throw when used.\n     */\n    readonly 'usingConvertsTo': string;\n    protected constructor();\n}\n/**\n * Contains information related to a chargeable item when the\n * player has finished using the item and released the build\n * action.\n */\ndeclare class ItemReleaseChargeEvent {\n    /**\n     * Returns the item stack that triggered this item event.\n     */\n    readonly 'itemStack': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    /**\n     * Returns the time, in ticks, for the remaining duration left\n     * before the charge completes its cycle.\n     */\n    readonly 'useDuration': number;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to the releasing of\n * charging for a chargeable item.\n */\ndeclare class ItemReleaseChargeEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a chargeable item\n     * is released from charging.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemReleaseChargeEvent) => void): (arg: ItemReleaseChargeEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a chargeable item\n     * is released from charging.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemReleaseChargeEvent) => void): void;\n    protected constructor();\n}\n/**\n * Represents a collection of all of the available item types\n * in Minecraft.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class Items {\n    /**\n     * @remarks\n     * Returns an item type given an item type identifier.\n     * @param itemId\n     * Type of the item to return.\n     */\n    static get(itemId: string): ItemType;\n    protected constructor();\n}\n/**\n * Defines a collection of items.\n */\ndeclare class ItemStack {\n    /**\n     * Number of the items in the stack. Valid values range between\n     * 0 and 64.\n     */\n    'amount': number;\n    /**\n     * A data value used to configure alternate states of the item.\n     */\n    'data': number;\n    /**\n     * Identifier of the type of items for the stack. If a\n     * namespace is not specified, 'minecraft:' is assumed.\n     * Examples include 'wheat' or 'apple'.\n     */\n    readonly 'id': string;\n    /**\n     * Given name of this stack of items.\n     */\n    'nameTag': string;\n    /**\n     * @remarks\n     * Creates a new instance of a stack of items for use in the\n     * world.\n     * @param itemType\n     * Type of item to create. See the\n     * {@link mojang-minecraft.MinecraftItemTypes} enumeration for a list\n     * of standard item types in Minecraft experiences.\n     * @param amount\n     * Number of items to place in the stack, between 1 and 64.\n     * Note that certain items can only have one item in the stack.\n     * @param data\n     * Optional data value used for creating the item, or 0 if no\n     * data value is specified.\n     */\n    constructor(itemType: ItemType, amount?: number, data?: number);\n    /**\n     * @remarks\n     * Gets a component (that represents additional capabilities)\n     * for an item stack.\n     * @param componentId\n     * The identifier of the component (e.g., 'minecraft:food') to\n     * retrieve. If no namespace prefix is specified, 'minecraft:'\n     * is assumed. If the component is not present on the item\n     * stack, undefined is returned.\n     */\n    getComponent: {\n        (componentName: 'minecraft:cooldown'                    | 'cooldown'                    ): ItemCooldownComponent\n        (componentName: 'minecraft:enchantments'                | 'enchantments'                ): ItemEnchantsComponent\n        (componentName: 'minecraft:durability'                  | 'durability'                  ): ItemDurabilityComponent\n        (componentName: 'minecraft:food'                        | 'food'                        ): ItemFoodComponent\n        (componentName: string): any\n    };\n    /**\n     * @remarks\n     * Returns all components that are both present on this item\n     * stack and supported by the API.\n     */\n    getComponents(): any[];\n    /**\n     * @remarks\n     * Returns the lore value - a secondary display string - for an\n     * ItemStack.\n     */\n    getLore(): string[];\n    /**\n     * @remarks\n     * Returns true if the specified component is present on this\n     * item stack.\n     * @param componentId\n     * The identifier of the component (e.g., 'minecraft:food') to\n     * retrieve. If no namespace prefix is specified, 'minecraft:'\n     * is assumed.\n     */\n    hasComponent(componentId: string): boolean;\n    /**\n     * @remarks\n     * Sets the lore value - a secondary display string - for an\n     * ItemStack.\n     * @param loreList\n     */\n    setLore(loreList: string[]): void;\n    /**\n     * @remarks\n     * Triggers an item type event. For custom items, a number of\n     * events are defined in an items' definition for key item\n     * behaviors.\n     * @param eventName\n     * Name of the item type event to trigger. If a namespace is\n     * not specified, minecraft: is assumed.\n     */\n    triggerEvent(eventName: string): void;\n}\n/**\n * Contains information related to a chargeable item starting\n * to be charged.\n */\ndeclare class ItemStartChargeEvent {\n    /**\n     * The impacted item stack that is starting to be charged.\n     */\n    readonly 'itemStack': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    /**\n     * Returns the time, in ticks, for the remaining duration left\n     * before the charge completes its cycle.\n     */\n    readonly 'useDuration': number;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to the start of\n * charging for a chargeable item.\n */\ndeclare class ItemStartChargeEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a chargeable item\n     * starts charging.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemStartChargeEvent) => void): (arg: ItemStartChargeEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a chargeable item\n     * starts charging.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemStartChargeEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to an item being used on a\n * block.\n */\ndeclare class ItemStartUseOnEvent {\n    /**\n     * The face of the block that an item is being used on.\n     */\n    readonly 'blockFace': Direction;\n    /**\n     * Location of the block being impacted.\n     */\n    readonly 'blockLocation': BlockLocation;\n    /**\n     * Location of the resulting build block position. Useful for\n     * determining where a block was placed.\n     */\n    readonly 'buildBlockLocation': BlockLocation;\n    /**\n     * The impacted item stack that is starting to be used.\n     */\n    'item': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to an item starting\n * being used on a block event.\n */\ndeclare class ItemStartUseOnEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an item is used on\n     * a block.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemStartUseOnEvent) => void): (arg: ItemStartUseOnEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an item is used on\n     * a block.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemStartUseOnEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to a chargeable item has\n * finished an items use cycle, or when the player has released\n * the use action with the item.\n */\ndeclare class ItemStopChargeEvent {\n    /**\n     * The impacted item stack that is stopping being charged.\n     */\n    readonly 'itemStack': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    /**\n     * Returns the time, in ticks, for the remaining duration left\n     * before the charge completes its cycle.\n     */\n    readonly 'useDuration': number;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to the stopping of\n * charging for an item that has a registered\n * minecraft:chargeable component.\n */\ndeclare class ItemStopChargeEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a chargeable item\n     * stops charging.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemStopChargeEvent) => void): (arg: ItemStopChargeEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a chargeable item\n     * stops charging.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemStopChargeEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to an item that has stopped\n * being used on a block.\n */\ndeclare class ItemStopUseOnEvent {\n    /**\n     * Location of the block being impacted.\n     */\n    readonly 'blockLocation': BlockLocation;\n    /**\n     * The impacted item stack that is being used on a block.\n     */\n    'item': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to an item stops used\n * on a block event.\n */\ndeclare class ItemStopUseOnEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an item stops being\n     * used on a block.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemStopUseOnEvent) => void): (arg: ItemStopUseOnEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an item is used on\n     * a block.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemStopUseOnEvent) => void): void;\n    protected constructor();\n}\n/**\n * Represents the type of an item - for example, Wool.\n */\ndeclare class ItemType {\n    /**\n     * Returns the identifier of the item type - for example,\n     * 'minecraft:apple'.\n     */\n    readonly 'id': string;\n    protected constructor();\n}\n/**\n * Contains information related to an item being used.\n */\ndeclare class ItemUseEvent {\n    /**\n     * The impacted item stack that is being used.\n     */\n    'item': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to an item use event.\n */\ndeclare class ItemUseEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an item is used.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemUseEvent) => void): (arg: ItemUseEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an item is used.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemUseEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to an item being used on a\n * block.\n */\ndeclare class ItemUseOnEvent {\n    /**\n     * The face of the block that an item is being used on.\n     */\n    readonly 'blockFace': Direction;\n    /**\n     * Location of the block being impacted.\n     */\n    readonly 'blockLocation': BlockLocation;\n    /**\n     * X coordinate of the item-use impact location on the face of\n     * the target block.\n     */\n    readonly 'faceLocationX': number;\n    /**\n     * Y coordinate of the item-use impact location on the face of\n     * the target block.\n     */\n    readonly 'faceLocationY': number;\n    /**\n     * The impacted item stack that is being used on a block.\n     */\n    'item': ItemStack;\n    /**\n     * Returns the source entity that triggered this item event.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to an item being used\n * on a block event.\n */\ndeclare class ItemUseOnEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when an item is used on\n     * a block.\n     * @param callback\n     */\n    subscribe(callback: (arg: ItemUseOnEvent) => void): (arg: ItemUseOnEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when an item is used on\n     * a block.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ItemUseOnEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to changes to a lever\n * activating or deactivating.\n */\ndeclare class LeverActionEvent extends BlockEvent {\n    /**\n     * Block impacted by this event.\n     */\n    readonly 'block': Block;\n    /**\n     * Dimension that contains the block that is the subject of\n     * this event.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * True if the lever is activated (that is, transmitting\n     * power).\n     */\n    readonly 'isPowered': boolean;\n    /**\n     * Optional player that triggered the lever activation.\n     */\n    readonly 'player': Player;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to lever moves\n * (activates or deactivates).\n */\ndeclare class LeverActionEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a lever is moved\n     * (activates or deactivates).\n     * @param callback\n     */\n    subscribe(callback: (arg: LeverActionEvent) => void): (arg: LeverActionEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a lever is moved\n     * (activates or deactivates).\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: LeverActionEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains a location description that is useful for entities\n * and other items. X, Y, and Z can contain decimal fractions.\n * For integer-based locations useful for blocks, see\n * {@link mojang-minecraft.BlockLocation}.\n */\ndeclare class Location {\n    /**\n     * X component of this location.\n     */\n    'x': number;\n    /**\n     * Y component of this location.\n     */\n    'y': number;\n    /**\n     * Z component of this location.\n     */\n    'z': number;\n    /**\n     * @remarks\n     * Creates a new instance of an abstract location.\n     * @param x\n     * X position of the location.\n     * @param y\n     * Y position of the location.\n     * @param z\n     * Z position of the location.\n     */\n    constructor(x: number, y: number, z: number);\n    /**\n     * @remarks\n     * Compares this Location and another Location to one another.\n     * @param other\n     * Other location to compare this Location to.\n     * @returns\n     * True if the two locations are equal.\n     */\n    equals(other: Location): boolean;\n    /**\n     * @remarks\n     * Determines whether or not two Locations are considered to be\n     * near each other.\n     * @param other\n     * Other Location to compare this Location to.\n     * @param epsilon\n     * Maximum distance that the Locations can be from each other\n     * to be considered nearby.\n     * @returns\n     * True if the two Locations are within epsilon distance of\n     * each other.\n     */\n    isNear(other: Location, epsilon: number): boolean;\n}\n/**\n * Contains definitions of standard Minecraft and Minecraft\n * Education Edition block types.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class MinecraftBlockTypes {\n    /**\n     * Represents an acacia button within Minecraft.\n     */\n    static readonly 'acaciaButton': BlockType;\n    /**\n     * Represents an acacia door within Minecraft.\n     */\n    static readonly 'acaciaDoor': BlockType;\n    /**\n     * Represents an acacia fence gate within Minecraft.\n     */\n    static readonly 'acaciaFenceGate': BlockType;\n    /**\n     * Represents an acacia pressure plate within Minecraft.\n     */\n    static readonly 'acaciaPressurePlate': BlockType;\n    /**\n     * Represents a set of acacia stairs within Minecraft.\n     */\n    static readonly 'acaciaStairs': BlockType;\n    /**\n     * Represents an acacia standing sign within Minecraft.\n     */\n    static readonly 'acaciaStandingSign': BlockType;\n    /**\n     * Represents an acacia trapdoor within Minecraft.\n     */\n    static readonly 'acaciaTrapdoor': BlockType;\n    /**\n     * Represents an acacia wall sign within Minecraft.\n     */\n    static readonly 'acaciaWallSign': BlockType;\n    /**\n     * Represents an activator rail within Minecraft.\n     */\n    static readonly 'activatorRail': BlockType;\n    /**\n     * Represents an empty space (air) within Minecraft.\n     */\n    static readonly 'air': BlockType;\n    /**\n     * Represents an allow block within Minecraft.\n     */\n    static readonly 'allow': BlockType;\n    /**\n     * Represents an amethyst block within Minecraft.\n     */\n    static readonly 'amethystBlock': BlockType;\n    /**\n     * Represents a cluster of amethyst within Minecraft.\n     */\n    static readonly 'amethystCluster': BlockType;\n    /**\n     * Represents ancient debris within Minecraft.\n     */\n    static readonly 'ancientDebris': BlockType;\n    /**\n     * Represents andesite stairs within Minecraft.\n     */\n    static readonly 'andesiteStairs': BlockType;\n    /**\n     * Represents an anvil within Minecraft.\n     */\n    static readonly 'anvil': BlockType;\n    /**\n     * Represents an azalea flowering plant within Minecraft.\n     */\n    static readonly 'azalea': BlockType;\n    /**\n     * Represents azalea leaves within Minecraft.\n     */\n    static readonly 'azaleaLeaves': BlockType;\n    /**\n     * Represents flowered azalea leaves within Minecraft.\n     */\n    static readonly 'azaleaLeavesFlowered': BlockType;\n    /**\n     * Represents a bamboo tree within Minecraft.\n     */\n    static readonly 'bamboo': BlockType;\n    /**\n     * Represents a bamboo sapling within Minecraft.\n     */\n    static readonly 'bambooSapling': BlockType;\n    /**\n     * Represents a barrel within Minecraft.\n     */\n    static readonly 'barrel': BlockType;\n    /**\n     * Represents an invisible but logical barrier within\n     * Minecraft.\n     */\n    static readonly 'barrier': BlockType;\n    /**\n     * Represents a basalt block within Minecraft.\n     */\n    static readonly 'basalt': BlockType;\n    /**\n     * Represents a beacon within Minecraft.\n     */\n    static readonly 'beacon': BlockType;\n    /**\n     * Represents a bed within Minecraft.\n     */\n    static readonly 'bed': BlockType;\n    /**\n     * Represents a bedrock block within Minecraft.\n     */\n    static readonly 'bedrock': BlockType;\n    /**\n     * Represents a beehive within Minecraft.\n     */\n    static readonly 'beehive': BlockType;\n    /**\n     * Represents a bee nest within Minecraft.\n     */\n    static readonly 'beeNest': BlockType;\n    /**\n     * Represents a beetroot vegetable within Minecraft.\n     */\n    static readonly 'beetroot': BlockType;\n    /**\n     * Represents a bell within Minecraft.\n     */\n    static readonly 'bell': BlockType;\n    /**\n     * Represents a big dripleaf plant within Minecraft.\n     */\n    static readonly 'bigDripleaf': BlockType;\n    /**\n     * Represents a birch button within Minecraft.\n     */\n    static readonly 'birchButton': BlockType;\n    /**\n     * Represents a birch door within Minecraft.\n     */\n    static readonly 'birchDoor': BlockType;\n    /**\n     * Represents a birch fence gate within Minecraft.\n     */\n    static readonly 'birchFenceGate': BlockType;\n    /**\n     * Represents a birch pressure plate within Minecraft.\n     */\n    static readonly 'birchPressurePlate': BlockType;\n    /**\n     * Represents a birch stairs block within Minecraft.\n     */\n    static readonly 'birchStairs': BlockType;\n    /**\n     * Represents a birch standing sign within Minecraft.\n     */\n    static readonly 'birchStandingSign': BlockType;\n    /**\n     * Represents a birch trapdoor within Minecraft.\n     */\n    static readonly 'birchTrapdoor': BlockType;\n    /**\n     * Represents a birch wall sign within Minecraft.\n     */\n    static readonly 'birchWallSign': BlockType;\n    /**\n     * Represents a black candle within Minecraft.\n     */\n    static readonly 'blackCandle': BlockType;\n    /**\n     * Represents a black candle cake within Minecraft.\n     */\n    static readonly 'blackCandleCake': BlockType;\n    /**\n     * Represents a black glazed terracotta block within Minecraft.\n     */\n    static readonly 'blackGlazedTerracotta': BlockType;\n    /**\n     * Represents a blackstone block within Minecraft.\n     */\n    static readonly 'blackstone': BlockType;\n    /**\n     * Represents a blackstone double slab within Minecraft.\n     */\n    static readonly 'blackstoneDoubleSlab': BlockType;\n    /**\n     * Represents a blackstone slab within Minecraft.\n     */\n    static readonly 'blackstoneSlab': BlockType;\n    /**\n     * Represents blackstone stairs within Minecraft.\n     */\n    static readonly 'blackstoneStairs': BlockType;\n    /**\n     * Represents a blackstone wall within Minecraft.\n     */\n    static readonly 'blackstoneWall': BlockType;\n    /**\n     * Represents a blast furnace within Minecraft.\n     */\n    static readonly 'blastFurnace': BlockType;\n    /**\n     * Represents a blue candle within Minecraft.\n     */\n    static readonly 'blueCandle': BlockType;\n    /**\n     * Represents a blue candle cake within Minecraft.\n     */\n    static readonly 'blueCandleCake': BlockType;\n    /**\n     * Represents a blue glazed terracotta block within Minecraft.\n     */\n    static readonly 'blueGlazedTerracotta': BlockType;\n    /**\n     * Represents a blue ice block within Minecraft.\n     */\n    static readonly 'blueIce': BlockType;\n    /**\n     * Represents a bone block within Minecraft.\n     */\n    static readonly 'boneBlock': BlockType;\n    /**\n     * Represents an unbreakable border block within Minecraft.\n     */\n    static readonly 'bookshelf': BlockType;\n    /**\n     * Represents a border block within Minecraft.\n     */\n    static readonly 'borderBlock': BlockType;\n    /**\n     * Represents a brewing stand within Minecraft.\n     */\n    static readonly 'brewingStand': BlockType;\n    /**\n     * Represents a block of brick within Minecraft.\n     */\n    static readonly 'brickBlock': BlockType;\n    /**\n     * Represents brick stairs within Minecraft.\n     */\n    static readonly 'brickStairs': BlockType;\n    /**\n     * Represents a brown candle within Minecraft.\n     */\n    static readonly 'brownCandle': BlockType;\n    /**\n     * Represents a brown candle cake within Minecraft.\n     */\n    static readonly 'brownCandleCake': BlockType;\n    /**\n     * Represents a brown glazed terracotta block within Minecraft.\n     */\n    static readonly 'brownGlazedTerracotta': BlockType;\n    /**\n     * Represents a brown mushroom within Minecraft.\n     */\n    static readonly 'brownMushroom': BlockType;\n    /**\n     * Represents a block of brown mushroom within Minecraft.\n     */\n    static readonly 'brownMushroomBlock': BlockType;\n    /**\n     * Represents a column of bubbles within Minecraft.\n     */\n    static readonly 'bubbleColumn': BlockType;\n    /**\n     * Represents a block of budding amethyst within Minecraft.\n     */\n    static readonly 'buddingAmethyst': BlockType;\n    /**\n     * Represents a cactus within Minecraft.\n     */\n    static readonly 'cactus': BlockType;\n    /**\n     * Represents a cake within Minecraft.\n     */\n    static readonly 'cake': BlockType;\n    /**\n     * Represents a calcite block within Minecraft.\n     */\n    static readonly 'calcite': BlockType;\n    /**\n     * Represents a camera within Minecraft Education Edition. It\n     * is not available in Minecraft Bedrock Edition.\n     */\n    static readonly 'camera': BlockType;\n    /**\n     * Represents a campfire within Minecraft.\n     */\n    static readonly 'campfire': BlockType;\n    /**\n     * Represents a candle within Minecraft.\n     */\n    static readonly 'candle': BlockType;\n    /**\n     * Represents a cake with candles within Minecraft.\n     */\n    static readonly 'candleCake': BlockType;\n    /**\n     * Represents a carpet within Minecraft.\n     */\n    static readonly 'carpet': BlockType;\n    /**\n     * Represents carrots within Minecraft.\n     */\n    static readonly 'carrots': BlockType;\n    /**\n     * Represents a cartography table block within Minecraft.\n     */\n    static readonly 'cartographyTable': BlockType;\n    /**\n     * Represents a carved pumpkin within Minecraft.\n     */\n    static readonly 'carvedPumpkin': BlockType;\n    /**\n     * Represents a cauldron within Minecraft.\n     */\n    static readonly 'cauldron': BlockType;\n    /**\n     * Represents a set of cave vines within Minecraft.\n     */\n    static readonly 'caveVines': BlockType;\n    /**\n     * Represents the body of a set of cave vines with berries\n     * within Minecraft.\n     */\n    static readonly 'caveVinesBodyWithBerries': BlockType;\n    /**\n     * Represents the head of a set of cave vines with berries\n     * within Minecraft.\n     */\n    static readonly 'caveVinesHeadWithBerries': BlockType;\n    /**\n     * Represents a metallic chain within Minecraft.\n     */\n    static readonly 'chain': BlockType;\n    /**\n     * Represents a block that gives off heat but not light, within\n     * Minecraft Education Edition or Bedrock Edition with\n     * Education features.\n     */\n    static readonly 'chainCommandBlock': BlockType;\n    /**\n     * Represents a chemical heat block within Minecraft.\n     */\n    static readonly 'chemicalHeat': BlockType;\n    /**\n     * Represents a chemistry table within Minecraft Education\n     * experiences.\n     */\n    static readonly 'chemistryTable': BlockType;\n    /**\n     * Represents a chest within Minecraft.\n     */\n    static readonly 'chest': BlockType;\n    /**\n     * Represents a set of chiseled deepslate within Minecraft.\n     */\n    static readonly 'chiseledDeepslate': BlockType;\n    /**\n     * Represents a block of chiseled nether bricks within\n     * Minecraft.\n     */\n    static readonly 'chiseledNetherBricks': BlockType;\n    /**\n     * Represents a block of chiseled polished blackstone within\n     * Minecraft.\n     */\n    static readonly 'chiseledPolishedBlackstone': BlockType;\n    /**\n     * Represents a chorus flower within Minecraft.\n     */\n    static readonly 'chorusFlower': BlockType;\n    /**\n     * Represents a chorus plant within Minecraft.\n     */\n    static readonly 'chorusPlant': BlockType;\n    /**\n     * Represents a block of clay within Minecraft.\n     */\n    static readonly 'clay': BlockType;\n    static readonly 'clientRequestPlaceholderBlock': BlockType;\n    /**\n     * Represents a block of solid coal within Minecraft.\n     */\n    static readonly 'coalBlock': BlockType;\n    /**\n     * Represents a block with embedded coal ore within Minecraft.\n     */\n    static readonly 'coalOre': BlockType;\n    /**\n     * Represents a block of cobbled deepslate within Minecraft.\n     */\n    static readonly 'cobbledDeepslate': BlockType;\n    /**\n     * Represents a double slab of cobbled deepslate within\n     * Minecraft.\n     */\n    static readonly 'cobbledDeepslateDoubleSlab': BlockType;\n    /**\n     * Represents a slab of deepslate within Minecraft.\n     */\n    static readonly 'cobbledDeepslateSlab': BlockType;\n    /**\n     * Represents cobbled deepslate stairs within Minecraft.\n     */\n    static readonly 'cobbledDeepslateStairs': BlockType;\n    /**\n     * Represents a cobbled deepslate wall within Minecraft.\n     */\n    static readonly 'cobbledDeepslateWall': BlockType;\n    /**\n     * Represents a block of cobblestone within Minecraft.\n     */\n    static readonly 'cobblestone': BlockType;\n    /**\n     * Represents a wall of cobblestone within Minecraft.\n     */\n    static readonly 'cobblestoneWall': BlockType;\n    /**\n     * Represents a set of cocoa beans (typically on a tree) within\n     * Minecraft.\n     */\n    static readonly 'cocoa': BlockType;\n    /**\n     * Represents blue/purple torches within Minecraft.\n     */\n    static readonly 'coloredTorchBp': BlockType;\n    /**\n     * Represents red/green torches within Minecraft.\n     */\n    static readonly 'coloredTorchRg': BlockType;\n    /**\n     * Represents a block that can run commands within Minecraft.\n     */\n    static readonly 'commandBlock': BlockType;\n    /**\n     * Represents a composter block within Minecraft.\n     */\n    static readonly 'composter': BlockType;\n    /**\n     * Represents a block of concrete powder within Minecraft.\n     */\n    static readonly 'concrete': BlockType;\n    /**\n     * Represents a block of concrete powder within Minecraft.\n     */\n    static readonly 'concretePowder': BlockType;\n    /**\n     * Represents a conduit block within Minecraft.\n     */\n    static readonly 'conduit': BlockType;\n    /**\n     * Represents a solid block of copper within Minecraft.\n     */\n    static readonly 'copperBlock': BlockType;\n    /**\n     * Represents a block with embedded copper ore within\n     * Minecraft.\n     */\n    static readonly 'copperOre': BlockType;\n    /**\n     * Represents coral within Minecraft.\n     */\n    static readonly 'coral': BlockType;\n    /**\n     * Represents a solid block of coral within Minecraft.\n     */\n    static readonly 'coralBlock': BlockType;\n    /**\n     * Represents a fan formation of coral within Minecraft.\n     */\n    static readonly 'coralFan': BlockType;\n    /**\n     * Represents a fan formation of dead coral within Minecraft.\n     */\n    static readonly 'coralFanDead': BlockType;\n    /**\n     * Represents a hanging fan formation of coral within\n     * Minecraft.\n     */\n    static readonly 'coralFanHang': BlockType;\n    /**\n     * Represents an alternate hanging fan formation of coral (#2)\n     * within Minecraft.\n     */\n    static readonly 'coralFanHang2': BlockType;\n    /**\n     * Represents an alternate hanging fan formation of coral (#3)\n     * within Minecraft.\n     */\n    static readonly 'coralFanHang3': BlockType;\n    /**\n     * Represents a block of cracked deepslate bricks within\n     * Minecraft.\n     */\n    static readonly 'crackedDeepslateBricks': BlockType;\n    /**\n     * Represents tiles of cracked deepslate within Minecraft.\n     */\n    static readonly 'crackedDeepslateTiles': BlockType;\n    /**\n     * Represents a block of cracked nether bricks within\n     * Minecraft.\n     */\n    static readonly 'crackedNetherBricks': BlockType;\n    /**\n     * Represents a block of cracked and polished blackstone bricks\n     * within Minecraft.\n     */\n    static readonly 'crackedPolishedBlackstoneBricks': BlockType;\n    /**\n     * Represents a crafting table within Minecraft.\n     */\n    static readonly 'craftingTable': BlockType;\n    /**\n     * Represents a crimson button within Minecraft.\n     */\n    static readonly 'crimsonButton': BlockType;\n    /**\n     * Represents a crimson door within Minecraft.\n     */\n    static readonly 'crimsonDoor': BlockType;\n    /**\n     * Represents a crimson double slab within Minecraft.\n     */\n    static readonly 'crimsonDoubleSlab': BlockType;\n    /**\n     * Represents a crimson fence within Minecraft.\n     */\n    static readonly 'crimsonFence': BlockType;\n    /**\n     * Represents a crimson fence gate within Minecraft.\n     */\n    static readonly 'crimsonFenceGate': BlockType;\n    /**\n     * Represents a crimson fungus within Minecraft.\n     */\n    static readonly 'crimsonFungus': BlockType;\n    /**\n     * Represents crimson hyphae within Minecraft.\n     */\n    static readonly 'crimsonHyphae': BlockType;\n    /**\n     * Represents crimson nylium within Minecraft.\n     */\n    static readonly 'crimsonNylium': BlockType;\n    /**\n     * Represents a set of crimson planks within Minecraft.\n     */\n    static readonly 'crimsonPlanks': BlockType;\n    /**\n     * Represents a crimson pressure plate within Minecraft.\n     */\n    static readonly 'crimsonPressurePlate': BlockType;\n    /**\n     * Represents a set of crimson roots within Minecraft.\n     */\n    static readonly 'crimsonRoots': BlockType;\n    /**\n     * Represents a crimson slab within Minecraft.\n     */\n    static readonly 'crimsonSlab': BlockType;\n    /**\n     * Represents a set of crimson stairs within Minecraft.\n     */\n    static readonly 'crimsonStairs': BlockType;\n    /**\n     * Represents a crimson standing sign within Minecraft.\n     */\n    static readonly 'crimsonStandingSign': BlockType;\n    /**\n     * Represents a crimson stem within Minecraft.\n     */\n    static readonly 'crimsonStem': BlockType;\n    /**\n     * Represents a crimson trapdoor within Minecraft.\n     */\n    static readonly 'crimsonTrapdoor': BlockType;\n    /**\n     * Represents a crimson wall sign within Minecraft.\n     */\n    static readonly 'crimsonWallSign': BlockType;\n    /**\n     * Represents crying obsidian within Minecraft.\n     */\n    static readonly 'cryingObsidian': BlockType;\n    /**\n     * Represents a cut copper block within Minecraft.\n     */\n    static readonly 'cutCopper': BlockType;\n    /**\n     * Represents a cut copper slab within Minecraft.\n     */\n    static readonly 'cutCopperSlab': BlockType;\n    /**\n     * Represents a set of cut copper stairs within Minecraft.\n     */\n    static readonly 'cutCopperStairs': BlockType;\n    /**\n     * Represents a cyan-colored candle within Minecraft.\n     */\n    static readonly 'cyanCandle': BlockType;\n    /**\n     * Represents a cake with a cyan-colored candle within\n     * Minecraft.\n     */\n    static readonly 'cyanCandleCake': BlockType;\n    /**\n     * Represents a block of cyan-colored glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'cyanGlazedTerracotta': BlockType;\n    /**\n     * Represents a dark oak button within Minecraft.\n     */\n    static readonly 'darkOakButton': BlockType;\n    /**\n     * Represents a dark oak door within Minecraft.\n     */\n    static readonly 'darkOakDoor': BlockType;\n    /**\n     * Represents a dark oak fence gate within Minecraft.\n     */\n    static readonly 'darkOakFenceGate': BlockType;\n    /**\n     * Represents a dark oak pressure plate within Minecraft.\n     */\n    static readonly 'darkOakPressurePlate': BlockType;\n    /**\n     * Represents a set of dark oak stairs within Minecraft.\n     */\n    static readonly 'darkOakStairs': BlockType;\n    /**\n     * Represents a dark oak standing sign within Minecraft.\n     */\n    static readonly 'darkoakStandingSign': BlockType;\n    /**\n     * Represents a dark oak trapdoor within Minecraft.\n     */\n    static readonly 'darkOakTrapdoor': BlockType;\n    /**\n     * Represents a dark oak wall sign within Minecraft.\n     */\n    static readonly 'darkoakWallSign': BlockType;\n    /**\n     * Represents a set of dark prismarine stairs within Minecraft.\n     */\n    static readonly 'darkPrismarineStairs': BlockType;\n    /**\n     * Represents a daylight detector within Minecraft.\n     */\n    static readonly 'daylightDetector': BlockType;\n    /**\n     * Represents an inverted daylight detector within Minecraft.\n     */\n    static readonly 'daylightDetectorInverted': BlockType;\n    /**\n     * Represents a dead bush within Minecraft.\n     */\n    static readonly 'deadbush': BlockType;\n    /**\n     * Represents a block of deepslate within Minecraft.\n     */\n    static readonly 'deepslate': BlockType;\n    /**\n     * Represents a double slab of deepslate brick within\n     * Minecraft.\n     */\n    static readonly 'deepslateBrickDoubleSlab': BlockType;\n    /**\n     * Represents a block of deepslate bricks within Minecraft.\n     */\n    static readonly 'deepslateBricks': BlockType;\n    /**\n     * Represents a slab of deepslate brick within Minecraft.\n     */\n    static readonly 'deepslateBrickSlab': BlockType;\n    /**\n     * Represents a set of deepslate brick stairs within Minecraft.\n     */\n    static readonly 'deepslateBrickStairs': BlockType;\n    /**\n     * Represents a deepslate brick wall within Minecraft.\n     */\n    static readonly 'deepslateBrickWall': BlockType;\n    /**\n     * Represents a block of deepslate with embedded coal ore\n     * within Minecraft.\n     */\n    static readonly 'deepslateCoalOre': BlockType;\n    /**\n     * Represents a block of deepslate with embedded copper ore\n     * within Minecraft.\n     */\n    static readonly 'deepslateCopperOre': BlockType;\n    /**\n     * Represents a block of deepslate with embedded diamond ore\n     * within Minecraft.\n     */\n    static readonly 'deepslateDiamondOre': BlockType;\n    /**\n     * Represents a block of deepslate with embedded emerald ore\n     * within Minecraft.\n     */\n    static readonly 'deepslateEmeraldOre': BlockType;\n    /**\n     * Represents a block of deepslate with embedded gold ore\n     * within Minecraft.\n     */\n    static readonly 'deepslateGoldOre': BlockType;\n    /**\n     * Represents a block of deepslate with embedded iron ore\n     * within Minecraft.\n     */\n    static readonly 'deepslateIronOre': BlockType;\n    /**\n     * Represents a block of deepslate with embedded lapis lazuli\n     * ore within Minecraft.\n     */\n    static readonly 'deepslateLapisOre': BlockType;\n    /**\n     * Represents a block of deepslate with embedded redstone ore\n     * within Minecraft.\n     */\n    static readonly 'deepslateRedstoneOre': BlockType;\n    /**\n     * Represents a double slab of tiled deepslate within\n     * Minecraft.\n     */\n    static readonly 'deepslateTileDoubleSlab': BlockType;\n    /**\n     * Represents a set of deepslate tiles within Minecraft.\n     */\n    static readonly 'deepslateTiles': BlockType;\n    /**\n     * Represents a slab of deepslate tiles within Minecraft.\n     */\n    static readonly 'deepslateTileSlab': BlockType;\n    /**\n     * Represents a set of deepslate tile stairs within Minecraft.\n     */\n    static readonly 'deepslateTileStairs': BlockType;\n    /**\n     * Represents a wall of deepslate tile within Minecraft.\n     */\n    static readonly 'deepslateTileWall': BlockType;\n    /**\n     * Represents a logical but generally invisible Deny logic\n     * block within Minecraft.\n     */\n    static readonly 'deny': BlockType;\n    /**\n     * Represents a detector rail within Minecraft.\n     */\n    static readonly 'detectorRail': BlockType;\n    /**\n     * Represents a block of diamond within Minecraft.\n     */\n    static readonly 'diamondBlock': BlockType;\n    /**\n     * Represents a block with embedded diamond ore within\n     * Minecraft.\n     */\n    static readonly 'diamondOre': BlockType;\n    /**\n     * Represents a set of diorite stairs within Minecraft.\n     */\n    static readonly 'dioriteStairs': BlockType;\n    /**\n     * Represents a block of dirt within Minecraft.\n     */\n    static readonly 'dirt': BlockType;\n    /**\n     * Represents a block of dirt with roots within Minecraft.\n     */\n    static readonly 'dirtWithRoots': BlockType;\n    /**\n     * Represents a dispenser within Minecraft.\n     */\n    static readonly 'dispenser': BlockType;\n    /**\n     * Represents a slab of double cut copper within Minecraft.\n     */\n    static readonly 'doubleCutCopperSlab': BlockType;\n    /**\n     * Represents a double plant within Minecraft.\n     */\n    static readonly 'doublePlant': BlockType;\n    static readonly 'doubleStoneBlockSlab': BlockType;\n    static readonly 'doubleStoneBlockSlab2': BlockType;\n    static readonly 'doubleStoneBlockSlab3': BlockType;\n    static readonly 'doubleStoneBlockSlab4': BlockType;\n    /**\n     * Represents a double slab of stone within Minecraft.\n     */\n    static readonly 'doubleStoneSlab': BlockType;\n    /**\n     * Represents an alternate double slab of stone (#2) within\n     * Minecraft.\n     */\n    static readonly 'doubleStoneSlab2': BlockType;\n    /**\n     * Represents an alternate double slab of stone (#3) within\n     * Minecraft.\n     */\n    static readonly 'doubleStoneSlab3': BlockType;\n    /**\n     * Represents an alternate double slab of stone (#4) within\n     * Minecraft.\n     */\n    static readonly 'doubleStoneSlab4': BlockType;\n    /**\n     * Represents a double slab of wood within Minecraft.\n     */\n    static readonly 'doubleWoodenSlab': BlockType;\n    /**\n     * Represents a dragon egg within Minecraft.\n     */\n    static readonly 'dragonEgg': BlockType;\n    /**\n     * Represents a block of dried kelp within Minecraft.\n     */\n    static readonly 'driedKelpBlock': BlockType;\n    /**\n     * Represents a block of dripstone within Minecraft.\n     */\n    static readonly 'dripstoneBlock': BlockType;\n    /**\n     * Represents a dropper within Minecraft.\n     */\n    static readonly 'dropper': BlockType;\n    /**\n     * Represents an element in Minecraft Education experiences.\n     */\n    static readonly 'element0': BlockType;\n    /**\n     * Represents the hydrogen element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element1': BlockType;\n    /**\n     * Represents the neon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element10': BlockType;\n    /**\n     * Represents the fermium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element100': BlockType;\n    /**\n     * Represents the mendelevium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element101': BlockType;\n    /**\n     * Represents the nobelium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element102': BlockType;\n    /**\n     * Represents the lawrencium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element103': BlockType;\n    /**\n     * Represents the rutherfordium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element104': BlockType;\n    /**\n     * Represents the dubnium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element105': BlockType;\n    /**\n     * Represents the seaborgium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element106': BlockType;\n    /**\n     * Represents the bohrium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element107': BlockType;\n    /**\n     * Represents the hassium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element108': BlockType;\n    /**\n     * Represents the meitnerium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element109': BlockType;\n    /**\n     * Represents the sodium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element11': BlockType;\n    /**\n     * Represents the darmstadtium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element110': BlockType;\n    /**\n     * Represents the roentgenium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element111': BlockType;\n    /**\n     * Represents the copernicium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element112': BlockType;\n    /**\n     * Represents the nihonium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element113': BlockType;\n    /**\n     * Represents the flerovium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element114': BlockType;\n    /**\n     * Represents the moscovium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element115': BlockType;\n    /**\n     * Represents the livermorium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element116': BlockType;\n    /**\n     * Represents the tennessine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element117': BlockType;\n    /**\n     * Represents the oganesson element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element118': BlockType;\n    /**\n     * Represents the magnesium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element12': BlockType;\n    /**\n     * Represents the aluminum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element13': BlockType;\n    /**\n     * Represents the silicon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element14': BlockType;\n    /**\n     * Represents the phosphorus element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element15': BlockType;\n    /**\n     * Represents the sulfur element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element16': BlockType;\n    /**\n     * Represents the chlorine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element17': BlockType;\n    /**\n     * Represents the argon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element18': BlockType;\n    /**\n     * Represents the potassium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element19': BlockType;\n    /**\n     * Represents the helium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element2': BlockType;\n    /**\n     * Represents the calcium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element20': BlockType;\n    /**\n     * Represents the scandium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element21': BlockType;\n    /**\n     * Represents the titanium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element22': BlockType;\n    /**\n     * Represents the vanadium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element23': BlockType;\n    /**\n     * Represents the chromium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element24': BlockType;\n    /**\n     * Represents the manganese element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element25': BlockType;\n    /**\n     * Represents the iron element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element26': BlockType;\n    /**\n     * Represents the cobalt element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element27': BlockType;\n    /**\n     * Represents the nickel element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element28': BlockType;\n    /**\n     * Represents the copper element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element29': BlockType;\n    /**\n     * Represents a lithium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element3': BlockType;\n    /**\n     * Represents the zinc element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element30': BlockType;\n    /**\n     * Represents the gallium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element31': BlockType;\n    /**\n     * Represents a germanium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element32': BlockType;\n    /**\n     * Represents the arsenic element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element33': BlockType;\n    /**\n     * Represents the selenium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element34': BlockType;\n    /**\n     * Represents the bromine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element35': BlockType;\n    /**\n     * Represents the krypton element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element36': BlockType;\n    /**\n     * Represents the rubidium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element37': BlockType;\n    /**\n     * Represents the strontium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element38': BlockType;\n    /**\n     * Represents the yttrium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element39': BlockType;\n    /**\n     * Represents a beryllium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element4': BlockType;\n    /**\n     * Represents the zirconium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element40': BlockType;\n    /**\n     * Represents the niobium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element41': BlockType;\n    /**\n     * Represents the molybdenum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element42': BlockType;\n    /**\n     * Represents the technetium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element43': BlockType;\n    /**\n     * Represents the ruthenium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element44': BlockType;\n    /**\n     * Represents the rhodium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element45': BlockType;\n    /**\n     * Represents the palladium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element46': BlockType;\n    /**\n     * Represents the silver element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element47': BlockType;\n    /**\n     * Represents the cadmium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element48': BlockType;\n    /**\n     * Represents the indium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element49': BlockType;\n    /**\n     * Represents the boron element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element5': BlockType;\n    /**\n     * Represents the tin element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element50': BlockType;\n    /**\n     * Represents the antimony element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element51': BlockType;\n    /**\n     * Represents the tellurium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element52': BlockType;\n    /**\n     * Represents the iodine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element53': BlockType;\n    /**\n     * Represents the xenon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element54': BlockType;\n    /**\n     * Represents the cesium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element55': BlockType;\n    /**\n     * Represents the barium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element56': BlockType;\n    /**\n     * Represents the lanthanum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element57': BlockType;\n    /**\n     * Represents the cerium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element58': BlockType;\n    /**\n     * Represents the praseodymium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element59': BlockType;\n    /**\n     * Represents the carbon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element6': BlockType;\n    /**\n     * Represents the neodymium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element60': BlockType;\n    /**\n     * Represents the promethium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element61': BlockType;\n    /**\n     * Represents the samarium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element62': BlockType;\n    /**\n     * Represents the europium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element63': BlockType;\n    /**\n     * Represents the gadolinium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element64': BlockType;\n    /**\n     * Represents a terbium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element65': BlockType;\n    /**\n     * Represents the dysprosium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element66': BlockType;\n    /**\n     * Represents the holmium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element67': BlockType;\n    /**\n     * Represents the erbium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element68': BlockType;\n    /**\n     * Represents the thulium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element69': BlockType;\n    /**\n     * Represents the nitrogen element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element7': BlockType;\n    /**\n     * Represents the ytterbium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element70': BlockType;\n    /**\n     * Represents the lutetium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element71': BlockType;\n    /**\n     * Represents a hafnium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element72': BlockType;\n    /**\n     * Represents the tantalum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element73': BlockType;\n    /**\n     * Represents the tungsten element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element74': BlockType;\n    /**\n     * Represents the rhenium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element75': BlockType;\n    /**\n     * Represents the osmium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element76': BlockType;\n    /**\n     * Represents the iridium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element77': BlockType;\n    /**\n     * Represents the platinum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element78': BlockType;\n    /**\n     * Represents the gold element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element79': BlockType;\n    /**\n     * Represents the oxygen element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element8': BlockType;\n    /**\n     * Represents the mercury element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element80': BlockType;\n    /**\n     * Represents the thallium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element81': BlockType;\n    /**\n     * Represents the lead element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element82': BlockType;\n    /**\n     * Represents the bismuth element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element83': BlockType;\n    /**\n     * Represents the polonium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element84': BlockType;\n    /**\n     * Represents the astatine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element85': BlockType;\n    /**\n     * Represents the radon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element86': BlockType;\n    /**\n     * Represents the francium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element87': BlockType;\n    /**\n     * Represents the radium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element88': BlockType;\n    /**\n     * Represents the actinium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element89': BlockType;\n    /**\n     * Represents the fluorine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element9': BlockType;\n    /**\n     * Represents the thorium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element90': BlockType;\n    /**\n     * Represents the protactinium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element91': BlockType;\n    /**\n     * Represents the uranium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element92': BlockType;\n    /**\n     * Represents the neptunium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element93': BlockType;\n    /**\n     * Represents the plutonium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element94': BlockType;\n    /**\n     * Represents the americium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element95': BlockType;\n    /**\n     * Represents the curium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element96': BlockType;\n    /**\n     * Represents the berkelium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element97': BlockType;\n    /**\n     * Represents the californium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element98': BlockType;\n    /**\n     * Represents the einsteinium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element99': BlockType;\n    /**\n     * Represents a block of emerald within Minecraft.\n     */\n    static readonly 'emeraldBlock': BlockType;\n    /**\n     * Represents a block with embedded emerald ore within\n     * Minecraft.\n     */\n    static readonly 'emeraldOre': BlockType;\n    /**\n     * Represents an enchanting table within Minecraft.\n     */\n    static readonly 'enchantingTable': BlockType;\n    /**\n     * Represents an end bricks block within Minecraft.\n     */\n    static readonly 'endBricks': BlockType;\n    /**\n     * Represents a set of end brick stairs within Minecraft.\n     */\n    static readonly 'endBrickStairs': BlockType;\n    /**\n     * Represents an ender chest within Minecraft.\n     */\n    static readonly 'enderChest': BlockType;\n    /**\n     * Represents an end gateway within Minecraft.\n     */\n    static readonly 'endGateway': BlockType;\n    /**\n     * Represents an end portal block within Minecraft.\n     */\n    static readonly 'endPortal': BlockType;\n    /**\n     * Represents an end portal frame within Minecraft.\n     */\n    static readonly 'endPortalFrame': BlockType;\n    /**\n     * Represents an end rod within Minecraft.\n     */\n    static readonly 'endRod': BlockType;\n    /**\n     * Represents an end stone block within Minecraft.\n     */\n    static readonly 'endStone': BlockType;\n    /**\n     * Represents a block of exposed copper within Minecraft.\n     */\n    static readonly 'exposedCopper': BlockType;\n    /**\n     * Represents a block of exposed cut copper within Minecraft.\n     */\n    static readonly 'exposedCutCopper': BlockType;\n    /**\n     * Represents a slab of exposed cut copper within Minecraft.\n     */\n    static readonly 'exposedCutCopperSlab': BlockType;\n    /**\n     * Represents a set of exposed cut copper stairs within\n     * Minecraft.\n     */\n    static readonly 'exposedCutCopperStairs': BlockType;\n    /**\n     * Represents a double slab of exposed cut copper within\n     * Minecraft.\n     */\n    static readonly 'exposedDoubleCutCopperSlab': BlockType;\n    /**\n     * Represents a farmland block within Minecraft.\n     */\n    static readonly 'farmland': BlockType;\n    /**\n     * Represents a fence within Minecraft.\n     */\n    static readonly 'fence': BlockType;\n    /**\n     * Represents a fence gate within Minecraft.\n     */\n    static readonly 'fenceGate': BlockType;\n    /**\n     * Represents a fire within Minecraft.\n     */\n    static readonly 'fire': BlockType;\n    /**\n     * Represents a fletching table within Minecraft.\n     */\n    static readonly 'fletchingTable': BlockType;\n    /**\n     * Represents a flowering azalea plant within Minecraft.\n     */\n    static readonly 'floweringAzalea': BlockType;\n    /**\n     * Represents a flower pot within Minecraft.\n     */\n    static readonly 'flowerPot': BlockType;\n    /**\n     * Represents flowing lava within Minecraft.\n     */\n    static readonly 'flowingLava': BlockType;\n    /**\n     * Represents flowing water within Minecraft.\n     */\n    static readonly 'flowingWater': BlockType;\n    /**\n     * Represents a frame within Minecraft.\n     */\n    static readonly 'frame': BlockType;\n    static readonly 'frogSpawn': BlockType;\n    /**\n     * Represents a frosted ice block within Minecraft.\n     */\n    static readonly 'frostedIce': BlockType;\n    /**\n     * Represents a furnace within Minecraft.\n     */\n    static readonly 'furnace': BlockType;\n    /**\n     * Represents a block of gilded blackstone within Minecraft.\n     */\n    static readonly 'gildedBlackstone': BlockType;\n    /**\n     * Represents a glass block within Minecraft.\n     */\n    static readonly 'glass': BlockType;\n    /**\n     * Represents a pane of glass within Minecraft.\n     */\n    static readonly 'glassPane': BlockType;\n    /**\n     * Represents a glowing frame within Minecraft.\n     */\n    static readonly 'glowFrame': BlockType;\n    /**\n     * Represents a glowing obsidian block within Minecraft.\n     */\n    static readonly 'glowingobsidian': BlockType;\n    /**\n     * Represents glow lichen within Minecraft.\n     */\n    static readonly 'glowLichen': BlockType;\n    /**\n     * Represents a block of glowstone within Minecraft.\n     */\n    static readonly 'glowstone': BlockType;\n    /**\n     * Represents a gold block within Minecraft.\n     */\n    static readonly 'goldBlock': BlockType;\n    /**\n     * Represents a golden rail element within Minecraft.\n     */\n    static readonly 'goldenRail': BlockType;\n    /**\n     * Represents a block with embedded gold ore within Minecraft.\n     */\n    static readonly 'goldOre': BlockType;\n    /**\n     * Represents a set of granite stairs within Minecraft.\n     */\n    static readonly 'graniteStairs': BlockType;\n    /**\n     * Represents a block of dirt and grass within Minecraft.\n     */\n    static readonly 'grass': BlockType;\n    /**\n     * Represents a block of dirt and grass with a path within\n     * Minecraft.\n     */\n    static readonly 'grassPath': BlockType;\n    /**\n     * Represents a block of gravel within Minecraft.\n     */\n    static readonly 'gravel': BlockType;\n    /**\n     * Represents a gray-colored candle within Minecraft.\n     */\n    static readonly 'grayCandle': BlockType;\n    /**\n     * Represents a cake with gray-colored candle within Minecraft.\n     */\n    static readonly 'grayCandleCake': BlockType;\n    /**\n     * Represents a gray-colored block of glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'grayGlazedTerracotta': BlockType;\n    /**\n     * Represents a green-colored candle within Minecraft.\n     */\n    static readonly 'greenCandle': BlockType;\n    /**\n     * Represents a green-colored candle cake within Minecraft.\n     */\n    static readonly 'greenCandleCake': BlockType;\n    /**\n     * Represents a green block of glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'greenGlazedTerracotta': BlockType;\n    /**\n     * Represents a grindstone within Minecraft.\n     */\n    static readonly 'grindstone': BlockType;\n    /**\n     * Represents a set of hanging roots within Minecraft.\n     */\n    static readonly 'hangingRoots': BlockType;\n    /**\n     * Represents a block of hardened clay within Minecraft.\n     */\n    static readonly 'hardenedClay': BlockType;\n    /**\n     * Represents a block of hard glass within Minecraft.\n     */\n    static readonly 'hardGlass': BlockType;\n    /**\n     * Represents a pane of hard glass within Minecraft.\n     */\n    static readonly 'hardGlassPane': BlockType;\n    /**\n     * Represents a stained hard glass block within Minecraft.\n     */\n    static readonly 'hardStainedGlass': BlockType;\n    /**\n     * Represents a stained pane of hard glass within Minecraft.\n     */\n    static readonly 'hardStainedGlassPane': BlockType;\n    /**\n     * Represents a block of hay within Minecraft.\n     */\n    static readonly 'hayBlock': BlockType;\n    /**\n     * Represents a heavy weighted pressure plate within Minecraft.\n     */\n    static readonly 'heavyWeightedPressurePlate': BlockType;\n    /**\n     * Represents a block of honey within Minecraft.\n     */\n    static readonly 'honeyBlock': BlockType;\n    /**\n     * Represents a honeycomb block within Minecraft.\n     */\n    static readonly 'honeycombBlock': BlockType;\n    /**\n     * Represents a hopper within Minecraft.\n     */\n    static readonly 'hopper': BlockType;\n    /**\n     * Represents a block of ice within Minecraft.\n     */\n    static readonly 'ice': BlockType;\n    /**\n     * Represents an infested block of deepslate within Minecraft.\n     */\n    static readonly 'infestedDeepslate': BlockType;\n    /**\n     * Represents an information update block within Minecraft.\n     */\n    static readonly 'infoUpdate': BlockType;\n    /**\n     * Represents an information update block within Minecraft.\n     */\n    static readonly 'infoUpdate2': BlockType;\n    /**\n     * Represents an invisible boundary bedrock block within\n     * Minecraft.\n     */\n    static readonly 'invisibleBedrock': BlockType;\n    /**\n     * Represents iron bars within Minecraft.\n     */\n    static readonly 'ironBars': BlockType;\n    /**\n     * Represents a block of iron within Minecraft.\n     */\n    static readonly 'ironBlock': BlockType;\n    /**\n     * Represents an iron door within Minecraft.\n     */\n    static readonly 'ironDoor': BlockType;\n    /**\n     * Represents a block with embedded iron ore within Minecraft.\n     */\n    static readonly 'ironOre': BlockType;\n    /**\n     * Represents an iron trapdoor within Minecraft.\n     */\n    static readonly 'ironTrapdoor': BlockType;\n    /**\n     * Represents a jigsaw within Minecraft.\n     */\n    static readonly 'jigsaw': BlockType;\n    /**\n     * Represents a jukebox within Minecraft.\n     */\n    static readonly 'jukebox': BlockType;\n    /**\n     * Represents jungle wood button within Minecraft.\n     */\n    static readonly 'jungleButton': BlockType;\n    /**\n     * Represents a jungle wood door within Minecraft.\n     */\n    static readonly 'jungleDoor': BlockType;\n    /**\n     * Represents a jungle wood fence gate within Minecraft.\n     */\n    static readonly 'jungleFenceGate': BlockType;\n    /**\n     * Represents a jungle wood pressure plate within Minecraft.\n     */\n    static readonly 'junglePressurePlate': BlockType;\n    /**\n     * Represents a set of jungle wood stairs within Minecraft.\n     */\n    static readonly 'jungleStairs': BlockType;\n    /**\n     * Represents a jungle wood standing sign within Minecraft.\n     */\n    static readonly 'jungleStandingSign': BlockType;\n    /**\n     * Represents a jungle wood trapdoor within Minecraft.\n     */\n    static readonly 'jungleTrapdoor': BlockType;\n    /**\n     * Represents a jungle wood wall sign within Minecraft.\n     */\n    static readonly 'jungleWallSign': BlockType;\n    /**\n     * Represents a set of kelp within Minecraft.\n     */\n    static readonly 'kelp': BlockType;\n    /**\n     * Represents a ladder within Minecraft.\n     */\n    static readonly 'ladder': BlockType;\n    /**\n     * Represents a lantern within Minecraft.\n     */\n    static readonly 'lantern': BlockType;\n    /**\n     * Represents a block of lapis lazuli within Minecraft.\n     */\n    static readonly 'lapisBlock': BlockType;\n    /**\n     * Represents a block with embedded lapis lazuli within\n     * Minecraft.\n     */\n    static readonly 'lapisOre': BlockType;\n    /**\n     * Represents a bud of large amethyst within Minecraft.\n     */\n    static readonly 'largeAmethystBud': BlockType;\n    /**\n     * Represents lava within Minecraft.\n     */\n    static readonly 'lava': BlockType;\n    /**\n     * Represents a cauldron filled with lava within Minecraft.\n     */\n    static readonly 'lavaCauldron': BlockType;\n    /**\n     * Represents a set of leaves within Minecraft.\n     */\n    static readonly 'leaves': BlockType;\n    /**\n     * Represents an updated set of leaves within Minecraft.\n     */\n    static readonly 'leaves2': BlockType;\n    /**\n     * Represents a lectern within Minecraft.\n     */\n    static readonly 'lectern': BlockType;\n    /**\n     * Represents a lever within Minecraft.\n     */\n    static readonly 'lever': BlockType;\n    /**\n     * Represents a block of light within Minecraft.\n     */\n    static readonly 'lightBlock': BlockType;\n    /**\n     * Represents a light blue candle within Minecraft.\n     */\n    static readonly 'lightBlueCandle': BlockType;\n    /**\n     * Represents a light blue candle cake within Minecraft.\n     */\n    static readonly 'lightBlueCandleCake': BlockType;\n    /**\n     * Represents a light blue block of glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'lightBlueGlazedTerracotta': BlockType;\n    /**\n     * Represents a light gray candle within Minecraft.\n     */\n    static readonly 'lightGrayCandle': BlockType;\n    /**\n     * Represents a light gray candle cake within Minecraft.\n     */\n    static readonly 'lightGrayCandleCake': BlockType;\n    /**\n     * Represents a lightning rod within Minecraft.\n     */\n    static readonly 'lightningRod': BlockType;\n    /**\n     * Represents a light weighted pressure plate within Minecraft.\n     */\n    static readonly 'lightWeightedPressurePlate': BlockType;\n    /**\n     * Represents a lime candle within Minecraft.\n     */\n    static readonly 'limeCandle': BlockType;\n    /**\n     * Represents a lime-colored candle cake within Minecraft.\n     */\n    static readonly 'limeCandleCake': BlockType;\n    /**\n     * Represents a lime-colored block of glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'limeGlazedTerracotta': BlockType;\n    /**\n     * Represents a lit blast furnace within Minecraft.\n     */\n    static readonly 'litBlastFurnace': BlockType;\n    /**\n     * Represents lit deepslate redstone ore within Minecraft.\n     */\n    static readonly 'litDeepslateRedstoneOre': BlockType;\n    /**\n     * Represents a lit furnace within Minecraft.\n     */\n    static readonly 'litFurnace': BlockType;\n    /**\n     * Represents a lit pumpkin within Minecraft.\n     */\n    static readonly 'litPumpkin': BlockType;\n    /**\n     * Represents a lit redstone lamp within Minecraft.\n     */\n    static readonly 'litRedstoneLamp': BlockType;\n    /**\n     * Represents lit redstone ore within Minecraft.\n     */\n    static readonly 'litRedstoneOre': BlockType;\n    /**\n     * Represents a lit smoker within Minecraft.\n     */\n    static readonly 'litSmoker': BlockType;\n    /**\n     * Represents a lodestone within Minecraft.\n     */\n    static readonly 'lodestone': BlockType;\n    /**\n     * Represents a log within Minecraft.\n     */\n    static readonly 'log': BlockType;\n    /**\n     * Represents a more updated, customizable log within\n     * Minecraft.\n     */\n    static readonly 'log2': BlockType;\n    /**\n     * Represents a loom within Minecraft.\n     */\n    static readonly 'loom': BlockType;\n    /**\n     * Represents a magenta candle within Minecraft.\n     */\n    static readonly 'magentaCandle': BlockType;\n    /**\n     * Represents a magenta candle cake within Minecraft.\n     */\n    static readonly 'magentaCandleCake': BlockType;\n    /**\n     * Represents a block of magenta-colored glazed terracotta\n     * within Minecraft.\n     */\n    static readonly 'magentaGlazedTerracotta': BlockType;\n    /**\n     * Represents magma within Minecraft.\n     */\n    static readonly 'magma': BlockType;\n    static readonly 'mangroveButton': BlockType;\n    static readonly 'mangroveDoor': BlockType;\n    static readonly 'mangroveDoubleSlab': BlockType;\n    static readonly 'mangroveFence': BlockType;\n    static readonly 'mangroveFenceGate': BlockType;\n    static readonly 'mangroveLeaves': BlockType;\n    static readonly 'mangroveLog': BlockType;\n    static readonly 'mangrovePlanks': BlockType;\n    static readonly 'mangrovePressurePlate': BlockType;\n    static readonly 'mangrovePropagule': BlockType;\n    static readonly 'mangroveRoots': BlockType;\n    static readonly 'mangroveSlab': BlockType;\n    static readonly 'mangroveStairs': BlockType;\n    static readonly 'mangroveStandingSign': BlockType;\n    static readonly 'mangroveTrapdoor': BlockType;\n    static readonly 'mangroveWallSign': BlockType;\n    static readonly 'mangroveWood': BlockType;\n    /**\n     * Represents a medium-sized bud of amethyst within Minecraft.\n     */\n    static readonly 'mediumAmethystBud': BlockType;\n    /**\n     * Represents a block of melon within Minecraft.\n     */\n    static readonly 'melonBlock': BlockType;\n    /**\n     * Represents a stem of melon within Minecraft.\n     */\n    static readonly 'melonStem': BlockType;\n    /**\n     * Represents a mob spawner within Minecraft.\n     */\n    static readonly 'mobSpawner': BlockType;\n    /**\n     * Represents a monster egg within Minecraft.\n     */\n    static readonly 'monsterEgg': BlockType;\n    /**\n     * Represents a block of moss within Minecraft.\n     */\n    static readonly 'mossBlock': BlockType;\n    /**\n     * Represents a carpet of moss within Minecraft.\n     */\n    static readonly 'mossCarpet': BlockType;\n    /**\n     * Represents a block of cobblestone with moss within\n     * Minecraft.\n     */\n    static readonly 'mossyCobblestone': BlockType;\n    /**\n     * Represents a set of mossy cobblestone stairs within\n     * Minecraft.\n     */\n    static readonly 'mossyCobblestoneStairs': BlockType;\n    /**\n     * Represents a set of mossy stone brick stairs within\n     * Minecraft.\n     */\n    static readonly 'mossyStoneBrickStairs': BlockType;\n    static readonly 'movingBlock': BlockType;\n    static readonly 'mud': BlockType;\n    static readonly 'mudBrickDoubleSlab': BlockType;\n    static readonly 'mudBricks': BlockType;\n    static readonly 'mudBrickSlab': BlockType;\n    static readonly 'mudBrickStairs': BlockType;\n    static readonly 'mudBrickWall': BlockType;\n    static readonly 'muddyMangroveRoots': BlockType;\n    /**\n     * Represents a mycelium plant within Minecraft.\n     */\n    static readonly 'mycelium': BlockType;\n    /**\n     * Represents a nether brick block within Minecraft.\n     */\n    static readonly 'netherBrick': BlockType;\n    /**\n     * Represents a nether brick fence within Minecraft.\n     */\n    static readonly 'netherBrickFence': BlockType;\n    /**\n     * Represents a set of nether brick stairs within Minecraft.\n     */\n    static readonly 'netherBrickStairs': BlockType;\n    /**\n     * Represents a block of nether with embedded gold ore within\n     * Minecraft.\n     */\n    static readonly 'netherGoldOre': BlockType;\n    /**\n     * Represents a block of netherite within Minecraft.\n     */\n    static readonly 'netheriteBlock': BlockType;\n    /**\n     * Represents a block of netherrack within Minecraft.\n     */\n    static readonly 'netherrack': BlockType;\n    /**\n     * Represents a nether rock within Minecraft.\n     */\n    static readonly 'netherreactor': BlockType;\n    /**\n     * Represents nether sprouts within Minecraft.\n     */\n    static readonly 'netherSprouts': BlockType;\n    /**\n     * Represents nether wart within Minecraft.\n     */\n    static readonly 'netherWart': BlockType;\n    /**\n     * Represents a block of nether wart within Minecraft.\n     */\n    static readonly 'netherWartBlock': BlockType;\n    /**\n     * Represents a standard set of stone stairs within Minecraft.\n     */\n    static readonly 'normalStoneStairs': BlockType;\n    /**\n     * Represents a note block within Minecraft.\n     */\n    static readonly 'noteblock': BlockType;\n    /**\n     * Represents a set of oak stairs within Minecraft.\n     */\n    static readonly 'oakStairs': BlockType;\n    /**\n     * Represents an observer within Minecraft.\n     */\n    static readonly 'observer': BlockType;\n    /**\n     * Represents an obsidian block within Minecraft.\n     */\n    static readonly 'obsidian': BlockType;\n    static readonly 'ochreFroglight': BlockType;\n    /**\n     * Represents an orange candle within Minecraft.\n     */\n    static readonly 'orangeCandle': BlockType;\n    /**\n     * Represents an orange candle cake within Minecraft.\n     */\n    static readonly 'orangeCandleCake': BlockType;\n    /**\n     * Represents a block of orange-colored glazed terracotta\n     * within Minecraft.\n     */\n    static readonly 'orangeGlazedTerracotta': BlockType;\n    /**\n     * Represents a block of oxidized copper within Minecraft.\n     */\n    static readonly 'oxidizedCopper': BlockType;\n    /**\n     * Represents a block of oxidized cut copper within Minecraft.\n     */\n    static readonly 'oxidizedCutCopper': BlockType;\n    /**\n     * Represents a slab of oxidized cut copper within Minecraft.\n     */\n    static readonly 'oxidizedCutCopperSlab': BlockType;\n    /**\n     * Represents a set of oxidized cut copper stairs within\n     * Minecraft.\n     */\n    static readonly 'oxidizedCutCopperStairs': BlockType;\n    /**\n     * Represents a double slab of oxidized cut copper within\n     * Minecraft.\n     */\n    static readonly 'oxidizedDoubleCutCopperSlab': BlockType;\n    /**\n     * Represents a block of packed ice within Minecraft.\n     */\n    static readonly 'packedIce': BlockType;\n    static readonly 'packedMud': BlockType;\n    static readonly 'pearlescentFroglight': BlockType;\n    /**\n     * Represents a pink candle within Minecraft.\n     */\n    static readonly 'pinkCandle': BlockType;\n    /**\n     * Represents a pink candle cake within Minecraft.\n     */\n    static readonly 'pinkCandleCake': BlockType;\n    /**\n     * Represents a pink-colored block of glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'pinkGlazedTerracotta': BlockType;\n    /**\n     * Represents a piston within Minecraft.\n     */\n    static readonly 'piston': BlockType;\n    static readonly 'pistonArmCollision': BlockType;\n    /**\n     * Represents a set of planks within Minecraft.\n     */\n    static readonly 'planks': BlockType;\n    /**\n     * Represents podzol within Minecraft.\n     */\n    static readonly 'podzol': BlockType;\n    /**\n     * Represents pointed dripstone within Minecraft.\n     */\n    static readonly 'pointedDripstone': BlockType;\n    /**\n     * Represents a set of polished andesite stairs within\n     * Minecraft.\n     */\n    static readonly 'polishedAndesiteStairs': BlockType;\n    /**\n     * Represents a block of polished basalt within Minecraft.\n     */\n    static readonly 'polishedBasalt': BlockType;\n    /**\n     * Represents a block of polished blackstone within Minecraft.\n     */\n    static readonly 'polishedBlackstone': BlockType;\n    /**\n     * Represents a double slab of polished blackstone brick within\n     * Minecraft.\n     */\n    static readonly 'polishedBlackstoneBrickDoubleSlab': BlockType;\n    /**\n     * Represents a block of polished blackstone bricks within\n     * Minecraft.\n     */\n    static readonly 'polishedBlackstoneBricks': BlockType;\n    /**\n     * Represents a slab of polished blackstone within Minecraft.\n     */\n    static readonly 'polishedBlackstoneBrickSlab': BlockType;\n    /**\n     * Represents a set of polished blackstone brick stairs within\n     * Minecraft.\n     */\n    static readonly 'polishedBlackstoneBrickStairs': BlockType;\n    /**\n     * Represents a polished blackstone brick wall within\n     * Minecraft.\n     */\n    static readonly 'polishedBlackstoneBrickWall': BlockType;\n    /**\n     * Represents a polished blackstone button within Minecraft.\n     */\n    static readonly 'polishedBlackstoneButton': BlockType;\n    /**\n     * Represents a double slab of polished blackstone within\n     * Minecraft.\n     */\n    static readonly 'polishedBlackstoneDoubleSlab': BlockType;\n    /**\n     * Represents a polished blackstone pressure plate within\n     * Minecraft.\n     */\n    static readonly 'polishedBlackstonePressurePlate': BlockType;\n    /**\n     * Represents a slab of polished blackstone within Minecraft.\n     */\n    static readonly 'polishedBlackstoneSlab': BlockType;\n    /**\n     * Represents a set of polished blackstone stairs within\n     * Minecraft.\n     */\n    static readonly 'polishedBlackstoneStairs': BlockType;\n    /**\n     * Represents a polished blackstone wall within Minecraft.\n     */\n    static readonly 'polishedBlackstoneWall': BlockType;\n    /**\n     * Represents a block of polished deepslate within Minecraft.\n     */\n    static readonly 'polishedDeepslate': BlockType;\n    /**\n     * Represents a double slab of polished deepslate within\n     * Minecraft.\n     */\n    static readonly 'polishedDeepslateDoubleSlab': BlockType;\n    /**\n     * Represents a slab of polished deepslate within Minecraft.\n     */\n    static readonly 'polishedDeepslateSlab': BlockType;\n    /**\n     * Represents a set of polished deepslate stairs within\n     * Minecraft.\n     */\n    static readonly 'polishedDeepslateStairs': BlockType;\n    /**\n     * Represents a wall of polished deepslate within Minecraft.\n     */\n    static readonly 'polishedDeepslateWall': BlockType;\n    /**\n     * Represents a block of polished diorite within Minecraft.\n     */\n    static readonly 'polishedDioriteStairs': BlockType;\n    /**\n     * Represents a set of polished granite stairs within\n     * Minecraft.\n     */\n    static readonly 'polishedGraniteStairs': BlockType;\n    /**\n     * Represents a portal within Minecraft.\n     */\n    static readonly 'portal': BlockType;\n    /**\n     * Represents a set of potatoes within Minecraft.\n     */\n    static readonly 'potatoes': BlockType;\n    /**\n     * Represents a block of powder snow within Minecraft.\n     */\n    static readonly 'powderSnow': BlockType;\n    /**\n     * Represents a powered comparator within Minecraft.\n     */\n    static readonly 'poweredComparator': BlockType;\n    /**\n     * Represents a powered repeater within Minecraft.\n     */\n    static readonly 'poweredRepeater': BlockType;\n    /**\n     * Represents a block of prismarine within Minecraft.\n     */\n    static readonly 'prismarine': BlockType;\n    /**\n     * Represents a set of prismarine brick stairs within\n     * Minecraft.\n     */\n    static readonly 'prismarineBricksStairs': BlockType;\n    /**\n     * Represents a set of prismarine stairs within Minecraft.\n     */\n    static readonly 'prismarineStairs': BlockType;\n    /**\n     * Represents a pumpkin within Minecraft.\n     */\n    static readonly 'pumpkin': BlockType;\n    /**\n     * Represents a pumpkin stem within Minecraft.\n     */\n    static readonly 'pumpkinStem': BlockType;\n    /**\n     * Represents a purple candle within Minecraft.\n     */\n    static readonly 'purpleCandle': BlockType;\n    /**\n     * Represents a purple colored candle cake within Minecraft.\n     */\n    static readonly 'purpleCandleCake': BlockType;\n    /**\n     * Represents a purple-colored block of glazed terracotta\n     * within Minecraft.\n     */\n    static readonly 'purpleGlazedTerracotta': BlockType;\n    /**\n     * Represents a purpur block within Minecraft.\n     */\n    static readonly 'purpurBlock': BlockType;\n    /**\n     * Represents a set of purpur stairs within Minecraft.\n     */\n    static readonly 'purpurStairs': BlockType;\n    /**\n     * Represents a block of solid quartz within Minecraft.\n     */\n    static readonly 'quartzBlock': BlockType;\n    /**\n     * Represents a block of solid quartz bricks within Minecraft.\n     */\n    static readonly 'quartzBricks': BlockType;\n    /**\n     * Represents a block with embedded quartz ore within\n     * Minecraft.\n     */\n    static readonly 'quartzOre': BlockType;\n    /**\n     * Represents a set of quartz stairs within Minecraft.\n     */\n    static readonly 'quartzStairs': BlockType;\n    /**\n     * Represents a set of rails within Minecraft.\n     */\n    static readonly 'rail': BlockType;\n    /**\n     * Represents a block of raw copper within Minecraft.\n     */\n    static readonly 'rawCopperBlock': BlockType;\n    /**\n     * Represents a block of raw gold within Minecraft.\n     */\n    static readonly 'rawGoldBlock': BlockType;\n    /**\n     * Represents a block of raw iron within Minecraft.\n     */\n    static readonly 'rawIronBlock': BlockType;\n    /**\n     * Represents a red candle within Minecraft.\n     */\n    static readonly 'redCandle': BlockType;\n    /**\n     * Represents a red candle cake within Minecraft.\n     */\n    static readonly 'redCandleCake': BlockType;\n    /**\n     * Represents a red flower within Minecraft.\n     */\n    static readonly 'redFlower': BlockType;\n    /**\n     * Represents a red-colored block of glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'redGlazedTerracotta': BlockType;\n    /**\n     * Represents a red mushroom within Minecraft.\n     */\n    static readonly 'redMushroom': BlockType;\n    /**\n     * Represents a block of red mushroom within Minecraft.\n     */\n    static readonly 'redMushroomBlock': BlockType;\n    /**\n     * Represents a block of red nether brick within Minecraft.\n     */\n    static readonly 'redNetherBrick': BlockType;\n    /**\n     * Represents a set of red nether brick stairs within\n     * Minecraft.\n     */\n    static readonly 'redNetherBrickStairs': BlockType;\n    /**\n     * Represents a block of red sandstone within Minecraft.\n     */\n    static readonly 'redSandstone': BlockType;\n    /**\n     * Represents a set of red sandstone stairs within Minecraft.\n     */\n    static readonly 'redSandstoneStairs': BlockType;\n    /**\n     * Represents a block of redstone within Minecraft.\n     */\n    static readonly 'redstoneBlock': BlockType;\n    /**\n     * Represents a redstone lamp within Minecraft.\n     */\n    static readonly 'redstoneLamp': BlockType;\n    /**\n     * Represents a block with embedded redstone ore within\n     * Minecraft.\n     */\n    static readonly 'redstoneOre': BlockType;\n    /**\n     * Represents a redstone torch within Minecraft.\n     */\n    static readonly 'redstoneTorch': BlockType;\n    /**\n     * Represents a redstone wire within Minecraft.\n     */\n    static readonly 'redstoneWire': BlockType;\n    /**\n     * Represents reeds within Minecraft.\n     */\n    static readonly 'reeds': BlockType;\n    static readonly 'reinforcedDeepslate': BlockType;\n    /**\n     * Represents a repeating command block within Minecraft.\n     */\n    static readonly 'repeatingCommandBlock': BlockType;\n    /**\n     * Represents a reserved block within Minecraft.\n     */\n    static readonly 'reserved6': BlockType;\n    /**\n     * Represents a respawn anchor within Minecraft.\n     */\n    static readonly 'respawnAnchor': BlockType;\n    /**\n     * Represents a block of sand within Minecraft.\n     */\n    static readonly 'sand': BlockType;\n    /**\n     * Represents a block of sandstone within Minecraft.\n     */\n    static readonly 'sandstone': BlockType;\n    /**\n     * Represents a set of sandstone stairs within Minecraft.\n     */\n    static readonly 'sandstoneStairs': BlockType;\n    /**\n     * Represents a sapling within Minecraft.\n     */\n    static readonly 'sapling': BlockType;\n    /**\n     * Represents a set of scaffolding within Minecraft.\n     */\n    static readonly 'scaffolding': BlockType;\n    static readonly 'sculk': BlockType;\n    static readonly 'sculkCatalyst': BlockType;\n    /**\n     * Represents a sculk sensor within Minecraft.\n     */\n    static readonly 'sculkSensor': BlockType;\n    static readonly 'sculkShrieker': BlockType;\n    static readonly 'sculkVein': BlockType;\n    /**\n     * Represents seagrass within Minecraft.\n     */\n    static readonly 'seagrass': BlockType;\n    /**\n     * Represents a sealantern within Minecraft.\n     */\n    static readonly 'seaLantern': BlockType;\n    /**\n     * Represents a seapickle within Minecraft.\n     */\n    static readonly 'seaPickle': BlockType;\n    /**\n     * Represents a shroom light within Minecraft.\n     */\n    static readonly 'shroomlight': BlockType;\n    /**\n     * Represents a shulker box within Minecraft.\n     */\n    static readonly 'shulkerBox': BlockType;\n    /**\n     * Represents a silver-colored block of glazed terracotta\n     * within Minecraft.\n     */\n    static readonly 'silverGlazedTerracotta': BlockType;\n    /**\n     * Represents a skull within Minecraft.\n     */\n    static readonly 'skull': BlockType;\n    /**\n     * Represents slime within Minecraft.\n     */\n    static readonly 'slime': BlockType;\n    /**\n     * Represents a small bud of amethyst within Minecraft.\n     */\n    static readonly 'smallAmethystBud': BlockType;\n    /**\n     * Represents a small dripleaf block within Minecraft.\n     */\n    static readonly 'smallDripleafBlock': BlockType;\n    /**\n     * Represents a smithing table within Minecraft.\n     */\n    static readonly 'smithingTable': BlockType;\n    /**\n     * Represents a smoker within Minecraft.\n     */\n    static readonly 'smoker': BlockType;\n    /**\n     * Represents a block of smooth basalt within Minecraft.\n     */\n    static readonly 'smoothBasalt': BlockType;\n    /**\n     * Represents a set of smooth quartz stairs within Minecraft.\n     */\n    static readonly 'smoothQuartzStairs': BlockType;\n    /**\n     * Represents a set of smooth red sandstone stairs within\n     * Minecraft.\n     */\n    static readonly 'smoothRedSandstoneStairs': BlockType;\n    /**\n     * Represents a set of smooth redstone stairs within Minecraft.\n     */\n    static readonly 'smoothSandstoneStairs': BlockType;\n    /**\n     * Represents a smooth stone block within Minecraft.\n     */\n    static readonly 'smoothStone': BlockType;\n    /**\n     * Represents snow within Minecraft.\n     */\n    static readonly 'snow': BlockType;\n    /**\n     * Represents a layer of snow within Minecraft.\n     */\n    static readonly 'snowLayer': BlockType;\n    /**\n     * Represents a soul campfire within Minecraft.\n     */\n    static readonly 'soulCampfire': BlockType;\n    /**\n     * Represents soul fire within Minecraft.\n     */\n    static readonly 'soulFire': BlockType;\n    /**\n     * Represents a soul lantern within Minecraft.\n     */\n    static readonly 'soulLantern': BlockType;\n    /**\n     * Represents a block of soul sand within Minecraft.\n     */\n    static readonly 'soulSand': BlockType;\n    /**\n     * Represents soul soil within Minecraft.\n     */\n    static readonly 'soulSoil': BlockType;\n    /**\n     * Represents a soul torch within Minecraft.\n     */\n    static readonly 'soulTorch': BlockType;\n    /**\n     * Represents a sponge within Minecraft.\n     */\n    static readonly 'sponge': BlockType;\n    /**\n     * Represents a spore blossom within Minecraft.\n     */\n    static readonly 'sporeBlossom': BlockType;\n    /**\n     * Represents a spruce wood button within Minecraft.\n     */\n    static readonly 'spruceButton': BlockType;\n    /**\n     * Represents a spruce wood door within Minecraft.\n     */\n    static readonly 'spruceDoor': BlockType;\n    /**\n     * Represents a spruce wood fence gate within Minecraft.\n     */\n    static readonly 'spruceFenceGate': BlockType;\n    /**\n     * Represents a spruce wood pressure plate within Minecraft.\n     */\n    static readonly 'sprucePressurePlate': BlockType;\n    /**\n     * Represents a set of spruce wood stairs within Minecraft.\n     */\n    static readonly 'spruceStairs': BlockType;\n    /**\n     * Represents a spruce wood standing sign within Minecraft.\n     */\n    static readonly 'spruceStandingSign': BlockType;\n    /**\n     * Represents a spruce wood trapdoor within Minecraft.\n     */\n    static readonly 'spruceTrapdoor': BlockType;\n    /**\n     * Represents a spruce wood wall sign within Minecraft.\n     */\n    static readonly 'spruceWallSign': BlockType;\n    /**\n     * Represents stained glass within Minecraft.\n     */\n    static readonly 'stainedGlass': BlockType;\n    /**\n     * Represents a pane of stained glass within Minecraft.\n     */\n    static readonly 'stainedGlassPane': BlockType;\n    /**\n     * Represents a block of stained hardened clay within\n     * Minecraft.\n     */\n    static readonly 'stainedHardenedClay': BlockType;\n    /**\n     * Represents a standing banner within Minecraft.\n     */\n    static readonly 'standingBanner': BlockType;\n    /**\n     * Represents a standing sign within Minecraft.\n     */\n    static readonly 'standingSign': BlockType;\n    /**\n     * Represents a piston block with a sticky arm within\n     * Minecraft.\n     */\n    static readonly 'stickyPiston': BlockType;\n    static readonly 'stickyPistonArmCollision': BlockType;\n    /**\n     * Represents a block of stone within Minecraft.\n     */\n    static readonly 'stone': BlockType;\n    static readonly 'stoneBlockSlab': BlockType;\n    static readonly 'stoneBlockSlab2': BlockType;\n    static readonly 'stoneBlockSlab3': BlockType;\n    static readonly 'stoneBlockSlab4': BlockType;\n    /**\n     * Represents a block of stone brick within Minecraft.\n     */\n    static readonly 'stonebrick': BlockType;\n    /**\n     * Represents a set of stone brick stairs within Minecraft.\n     */\n    static readonly 'stoneBrickStairs': BlockType;\n    /**\n     * Represents a stone button within Minecraft.\n     */\n    static readonly 'stoneButton': BlockType;\n    /**\n     * Represents a stonecutter within Minecraft.\n     */\n    static readonly 'stonecutter': BlockType;\n    /**\n     * Represents a stonecutter block within Minecraft.\n     */\n    static readonly 'stonecutterBlock': BlockType;\n    /**\n     * Represents a stone pressure plate within Minecraft.\n     */\n    static readonly 'stonePressurePlate': BlockType;\n    /**\n     * Represents a slab of stone within Minecraft.\n     */\n    static readonly 'stoneSlab': BlockType;\n    /**\n     * Represents a variant of a slab of stone (#2) within\n     * Minecraft.\n     */\n    static readonly 'stoneSlab2': BlockType;\n    /**\n     * Represents a slab of stone (variant #3) within Minecraft.\n     */\n    static readonly 'stoneSlab3': BlockType;\n    /**\n     * Represents a slab of stone (variant #4) within Minecraft.\n     */\n    static readonly 'stoneSlab4': BlockType;\n    /**\n     * Represents a set of stone stairs within Minecraft.\n     */\n    static readonly 'stoneStairs': BlockType;\n    /**\n     * Represents a stripped acacia log within Minecraft.\n     */\n    static readonly 'strippedAcaciaLog': BlockType;\n    /**\n     * Represents a stripped birch log within Minecraft.\n     */\n    static readonly 'strippedBirchLog': BlockType;\n    /**\n     * Represents stripped crimson hyphae within Minecraft.\n     */\n    static readonly 'strippedCrimsonHyphae': BlockType;\n    /**\n     * Represents a stripped crimson stem within Minecraft.\n     */\n    static readonly 'strippedCrimsonStem': BlockType;\n    /**\n     * Represents a stripped dark oak log within Minecraft.\n     */\n    static readonly 'strippedDarkOakLog': BlockType;\n    /**\n     * Represents a stripped jungle log within Minecraft.\n     */\n    static readonly 'strippedJungleLog': BlockType;\n    static readonly 'strippedMangroveLog': BlockType;\n    static readonly 'strippedMangroveWood': BlockType;\n    /**\n     * Represents a stripped oak log within Minecraft.\n     */\n    static readonly 'strippedOakLog': BlockType;\n    /**\n     * Represents a stripped spruce log within Minecraft.\n     */\n    static readonly 'strippedSpruceLog': BlockType;\n    /**\n     * Represents stripped warped hyphae within Minecraft.\n     */\n    static readonly 'strippedWarpedHyphae': BlockType;\n    /**\n     * Represents stripped warped stem within Minecraft.\n     */\n    static readonly 'strippedWarpedStem': BlockType;\n    /**\n     * Represents a structure block, which provides for the saving\n     * and loading of block structures, within Minecraft.\n     */\n    static readonly 'structureBlock': BlockType;\n    /**\n     * Represents a structure void within Minecraft.\n     */\n    static readonly 'structureVoid': BlockType;\n    /**\n     * Represents a sweet berry bush within Minecraft.\n     */\n    static readonly 'sweetBerryBush': BlockType;\n    /**\n     * Represents tall grass within Minecraft.\n     */\n    static readonly 'tallgrass': BlockType;\n    /**\n     * Represents a target within Minecraft.\n     */\n    static readonly 'target': BlockType;\n    /**\n     * Represents tinted glass within Minecraft.\n     */\n    static readonly 'tintedGlass': BlockType;\n    /**\n     * Represents a block of TnT within Minecraft.\n     */\n    static readonly 'tnt': BlockType;\n    /**\n     * Represents a torch within Minecraft.\n     */\n    static readonly 'torch': BlockType;\n    /**\n     * Represents a trapdoor within Minecraft.\n     */\n    static readonly 'trapdoor': BlockType;\n    /**\n     * Represents a trapped chest within Minecraft.\n     */\n    static readonly 'trappedChest': BlockType;\n    static readonly 'tripWire': BlockType;\n    /**\n     * Represents a tripwire hook within Minecraft.\n     */\n    static readonly 'tripwireHook': BlockType;\n    /**\n     * Represents a block of tuff within Minecraft.\n     */\n    static readonly 'tuff': BlockType;\n    /**\n     * Represents a turtle egg within Minecraft.\n     */\n    static readonly 'turtleEgg': BlockType;\n    /**\n     * Represents a set of twisting vines within Minecraft.\n     */\n    static readonly 'twistingVines': BlockType;\n    /**\n     * Represents an underwater torch within Minecraft.\n     */\n    static readonly 'underwaterTorch': BlockType;\n    /**\n     * Represents an undyed shulker box within Minecraft.\n     */\n    static readonly 'undyedShulkerBox': BlockType;\n    /**\n     * Represents an unknown block within Minecraft.\n     */\n    static readonly 'unknown': BlockType;\n    /**\n     * Represents an unlit redstone torch within Minecraft.\n     */\n    static readonly 'unlitRedstoneTorch': BlockType;\n    /**\n     * Represents an unpowered comparator within Minecraft.\n     */\n    static readonly 'unpoweredComparator': BlockType;\n    /**\n     * Represents an unpowered repeater within Minecraft.\n     */\n    static readonly 'unpoweredRepeater': BlockType;\n    static readonly 'verdantFroglight': BlockType;\n    /**\n     * Represents a set of vines within Minecraft.\n     */\n    static readonly 'vine': BlockType;\n    /**\n     * Represents a wall banner within Minecraft.\n     */\n    static readonly 'wallBanner': BlockType;\n    /**\n     * Represents a wall sign within Minecraft.\n     */\n    static readonly 'wallSign': BlockType;\n    /**\n     * Represents a warped button within Minecraft.\n     */\n    static readonly 'warpedButton': BlockType;\n    /**\n     * Represents a warped door within Minecraft.\n     */\n    static readonly 'warpedDoor': BlockType;\n    /**\n     * Represents a double slab of warped within Minecraft.\n     */\n    static readonly 'warpedDoubleSlab': BlockType;\n    /**\n     * Represents a warped fence within Minecraft.\n     */\n    static readonly 'warpedFence': BlockType;\n    /**\n     * Represents a warped fence gate within Minecraft.\n     */\n    static readonly 'warpedFenceGate': BlockType;\n    /**\n     * Represents warped fungus within Minecraft.\n     */\n    static readonly 'warpedFungus': BlockType;\n    /**\n     * Represents warped hyphae within Minecraft.\n     */\n    static readonly 'warpedHyphae': BlockType;\n    /**\n     * Represents warped nylium within Minecraft.\n     */\n    static readonly 'warpedNylium': BlockType;\n    /**\n     * Represents warped planks within Minecraft.\n     */\n    static readonly 'warpedPlanks': BlockType;\n    /**\n     * Represents a warped pressure plate within Minecraft.\n     */\n    static readonly 'warpedPressurePlate': BlockType;\n    /**\n     * Represents a set of warped roots within Minecraft.\n     */\n    static readonly 'warpedRoots': BlockType;\n    /**\n     * Represents a slab of warped material within Minecraft.\n     */\n    static readonly 'warpedSlab': BlockType;\n    /**\n     * Represents a set of warped stairs within Minecraft.\n     */\n    static readonly 'warpedStairs': BlockType;\n    /**\n     * Represents a warped standing sign within Minecraft.\n     */\n    static readonly 'warpedStandingSign': BlockType;\n    /**\n     * Represents a warped stem within Minecraft.\n     */\n    static readonly 'warpedStem': BlockType;\n    /**\n     * Represents a warped trapdoor within Minecraft.\n     */\n    static readonly 'warpedTrapdoor': BlockType;\n    /**\n     * Represents a warped wall sign within Minecraft.\n     */\n    static readonly 'warpedWallSign': BlockType;\n    /**\n     * Represents a warped wart block within Minecraft.\n     */\n    static readonly 'warpedWartBlock': BlockType;\n    /**\n     * Represents water within Minecraft.\n     */\n    static readonly 'water': BlockType;\n    /**\n     * Represents a water lily within Minecraft.\n     */\n    static readonly 'waterlily': BlockType;\n    /**\n     * Represents a block of waxed copper within Minecraft.\n     */\n    static readonly 'waxedCopper': BlockType;\n    /**\n     * Represents a block of waxed cut copper within Minecraft.\n     */\n    static readonly 'waxedCutCopper': BlockType;\n    /**\n     * Represents a slab of waxed cut copper within Minecraft.\n     */\n    static readonly 'waxedCutCopperSlab': BlockType;\n    /**\n     * Represents a set of waxed cut copper stairs within\n     * Minecraft.\n     */\n    static readonly 'waxedCutCopperStairs': BlockType;\n    /**\n     * Represents a double slab of waxed cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedDoubleCutCopperSlab': BlockType;\n    /**\n     * Represents a block of waxed exposed copper within Minecraft.\n     */\n    static readonly 'waxedExposedCopper': BlockType;\n    /**\n     * Represents a block of waxed exposed cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedExposedCutCopper': BlockType;\n    /**\n     * Represents a slab of waxed exposed cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedExposedCutCopperSlab': BlockType;\n    /**\n     * Represents a set of waxed exposed cut copper stairs within\n     * Minecraft.\n     */\n    static readonly 'waxedExposedCutCopperStairs': BlockType;\n    /**\n     * Represents a double slab of waxed exposed cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedExposedDoubleCutCopperSlab': BlockType;\n    /**\n     * Represents a block of waxed oxidized copper within\n     * Minecraft.\n     */\n    static readonly 'waxedOxidizedCopper': BlockType;\n    /**\n     * Represents a block of waxed oxidized cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedOxidizedCutCopper': BlockType;\n    /**\n     * Represents a slab of waxed oxidized cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedOxidizedCutCopperSlab': BlockType;\n    /**\n     * Represents a set of waxed oxidized cut copper stairs within\n     * Minecraft.\n     */\n    static readonly 'waxedOxidizedCutCopperStairs': BlockType;\n    /**\n     * Represents a double slab of waxed oxidized cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedOxidizedDoubleCutCopperSlab': BlockType;\n    /**\n     * Represents a block of waxed weathered copper within\n     * Minecraft.\n     */\n    static readonly 'waxedWeatheredCopper': BlockType;\n    /**\n     * Represents a block of waxed weathered cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedWeatheredCutCopper': BlockType;\n    /**\n     * Represents a slab of waxed weathered cut copper within\n     * Minecraft.\n     */\n    static readonly 'waxedWeatheredCutCopperSlab': BlockType;\n    /**\n     * Represents a set of waxed weathered cut copper stairs within\n     * Minecraft.\n     */\n    static readonly 'waxedWeatheredCutCopperStairs': BlockType;\n    /**\n     * Represents a double slab of waxed weathered cut copper\n     * within Minecraft.\n     */\n    static readonly 'waxedWeatheredDoubleCutCopperSlab': BlockType;\n    /**\n     * Represents a block of weathered copper within Minecraft.\n     */\n    static readonly 'weatheredCopper': BlockType;\n    /**\n     * Represents a block of weathered cut copper within Minecraft.\n     */\n    static readonly 'weatheredCutCopper': BlockType;\n    /**\n     * Represents a slab of weathered cut copper within Minecraft.\n     */\n    static readonly 'weatheredCutCopperSlab': BlockType;\n    /**\n     * Represents a set of weathered cut copper stairs within\n     * Minecraft.\n     */\n    static readonly 'weatheredCutCopperStairs': BlockType;\n    /**\n     * Represents a double slab of weathered cut copper within\n     * Minecraft.\n     */\n    static readonly 'weatheredDoubleCutCopperSlab': BlockType;\n    /**\n     * Represents a web within Minecraft.\n     */\n    static readonly 'web': BlockType;\n    /**\n     * Represents a set of weeping vines within Minecraft.\n     */\n    static readonly 'weepingVines': BlockType;\n    /**\n     * Represents wheat within Minecraft.\n     */\n    static readonly 'wheat': BlockType;\n    /**\n     * Represents a white candle within Minecraft.\n     */\n    static readonly 'whiteCandle': BlockType;\n    /**\n     * Represents a white candle cake within Minecraft.\n     */\n    static readonly 'whiteCandleCake': BlockType;\n    /**\n     * Represents a block of white glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'whiteGlazedTerracotta': BlockType;\n    /**\n     * Represents a wither rose within Minecraft.\n     */\n    static readonly 'witherRose': BlockType;\n    /**\n     * Represents a block of wood within Minecraft.\n     */\n    static readonly 'wood': BlockType;\n    /**\n     * Represents a wooden button within Minecraft.\n     */\n    static readonly 'woodenButton': BlockType;\n    /**\n     * Represents a wooden door within Minecraft.\n     */\n    static readonly 'woodenDoor': BlockType;\n    /**\n     * Represents a wooden pressure plate within Minecraft.\n     */\n    static readonly 'woodenPressurePlate': BlockType;\n    /**\n     * Represents a wooden slab within Minecraft.\n     */\n    static readonly 'woodenSlab': BlockType;\n    /**\n     * Represents wool within Minecraft.\n     */\n    static readonly 'wool': BlockType;\n    /**\n     * Represents a yellow candle within Minecraft.\n     */\n    static readonly 'yellowCandle': BlockType;\n    /**\n     * Represents a yellow candle cake within Minecraft.\n     */\n    static readonly 'yellowCandleCake': BlockType;\n    /**\n     * Represents a yellow flower within Minecraft.\n     */\n    static readonly 'yellowFlower': BlockType;\n    /**\n     * Represents a yellow block of glazed terracotta within\n     * Minecraft.\n     */\n    static readonly 'yellowGlazedTerracotta': BlockType;\n    static get(typeName: string): BlockType;\n    /**\n     * @remarks\n     * Returns an array of all block types within Minecraft.\n     */\n    static getAllBlockTypes(): BlockType[];\n    protected constructor();\n}\n/**\n * A collection of default Minecraft dimension types.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class MinecraftDimensionTypes {\n    /**\n     * The Nether is a collection of biomes separate from the\n     * Overworld, including Soul Sand Valleys and Crimson forests.\n     * Nether fortresses contain exclusive resources. Mobs such as\n     * Blaze, Hoglins, Piglins, and Ghasts congregate here.\n     */\n    static readonly 'nether' = 'minecraft:nether';\n    /**\n     * The overworld is a collection of biomes, including forests,\n     * plains, jungles, mountains, deserts, taiga, and more. This\n     * is the default starter dimension for Minecraft. Mobs such as\n     * Axolotl, Cows, Creepers, and Zombies congregate here.\n     */\n    static readonly 'overworld' = 'minecraft:overworld';\n    /**\n     * The End is separate from the Overworld and the Nether and is\n     * generated whenever you create an End portal. Here, a giant\n     * center island is surrounded by several smaller areas and\n     * islands. You can find Endermen here. End midlands are larger\n     * areas that transition you from the center to the outer edges\n     * of the End. They contain Shulkers, Endermen, End gateway\n     * portals, and End cities. End gateway portals are commonly\n     * found at the outermost edge of the void. You usually find\n     * End barrens toward the edges of the main areas or land in\n     * the End.\n     */\n    static readonly 'theEnd' = 'minecraft:the_end';\n    protected constructor();\n}\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class MinecraftEffectTypes {\n    static readonly 'absorption': EffectType;\n    static readonly 'badOmen': EffectType;\n    static readonly 'blindness': EffectType;\n    static readonly 'conduitPower': EffectType;\n    static readonly 'darkness': EffectType;\n    static readonly 'empty': EffectType;\n    static readonly 'fatalPoison': EffectType;\n    static readonly 'fireResistance': EffectType;\n    static readonly 'haste': EffectType;\n    static readonly 'healthBoost': EffectType;\n    static readonly 'hunger': EffectType;\n    static readonly 'instantDamage': EffectType;\n    static readonly 'instantHealth': EffectType;\n    static readonly 'invisibility': EffectType;\n    static readonly 'jumpBoost': EffectType;\n    static readonly 'levitation': EffectType;\n    static readonly 'miningFatigue': EffectType;\n    static readonly 'nausea': EffectType;\n    static readonly 'nightVision': EffectType;\n    static readonly 'poison': EffectType;\n    static readonly 'regeneration': EffectType;\n    static readonly 'resistance': EffectType;\n    static readonly 'saturation': EffectType;\n    static readonly 'slowFalling': EffectType;\n    static readonly 'slowness': EffectType;\n    static readonly 'speed': EffectType;\n    static readonly 'strength': EffectType;\n    static readonly 'villageHero': EffectType;\n    static readonly 'waterBreathing': EffectType;\n    static readonly 'weakness': EffectType;\n    static readonly 'wither': EffectType;\n    protected constructor();\n}\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class MinecraftEnchantmentTypes {\n    static readonly 'aquaAffinity': EnchantmentType;\n    static readonly 'baneOfArthropods': EnchantmentType;\n    static readonly 'binding': EnchantmentType;\n    static readonly 'blastProtection': EnchantmentType;\n    static readonly 'channeling': EnchantmentType;\n    static readonly 'depthStrider': EnchantmentType;\n    static readonly 'efficiency': EnchantmentType;\n    static readonly 'featherFalling': EnchantmentType;\n    static readonly 'fireAspect': EnchantmentType;\n    static readonly 'fireProtection': EnchantmentType;\n    static readonly 'flame': EnchantmentType;\n    static readonly 'fortune': EnchantmentType;\n    static readonly 'frostWalker': EnchantmentType;\n    static readonly 'impaling': EnchantmentType;\n    static readonly 'infinity': EnchantmentType;\n    static readonly 'knockback': EnchantmentType;\n    static readonly 'looting': EnchantmentType;\n    static readonly 'loyalty': EnchantmentType;\n    static readonly 'luckOfTheSea': EnchantmentType;\n    static readonly 'lure': EnchantmentType;\n    static readonly 'mending': EnchantmentType;\n    static readonly 'multishot': EnchantmentType;\n    static readonly 'piercing': EnchantmentType;\n    static readonly 'power': EnchantmentType;\n    static readonly 'projectileProtection': EnchantmentType;\n    static readonly 'protection': EnchantmentType;\n    static readonly 'punch': EnchantmentType;\n    static readonly 'quickCharge': EnchantmentType;\n    static readonly 'respiration': EnchantmentType;\n    static readonly 'riptide': EnchantmentType;\n    static readonly 'sharpness': EnchantmentType;\n    static readonly 'silkTouch': EnchantmentType;\n    static readonly 'smite': EnchantmentType;\n    static readonly 'soulSpeed': EnchantmentType;\n    static readonly 'swiftSneak': EnchantmentType;\n    static readonly 'thorns': EnchantmentType;\n    static readonly 'unbreaking': EnchantmentType;\n    static readonly 'vanishing': EnchantmentType;\n    protected constructor();\n}\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class MinecraftEntityTypes {\n    static readonly 'agent': EntityType;\n    static readonly 'allay': EntityType;\n    static readonly 'areaEffectCloud': EntityType;\n    static readonly 'armorStand': EntityType;\n    static readonly 'arrow': EntityType;\n    static readonly 'axolotl': EntityType;\n    static readonly 'bat': EntityType;\n    static readonly 'bee': EntityType;\n    static readonly 'blaze': EntityType;\n    static readonly 'boat': EntityType;\n    static readonly 'cat': EntityType;\n    static readonly 'caveSpider': EntityType;\n    static readonly 'chestBoat': EntityType;\n    static readonly 'chestMinecart': EntityType;\n    static readonly 'chicken': EntityType;\n    static readonly 'cod': EntityType;\n    static readonly 'commandBlockMinecart': EntityType;\n    static readonly 'cow': EntityType;\n    static readonly 'creeper': EntityType;\n    static readonly 'dolphin': EntityType;\n    static readonly 'donkey': EntityType;\n    static readonly 'dragonFireball': EntityType;\n    static readonly 'drowned': EntityType;\n    static readonly 'egg': EntityType;\n    static readonly 'elderGuardian': EntityType;\n    static readonly 'enderCrystal': EntityType;\n    static readonly 'enderDragon': EntityType;\n    static readonly 'enderman': EntityType;\n    static readonly 'endermite': EntityType;\n    static readonly 'enderPearl': EntityType;\n    static readonly 'evocationIllager': EntityType;\n    static readonly 'eyeOfEnderSignal': EntityType;\n    static readonly 'fireball': EntityType;\n    static readonly 'fireworksRocket': EntityType;\n    static readonly 'fishingHook': EntityType;\n    static readonly 'fox': EntityType;\n    static readonly 'frog': EntityType;\n    static readonly 'ghast': EntityType;\n    static readonly 'glowSquid': EntityType;\n    static readonly 'goat': EntityType;\n    static readonly 'guardian': EntityType;\n    static readonly 'hoglin': EntityType;\n    static readonly 'hopperMinecart': EntityType;\n    static readonly 'horse': EntityType;\n    static readonly 'husk': EntityType;\n    static readonly 'ironGolem': EntityType;\n    static readonly 'lightningBolt': EntityType;\n    static readonly 'lingeringPotion': EntityType;\n    static readonly 'llama': EntityType;\n    static readonly 'llamaSpit': EntityType;\n    static readonly 'magmaCube': EntityType;\n    static readonly 'minecart': EntityType;\n    static readonly 'mooshroom': EntityType;\n    static readonly 'mule': EntityType;\n    static readonly 'npc': EntityType;\n    static readonly 'ocelot': EntityType;\n    static readonly 'panda': EntityType;\n    static readonly 'parrot': EntityType;\n    static readonly 'phantom': EntityType;\n    static readonly 'pig': EntityType;\n    static readonly 'piglin': EntityType;\n    static readonly 'piglinBrute': EntityType;\n    static readonly 'pillager': EntityType;\n    static readonly 'player': EntityType;\n    static readonly 'polarBear': EntityType;\n    static readonly 'pufferfish': EntityType;\n    static readonly 'rabbit': EntityType;\n    static readonly 'ravager': EntityType;\n    static readonly 'salmon': EntityType;\n    static readonly 'sheep': EntityType;\n    static readonly 'shulker': EntityType;\n    static readonly 'shulkerBullet': EntityType;\n    static readonly 'silverfish': EntityType;\n    static readonly 'skeleton': EntityType;\n    static readonly 'skeletonHorse': EntityType;\n    static readonly 'slime': EntityType;\n    static readonly 'smallFireball': EntityType;\n    static readonly 'snowball': EntityType;\n    static readonly 'snowGolem': EntityType;\n    static readonly 'spider': EntityType;\n    static readonly 'splashPotion': EntityType;\n    static readonly 'squid': EntityType;\n    static readonly 'stray': EntityType;\n    static readonly 'strider': EntityType;\n    static readonly 'tadpole': EntityType;\n    static readonly 'thrownTrident': EntityType;\n    static readonly 'tnt': EntityType;\n    static readonly 'tntMinecart': EntityType;\n    static readonly 'tripodCamera': EntityType;\n    static readonly 'tropicalfish': EntityType;\n    static readonly 'turtle': EntityType;\n    static readonly 'vex': EntityType;\n    static readonly 'villager': EntityType;\n    static readonly 'villagerV2': EntityType;\n    static readonly 'vindicator': EntityType;\n    static readonly 'wanderingTrader': EntityType;\n    static readonly 'warden': EntityType;\n    static readonly 'witch': EntityType;\n    static readonly 'wither': EntityType;\n    static readonly 'witherSkeleton': EntityType;\n    static readonly 'witherSkull': EntityType;\n    static readonly 'witherSkullDangerous': EntityType;\n    static readonly 'wolf': EntityType;\n    static readonly 'xpBottle': EntityType;\n    static readonly 'xpOrb': EntityType;\n    static readonly 'zoglin': EntityType;\n    static readonly 'zombie': EntityType;\n    static readonly 'zombieHorse': EntityType;\n    static readonly 'zombiePigman': EntityType;\n    static readonly 'zombieVillager': EntityType;\n    static readonly 'zombieVillagerV2': EntityType;\n    protected constructor();\n}\n/**\n * Contains definitions of standard Minecraft and Minecraft\n * Education Edition block types.\n */\n// tslint:disable-next-line:no-unnecessary-class\ndeclare class MinecraftItemTypes {\n    static readonly 'acaciaBoat': ItemType;\n    /**\n     * Represents an item that can place an acacia button within\n     * Minecraft.\n     */\n    static readonly 'acaciaButton': ItemType;\n    static readonly 'acaciaChestBoat': ItemType;\n    /**\n     * Represents an item that can place an acacia door within\n     * Minecraft.\n     */\n    static readonly 'acaciaDoor': ItemType;\n    /**\n     * Represents an item that can place an acacia fence gate\n     * within Minecraft.\n     */\n    static readonly 'acaciaFenceGate': ItemType;\n    /**\n     * Represents an item that can place an acacia pressure plate\n     * within Minecraft.\n     */\n    static readonly 'acaciaPressurePlate': ItemType;\n    /**\n     * Represents an item that can place an acacia sign within\n     * Minecraft.\n     */\n    static readonly 'acaciaSign': ItemType;\n    /**\n     * Represents an item that can place a set of acacia stairs\n     * within Minecraft.\n     */\n    static readonly 'acaciaStairs': ItemType;\n    /**\n     * Represents an item that can place an acacia standing sign\n     * within Minecraft.\n     */\n    static readonly 'acaciaStandingSign': ItemType;\n    /**\n     * Represents an item that can place an acacia trapdoor within\n     * Minecraft.\n     */\n    static readonly 'acaciaTrapdoor': ItemType;\n    /**\n     * Represents an item that can place an acacia wall sign within\n     * Minecraft.\n     */\n    static readonly 'acaciaWallSign': ItemType;\n    /**\n     * Represents an item that can place an activator rail within\n     * Minecraft.\n     */\n    static readonly 'activatorRail': ItemType;\n    static readonly 'agentSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place an empty space (air)\n     * within Minecraft.\n     */\n    static readonly 'air': ItemType;\n    static readonly 'allaySpawnEgg': ItemType;\n    /**\n     * Represents an item that can place an allow block within\n     * Minecraft.\n     */\n    static readonly 'allow': ItemType;\n    /**\n     * Represents an item that can place an amethyst block within\n     * Minecraft.\n     */\n    static readonly 'amethystBlock': ItemType;\n    /**\n     * Represents an item that can place a cluster of amethyst\n     * within Minecraft.\n     */\n    static readonly 'amethystCluster': ItemType;\n    static readonly 'amethystShard': ItemType;\n    /**\n     * Represents an item that can place ancient debris within\n     * Minecraft.\n     */\n    static readonly 'ancientDebris': ItemType;\n    /**\n     * Represents an item that can place andesite stairs within\n     * Minecraft.\n     */\n    static readonly 'andesiteStairs': ItemType;\n    /**\n     * Represents an item that can place an anvil within Minecraft.\n     */\n    static readonly 'anvil': ItemType;\n    static readonly 'apple': ItemType;\n    static readonly 'armorStand': ItemType;\n    static readonly 'arrow': ItemType;\n    static readonly 'axolotlBucket': ItemType;\n    static readonly 'axolotlSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place an azalea flowering plant\n     * within Minecraft.\n     */\n    static readonly 'azalea': ItemType;\n    /**\n     * Represents an item that can place azalea leaves within\n     * Minecraft.\n     */\n    static readonly 'azaleaLeaves': ItemType;\n    /**\n     * Represents flowered azalea leaves within Minecraft.\n     */\n    static readonly 'azaleaLeavesFlowered': ItemType;\n    static readonly 'bakedPotato': ItemType;\n    static readonly 'balloon': ItemType;\n    /**\n     * Represents an item that can place a bamboo tree within\n     * Minecraft.\n     */\n    static readonly 'bamboo': ItemType;\n    /**\n     * Represents an item that can place a bamboo sapling within\n     * Minecraft.\n     */\n    static readonly 'bambooSapling': ItemType;\n    static readonly 'banner': ItemType;\n    static readonly 'bannerPattern': ItemType;\n    /**\n     * Represents an item that can place a barrel within Minecraft.\n     */\n    static readonly 'barrel': ItemType;\n    /**\n     * Represents an item that can place an invisible but logical\n     * barrier within Minecraft.\n     */\n    static readonly 'barrier': ItemType;\n    /**\n     * Represents an item that can place a basalt block within\n     * Minecraft.\n     */\n    static readonly 'basalt': ItemType;\n    static readonly 'batSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a beacon within Minecraft.\n     */\n    static readonly 'beacon': ItemType;\n    /**\n     * Represents an item that can place a bed within Minecraft.\n     */\n    static readonly 'bed': ItemType;\n    /**\n     * Represents an item that can place a bedrock block within\n     * Minecraft.\n     */\n    static readonly 'bedrock': ItemType;\n    static readonly 'beef': ItemType;\n    /**\n     * Represents an item that can place a beehive within\n     * Minecraft.\n     */\n    static readonly 'beehive': ItemType;\n    /**\n     * Represents an item that can place a bee nest within\n     * Minecraft.\n     */\n    static readonly 'beeNest': ItemType;\n    static readonly 'beeSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a beetroot vegetable\n     * within Minecraft.\n     */\n    static readonly 'beetroot': ItemType;\n    static readonly 'beetrootSeeds': ItemType;\n    static readonly 'beetrootSoup': ItemType;\n    /**\n     * Represents an item that can place a bell within Minecraft.\n     */\n    static readonly 'bell': ItemType;\n    /**\n     * Represents an item that can place a big dripleaf plant\n     * within Minecraft.\n     */\n    static readonly 'bigDripleaf': ItemType;\n    static readonly 'birchBoat': ItemType;\n    /**\n     * Represents an item that can place a birch button within\n     * Minecraft.\n     */\n    static readonly 'birchButton': ItemType;\n    static readonly 'birchChestBoat': ItemType;\n    /**\n     * Represents an item that can place a birch door within\n     * Minecraft.\n     */\n    static readonly 'birchDoor': ItemType;\n    /**\n     * Represents an item that can place a birch fence gate within\n     * Minecraft.\n     */\n    static readonly 'birchFenceGate': ItemType;\n    /**\n     * Represents an item that can place a birch pressure plate\n     * within Minecraft.\n     */\n    static readonly 'birchPressurePlate': ItemType;\n    /**\n     * Represents an item that can place a birch sign within\n     * Minecraft.\n     */\n    static readonly 'birchSign': ItemType;\n    /**\n     * Represents an item that can place a birch stairs block\n     * within Minecraft.\n     */\n    static readonly 'birchStairs': ItemType;\n    /**\n     * Represents an item that can place a birch standing sign\n     * within Minecraft.\n     */\n    static readonly 'birchStandingSign': ItemType;\n    /**\n     * Represents an item that can place a birch trapdoor within\n     * Minecraft.\n     */\n    static readonly 'birchTrapdoor': ItemType;\n    /**\n     * Represents an item that can place a birch wall sign within\n     * Minecraft.\n     */\n    static readonly 'birchWallSign': ItemType;\n    /**\n     * Represents an item that can place a black candle within\n     * Minecraft.\n     */\n    static readonly 'blackCandle': ItemType;\n    /**\n     * Represents an item that can place a black candle cake within\n     * Minecraft.\n     */\n    static readonly 'blackCandleCake': ItemType;\n    static readonly 'blackDye': ItemType;\n    /**\n     * Represents an item that can place a black glazed terracotta\n     * block within Minecraft.\n     */\n    static readonly 'blackGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a blackstone block within\n     * Minecraft.\n     */\n    static readonly 'blackstone': ItemType;\n    /**\n     * Represents an item that can place a blackstone double slab\n     * within Minecraft.\n     */\n    static readonly 'blackstoneDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a blackstone slab within\n     * Minecraft.\n     */\n    static readonly 'blackstoneSlab': ItemType;\n    /**\n     * Represents blackstone stairs within Minecraft.\n     */\n    static readonly 'blackstoneStairs': ItemType;\n    /**\n     * Represents an item that can place a blackstone wall within\n     * Minecraft.\n     */\n    static readonly 'blackstoneWall': ItemType;\n    /**\n     * Represents an item that can place a blast furnace within\n     * Minecraft.\n     */\n    static readonly 'blastFurnace': ItemType;\n    static readonly 'blazePowder': ItemType;\n    static readonly 'blazeRod': ItemType;\n    static readonly 'blazeSpawnEgg': ItemType;\n    static readonly 'bleach': ItemType;\n    /**\n     * Represents an item that can place a blue candle within\n     * Minecraft.\n     */\n    static readonly 'blueCandle': ItemType;\n    /**\n     * Represents an item that can place a blue candle cake within\n     * Minecraft.\n     */\n    static readonly 'blueCandleCake': ItemType;\n    static readonly 'blueDye': ItemType;\n    /**\n     * Represents an item that can place a blue glazed terracotta\n     * block within Minecraft.\n     */\n    static readonly 'blueGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a blue ice block within\n     * Minecraft.\n     */\n    static readonly 'blueIce': ItemType;\n    static readonly 'boat': ItemType;\n    static readonly 'bone': ItemType;\n    /**\n     * Represents an item that can place a bone block within\n     * Minecraft.\n     */\n    static readonly 'boneBlock': ItemType;\n    static readonly 'boneMeal': ItemType;\n    static readonly 'book': ItemType;\n    /**\n     * Represents an item that can place an unbreakable border\n     * block within Minecraft.\n     */\n    static readonly 'bookshelf': ItemType;\n    /**\n     * Represents an item that can place a border block within\n     * Minecraft.\n     */\n    static readonly 'borderBlock': ItemType;\n    static readonly 'bordureIndentedBannerPattern': ItemType;\n    static readonly 'bow': ItemType;\n    static readonly 'bowl': ItemType;\n    static readonly 'bread': ItemType;\n    /**\n     * Represents an item that can place a brewing stand within\n     * Minecraft.\n     */\n    static readonly 'brewingStand': ItemType;\n    static readonly 'brick': ItemType;\n    /**\n     * Represents an item that can place a block of brick within\n     * Minecraft.\n     */\n    static readonly 'brickBlock': ItemType;\n    /**\n     * Represents brick stairs within Minecraft.\n     */\n    static readonly 'brickStairs': ItemType;\n    /**\n     * Represents an item that can place a brown candle within\n     * Minecraft.\n     */\n    static readonly 'brownCandle': ItemType;\n    /**\n     * Represents an item that can place a brown candle cake within\n     * Minecraft.\n     */\n    static readonly 'brownCandleCake': ItemType;\n    static readonly 'brownDye': ItemType;\n    /**\n     * Represents an item that can place a brown glazed terracotta\n     * block within Minecraft.\n     */\n    static readonly 'brownGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a brown mushroom within\n     * Minecraft.\n     */\n    static readonly 'brownMushroom': ItemType;\n    /**\n     * Represents an item that can place a block of brown mushroom\n     * within Minecraft.\n     */\n    static readonly 'brownMushroomBlock': ItemType;\n    /**\n     * Represents an item that can place a column of bubbles within\n     * Minecraft.\n     */\n    static readonly 'bubbleColumn': ItemType;\n    static readonly 'bucket': ItemType;\n    /**\n     * Represents an item that can place a block of budding\n     * amethyst within Minecraft.\n     */\n    static readonly 'buddingAmethyst': ItemType;\n    /**\n     * Represents an item that can place a cactus within Minecraft.\n     */\n    static readonly 'cactus': ItemType;\n    /**\n     * Represents an item that can place a cake within Minecraft.\n     */\n    static readonly 'cake': ItemType;\n    /**\n     * Represents an item that can place a calcite block within\n     * Minecraft.\n     */\n    static readonly 'calcite': ItemType;\n    /**\n     * Represents an item that can place a camera within Minecraft\n     * Education Edition. It is not available in Minecraft Bedrock\n     * Edition.\n     */\n    static readonly 'camera': ItemType;\n    /**\n     * Represents an item that can place a campfire within\n     * Minecraft.\n     */\n    static readonly 'campfire': ItemType;\n    /**\n     * Represents an item that can place a candle within Minecraft.\n     */\n    static readonly 'candle': ItemType;\n    /**\n     * Represents an item that can place a cake with candles within\n     * Minecraft.\n     */\n    static readonly 'candleCake': ItemType;\n    /**\n     * Represents an item that can place a carpet within Minecraft.\n     */\n    static readonly 'carpet': ItemType;\n    static readonly 'carrot': ItemType;\n    static readonly 'carrotOnAStick': ItemType;\n    /**\n     * Represents carrots within Minecraft.\n     */\n    static readonly 'carrots': ItemType;\n    /**\n     * Represents an item that can place a cartography table block\n     * within Minecraft.\n     */\n    static readonly 'cartographyTable': ItemType;\n    /**\n     * Represents an item that can place a carved pumpkin within\n     * Minecraft.\n     */\n    static readonly 'carvedPumpkin': ItemType;\n    static readonly 'catSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a cauldron within\n     * Minecraft.\n     */\n    static readonly 'cauldron': ItemType;\n    static readonly 'caveSpiderSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a set of cave vines within\n     * Minecraft.\n     */\n    static readonly 'caveVines': ItemType;\n    /**\n     * Represents the body of a set of cave vines with berries\n     * within Minecraft.\n     */\n    static readonly 'caveVinesBodyWithBerries': ItemType;\n    /**\n     * Represents the head of a set of cave vines with berries\n     * within Minecraft.\n     */\n    static readonly 'caveVinesHeadWithBerries': ItemType;\n    /**\n     * Represents an item that can place a metallic chain within\n     * Minecraft.\n     */\n    static readonly 'chain': ItemType;\n    /**\n     * Represents an item that can place a block that gives off\n     * heat but not light, within Minecraft Education Edition or\n     * Bedrock Edition with Education features.\n     */\n    static readonly 'chainCommandBlock': ItemType;\n    static readonly 'chainmailBoots': ItemType;\n    static readonly 'chainmailChestplate': ItemType;\n    static readonly 'chainmailHelmet': ItemType;\n    static readonly 'chainmailLeggings': ItemType;\n    static readonly 'charcoal': ItemType;\n    /**\n     * Represents an item that can place a chemical heat block\n     * within Minecraft.\n     */\n    static readonly 'chemicalHeat': ItemType;\n    /**\n     * Represents an item that can place a chemistry table within\n     * Minecraft Education experiences.\n     */\n    static readonly 'chemistryTable': ItemType;\n    /**\n     * Represents an item that can place a chest within Minecraft.\n     */\n    static readonly 'chest': ItemType;\n    static readonly 'chestBoat': ItemType;\n    static readonly 'chestMinecart': ItemType;\n    static readonly 'chicken': ItemType;\n    static readonly 'chickenSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a set of chiseled\n     * deepslate within Minecraft.\n     */\n    static readonly 'chiseledDeepslate': ItemType;\n    /**\n     * Represents an item that can place a block of chiseled nether\n     * bricks within Minecraft.\n     */\n    static readonly 'chiseledNetherBricks': ItemType;\n    /**\n     * Represents an item that can place a block of chiseled\n     * polished blackstone within Minecraft.\n     */\n    static readonly 'chiseledPolishedBlackstone': ItemType;\n    /**\n     * Represents an item that can place a chorus flower within\n     * Minecraft.\n     */\n    static readonly 'chorusFlower': ItemType;\n    static readonly 'chorusFruit': ItemType;\n    /**\n     * Represents an item that can place a chorus plant within\n     * Minecraft.\n     */\n    static readonly 'chorusPlant': ItemType;\n    /**\n     * Represents an item that can place a block of clay within\n     * Minecraft.\n     */\n    static readonly 'clay': ItemType;\n    static readonly 'clayBall': ItemType;\n    static readonly 'clientRequestPlaceholderBlock': ItemType;\n    static readonly 'clock': ItemType;\n    static readonly 'coal': ItemType;\n    /**\n     * Represents an item that can place a block of solid coal\n     * within Minecraft.\n     */\n    static readonly 'coalBlock': ItemType;\n    /**\n     * Represents an item that can place a block with embedded coal\n     * ore within Minecraft.\n     */\n    static readonly 'coalOre': ItemType;\n    /**\n     * Represents an item that can place a block of cobbled\n     * deepslate within Minecraft.\n     */\n    static readonly 'cobbledDeepslate': ItemType;\n    /**\n     * Represents an item that can place a double slab of cobbled\n     * deepslate within Minecraft.\n     */\n    static readonly 'cobbledDeepslateDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a slab of deepslate within\n     * Minecraft.\n     */\n    static readonly 'cobbledDeepslateSlab': ItemType;\n    /**\n     * Represents cobbled deepslate stairs within Minecraft.\n     */\n    static readonly 'cobbledDeepslateStairs': ItemType;\n    /**\n     * Represents an item that can place a cobbled deepslate wall\n     * within Minecraft.\n     */\n    static readonly 'cobbledDeepslateWall': ItemType;\n    /**\n     * Represents an item that can place a block of cobblestone\n     * within Minecraft.\n     */\n    static readonly 'cobblestone': ItemType;\n    /**\n     * Represents an item that can place a wall of cobblestone\n     * within Minecraft.\n     */\n    static readonly 'cobblestoneWall': ItemType;\n    /**\n     * Represents an item that can place a set of cocoa beans\n     * (typically on a tree) within Minecraft.\n     */\n    static readonly 'cocoa': ItemType;\n    static readonly 'cocoaBeans': ItemType;\n    static readonly 'cod': ItemType;\n    static readonly 'codBucket': ItemType;\n    static readonly 'codSpawnEgg': ItemType;\n    /**\n     * Represents blue/purple torches within Minecraft.\n     */\n    static readonly 'coloredTorchBp': ItemType;\n    /**\n     * Represents red/green torches within Minecraft.\n     */\n    static readonly 'coloredTorchRg': ItemType;\n    /**\n     * Represents an item that can place a block that can run\n     * commands within Minecraft.\n     */\n    static readonly 'commandBlock': ItemType;\n    static readonly 'commandBlockMinecart': ItemType;\n    static readonly 'comparator': ItemType;\n    static readonly 'compass': ItemType;\n    /**\n     * Represents an item that can place a composter block within\n     * Minecraft.\n     */\n    static readonly 'composter': ItemType;\n    static readonly 'compound': ItemType;\n    /**\n     * Represents an item that can place a block of concrete powder\n     * within Minecraft.\n     */\n    static readonly 'concrete': ItemType;\n    static readonly 'concretePowder': ItemType;\n    /**\n     * Represents an item that can place a conduit block within\n     * Minecraft.\n     */\n    static readonly 'conduit': ItemType;\n    static readonly 'cookedBeef': ItemType;\n    static readonly 'cookedChicken': ItemType;\n    static readonly 'cookedCod': ItemType;\n    static readonly 'cookedMutton': ItemType;\n    static readonly 'cookedPorkchop': ItemType;\n    static readonly 'cookedRabbit': ItemType;\n    static readonly 'cookedSalmon': ItemType;\n    static readonly 'cookie': ItemType;\n    /**\n     * Represents an item that can place a solid block of copper\n     * within Minecraft.\n     */\n    static readonly 'copperBlock': ItemType;\n    static readonly 'copperIngot': ItemType;\n    /**\n     * Represents an item that can place a block with embedded\n     * copper ore within Minecraft.\n     */\n    static readonly 'copperOre': ItemType;\n    /**\n     * Represents coral within Minecraft.\n     */\n    static readonly 'coral': ItemType;\n    /**\n     * Represents an item that can place a solid block of coral\n     * within Minecraft.\n     */\n    static readonly 'coralBlock': ItemType;\n    /**\n     * Represents an item that can place a fan formation of coral\n     * within Minecraft.\n     */\n    static readonly 'coralFan': ItemType;\n    /**\n     * Represents an item that can place a fan formation of dead\n     * coral within Minecraft.\n     */\n    static readonly 'coralFanDead': ItemType;\n    /**\n     * Represents an item that can place a hanging fan formation of\n     * coral within Minecraft.\n     */\n    static readonly 'coralFanHang': ItemType;\n    /**\n     * Represents an item that can place an alternate hanging fan\n     * formation of coral (#2) within Minecraft.\n     */\n    static readonly 'coralFanHang2': ItemType;\n    /**\n     * Represents an item that can place an alternate hanging fan\n     * formation of coral (#3) within Minecraft.\n     */\n    static readonly 'coralFanHang3': ItemType;\n    static readonly 'cowSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a block of cracked\n     * deepslate bricks within Minecraft.\n     */\n    static readonly 'crackedDeepslateBricks': ItemType;\n    /**\n     * Represents tiles of cracked deepslate within Minecraft.\n     */\n    static readonly 'crackedDeepslateTiles': ItemType;\n    /**\n     * Represents an item that can place a block of cracked nether\n     * bricks within Minecraft.\n     */\n    static readonly 'crackedNetherBricks': ItemType;\n    /**\n     * Represents an item that can place a block of cracked and\n     * polished blackstone bricks within Minecraft.\n     */\n    static readonly 'crackedPolishedBlackstoneBricks': ItemType;\n    /**\n     * Represents an item that can place a crafting table within\n     * Minecraft.\n     */\n    static readonly 'craftingTable': ItemType;\n    static readonly 'creeperBannerPattern': ItemType;\n    static readonly 'creeperSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a crimson button within\n     * Minecraft.\n     */\n    static readonly 'crimsonButton': ItemType;\n    /**\n     * Represents an item that can place a crimson door within\n     * Minecraft.\n     */\n    static readonly 'crimsonDoor': ItemType;\n    /**\n     * Represents an item that can place a crimson double slab\n     * within Minecraft.\n     */\n    static readonly 'crimsonDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a crimson fence within\n     * Minecraft.\n     */\n    static readonly 'crimsonFence': ItemType;\n    /**\n     * Represents an item that can place a crimson fence gate\n     * within Minecraft.\n     */\n    static readonly 'crimsonFenceGate': ItemType;\n    /**\n     * Represents an item that can place a crimson fungus within\n     * Minecraft.\n     */\n    static readonly 'crimsonFungus': ItemType;\n    /**\n     * Represents crimson hyphae within Minecraft.\n     */\n    static readonly 'crimsonHyphae': ItemType;\n    /**\n     * Represents crimson nylium within Minecraft.\n     */\n    static readonly 'crimsonNylium': ItemType;\n    /**\n     * Represents an item that can place a set of crimson planks\n     * within Minecraft.\n     */\n    static readonly 'crimsonPlanks': ItemType;\n    /**\n     * Represents an item that can place a crimson pressure plate\n     * within Minecraft.\n     */\n    static readonly 'crimsonPressurePlate': ItemType;\n    /**\n     * Represents an item that can place a set of crimson roots\n     * within Minecraft.\n     */\n    static readonly 'crimsonRoots': ItemType;\n    static readonly 'crimsonSign': ItemType;\n    /**\n     * Represents an item that can place a crimson slab within\n     * Minecraft.\n     */\n    static readonly 'crimsonSlab': ItemType;\n    /**\n     * Represents an item that can place a set of crimson stairs\n     * within Minecraft.\n     */\n    static readonly 'crimsonStairs': ItemType;\n    /**\n     * Represents an item that can place a crimson standing sign\n     * within Minecraft.\n     */\n    static readonly 'crimsonStandingSign': ItemType;\n    /**\n     * Represents an item that can place a crimson stem within\n     * Minecraft.\n     */\n    static readonly 'crimsonStem': ItemType;\n    /**\n     * Represents an item that can place a crimson trapdoor within\n     * Minecraft.\n     */\n    static readonly 'crimsonTrapdoor': ItemType;\n    /**\n     * Represents an item that can place a crimson wall sign within\n     * Minecraft.\n     */\n    static readonly 'crimsonWallSign': ItemType;\n    static readonly 'crossbow': ItemType;\n    /**\n     * Represents crying obsidian within Minecraft.\n     */\n    static readonly 'cryingObsidian': ItemType;\n    /**\n     * Represents an item that can place a cut copper block within\n     * Minecraft.\n     */\n    static readonly 'cutCopper': ItemType;\n    /**\n     * Represents an item that can place a cut copper slab within\n     * Minecraft.\n     */\n    static readonly 'cutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a set of cut copper stairs\n     * within Minecraft.\n     */\n    static readonly 'cutCopperStairs': ItemType;\n    /**\n     * Represents an item that can place a cyan-colored candle\n     * within Minecraft.\n     */\n    static readonly 'cyanCandle': ItemType;\n    /**\n     * Represents an item that can place a cake with a cyan-colored\n     * candle within Minecraft.\n     */\n    static readonly 'cyanCandleCake': ItemType;\n    static readonly 'cyanDye': ItemType;\n    /**\n     * Represents an item that can place a block of cyan-colored\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'cyanGlazedTerracotta': ItemType;\n    static readonly 'darkOakBoat': ItemType;\n    /**\n     * Represents an item that can place a dark oak button within\n     * Minecraft.\n     */\n    static readonly 'darkOakButton': ItemType;\n    static readonly 'darkOakChestBoat': ItemType;\n    /**\n     * Represents an item that can place a dark oak door within\n     * Minecraft.\n     */\n    static readonly 'darkOakDoor': ItemType;\n    /**\n     * Represents an item that can place a dark oak fence gate\n     * within Minecraft.\n     */\n    static readonly 'darkOakFenceGate': ItemType;\n    /**\n     * Represents an item that can place a dark oak pressure plate\n     * within Minecraft.\n     */\n    static readonly 'darkOakPressurePlate': ItemType;\n    /**\n     * Represents an item that can place a dark oak sign within\n     * Minecraft.\n     */\n    static readonly 'darkOakSign': ItemType;\n    /**\n     * Represents an item that can place a set of dark oak stairs\n     * within Minecraft.\n     */\n    static readonly 'darkOakStairs': ItemType;\n    /**\n     * Represents an item that can place a dark oak standing sign\n     * within Minecraft.\n     */\n    static readonly 'darkoakStandingSign': ItemType;\n    /**\n     * Represents an item that can place a dark oak trapdoor within\n     * Minecraft.\n     */\n    static readonly 'darkOakTrapdoor': ItemType;\n    /**\n     * Represents an item that can place a dark oak wall sign\n     * within Minecraft.\n     */\n    static readonly 'darkoakWallSign': ItemType;\n    /**\n     * Represents an item that can place a set of dark prismarine\n     * stairs within Minecraft.\n     */\n    static readonly 'darkPrismarineStairs': ItemType;\n    /**\n     * Represents an item that can place a daylight detector within\n     * Minecraft.\n     */\n    static readonly 'daylightDetector': ItemType;\n    /**\n     * Represents an item that can place an inverted daylight\n     * detector within Minecraft.\n     */\n    static readonly 'daylightDetectorInverted': ItemType;\n    /**\n     * Represents an item that can place a dead bush within\n     * Minecraft.\n     */\n    static readonly 'deadbush': ItemType;\n    static readonly 'debugStick': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate\n     * within Minecraft.\n     */\n    static readonly 'deepslate': ItemType;\n    /**\n     * Represents an item that can place a double slab of deepslate\n     * brick within Minecraft.\n     */\n    static readonly 'deepslateBrickDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate\n     * bricks within Minecraft.\n     */\n    static readonly 'deepslateBricks': ItemType;\n    /**\n     * Represents an item that can place a slab of deepslate brick\n     * within Minecraft.\n     */\n    static readonly 'deepslateBrickSlab': ItemType;\n    /**\n     * Represents an item that can place a set of deepslate brick\n     * stairs within Minecraft.\n     */\n    static readonly 'deepslateBrickStairs': ItemType;\n    /**\n     * Represents an item that can place a deepslate brick wall\n     * within Minecraft.\n     */\n    static readonly 'deepslateBrickWall': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate with\n     * embedded coal ore within Minecraft.\n     */\n    static readonly 'deepslateCoalOre': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate with\n     * embedded copper ore within Minecraft.\n     */\n    static readonly 'deepslateCopperOre': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate with\n     * embedded diamond ore within Minecraft.\n     */\n    static readonly 'deepslateDiamondOre': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate with\n     * embedded emerald ore within Minecraft.\n     */\n    static readonly 'deepslateEmeraldOre': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate with\n     * embedded gold ore within Minecraft.\n     */\n    static readonly 'deepslateGoldOre': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate with\n     * embedded iron ore within Minecraft.\n     */\n    static readonly 'deepslateIronOre': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate with\n     * embedded lapis lazuli ore within Minecraft.\n     */\n    static readonly 'deepslateLapisOre': ItemType;\n    /**\n     * Represents an item that can place a block of deepslate with\n     * embedded redstone ore within Minecraft.\n     */\n    static readonly 'deepslateRedstoneOre': ItemType;\n    /**\n     * Represents an item that can place a double slab of tiled\n     * deepslate within Minecraft.\n     */\n    static readonly 'deepslateTileDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a set of deepslate tiles\n     * within Minecraft.\n     */\n    static readonly 'deepslateTiles': ItemType;\n    /**\n     * Represents an item that can place a slab of deepslate tiles\n     * within Minecraft.\n     */\n    static readonly 'deepslateTileSlab': ItemType;\n    /**\n     * Represents an item that can place a set of deepslate tile\n     * stairs within Minecraft.\n     */\n    static readonly 'deepslateTileStairs': ItemType;\n    /**\n     * Represents an item that can place a wall of deepslate tile\n     * within Minecraft.\n     */\n    static readonly 'deepslateTileWall': ItemType;\n    /**\n     * Represents an item that can place a logical but generally\n     * invisible Deny logic block within Minecraft.\n     */\n    static readonly 'deny': ItemType;\n    /**\n     * Represents an item that can place a detector rail within\n     * Minecraft.\n     */\n    static readonly 'detectorRail': ItemType;\n    static readonly 'diamond': ItemType;\n    static readonly 'diamondAxe': ItemType;\n    /**\n     * Represents an item that can place a block of diamond within\n     * Minecraft.\n     */\n    static readonly 'diamondBlock': ItemType;\n    static readonly 'diamondBoots': ItemType;\n    static readonly 'diamondChestplate': ItemType;\n    static readonly 'diamondHelmet': ItemType;\n    static readonly 'diamondHoe': ItemType;\n    static readonly 'diamondHorseArmor': ItemType;\n    static readonly 'diamondLeggings': ItemType;\n    /**\n     * Represents an item that can place a block with embedded\n     * diamond ore within Minecraft.\n     */\n    static readonly 'diamondOre': ItemType;\n    static readonly 'diamondPickaxe': ItemType;\n    static readonly 'diamondShovel': ItemType;\n    static readonly 'diamondSword': ItemType;\n    /**\n     * Represents an item that can place a set of diorite stairs\n     * within Minecraft.\n     */\n    static readonly 'dioriteStairs': ItemType;\n    /**\n     * Represents an item that can place a block of dirt within\n     * Minecraft.\n     */\n    static readonly 'dirt': ItemType;\n    /**\n     * Represents an item that can place a block of dirt with roots\n     * within Minecraft.\n     */\n    static readonly 'dirtWithRoots': ItemType;\n    static readonly 'discFragment5': ItemType;\n    /**\n     * Represents an item that can place a dispenser within\n     * Minecraft.\n     */\n    static readonly 'dispenser': ItemType;\n    static readonly 'dolphinSpawnEgg': ItemType;\n    static readonly 'donkeySpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a slab of double cut\n     * copper within Minecraft.\n     */\n    static readonly 'doubleCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a double plant within\n     * Minecraft.\n     */\n    static readonly 'doublePlant': ItemType;\n    static readonly 'doubleStoneBlockSlab': ItemType;\n    static readonly 'doubleStoneBlockSlab2': ItemType;\n    static readonly 'doubleStoneBlockSlab3': ItemType;\n    static readonly 'doubleStoneBlockSlab4': ItemType;\n    /**\n     * Represents an item that can place a double slab of wood\n     * within Minecraft.\n     */\n    static readonly 'doubleWoodenSlab': ItemType;\n    static readonly 'dragonBreath': ItemType;\n    /**\n     * Represents an item that can place a dragon egg within\n     * Minecraft.\n     */\n    static readonly 'dragonEgg': ItemType;\n    static readonly 'driedKelp': ItemType;\n    /**\n     * Represents an item that can place a block of dried kelp\n     * within Minecraft.\n     */\n    static readonly 'driedKelpBlock': ItemType;\n    /**\n     * Represents an item that can place a block of dripstone\n     * within Minecraft.\n     */\n    static readonly 'dripstoneBlock': ItemType;\n    /**\n     * Represents an item that can place a dropper within\n     * Minecraft.\n     */\n    static readonly 'dropper': ItemType;\n    static readonly 'drownedSpawnEgg': ItemType;\n    static readonly 'dye': ItemType;\n    static readonly 'echoShard': ItemType;\n    static readonly 'egg': ItemType;\n    static readonly 'elderGuardianSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place an element in Minecraft\n     * Education experiences.\n     */\n    static readonly 'element0': ItemType;\n    /**\n     * Represents the hydrogen element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element1': ItemType;\n    /**\n     * Represents the neon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element10': ItemType;\n    /**\n     * Represents the fermium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element100': ItemType;\n    /**\n     * Represents the mendelevium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element101': ItemType;\n    /**\n     * Represents the nobelium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element102': ItemType;\n    /**\n     * Represents the lawrencium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element103': ItemType;\n    /**\n     * Represents the rutherfordium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element104': ItemType;\n    /**\n     * Represents the dubnium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element105': ItemType;\n    /**\n     * Represents the seaborgium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element106': ItemType;\n    /**\n     * Represents the bohrium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element107': ItemType;\n    /**\n     * Represents the hassium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element108': ItemType;\n    /**\n     * Represents the meitnerium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element109': ItemType;\n    /**\n     * Represents the sodium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element11': ItemType;\n    /**\n     * Represents the darmstadtium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element110': ItemType;\n    /**\n     * Represents the roentgenium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element111': ItemType;\n    /**\n     * Represents the copernicium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element112': ItemType;\n    /**\n     * Represents the nihonium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element113': ItemType;\n    /**\n     * Represents the flerovium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element114': ItemType;\n    /**\n     * Represents the moscovium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element115': ItemType;\n    /**\n     * Represents the livermorium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element116': ItemType;\n    /**\n     * Represents the tennessine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element117': ItemType;\n    /**\n     * Represents the oganesson element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element118': ItemType;\n    /**\n     * Represents the magnesium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element12': ItemType;\n    /**\n     * Represents the aluminum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element13': ItemType;\n    /**\n     * Represents the silicon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element14': ItemType;\n    /**\n     * Represents the phosphorus element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element15': ItemType;\n    /**\n     * Represents the sulfur element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element16': ItemType;\n    /**\n     * Represents the chlorine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element17': ItemType;\n    /**\n     * Represents the argon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element18': ItemType;\n    /**\n     * Represents the potassium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element19': ItemType;\n    /**\n     * Represents the helium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element2': ItemType;\n    /**\n     * Represents the calcium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element20': ItemType;\n    /**\n     * Represents the scandium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element21': ItemType;\n    /**\n     * Represents the titanium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element22': ItemType;\n    /**\n     * Represents the vanadium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element23': ItemType;\n    /**\n     * Represents the chromium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element24': ItemType;\n    /**\n     * Represents the manganese element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element25': ItemType;\n    /**\n     * Represents the iron element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element26': ItemType;\n    /**\n     * Represents the cobalt element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element27': ItemType;\n    /**\n     * Represents the nickel element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element28': ItemType;\n    /**\n     * Represents the copper element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element29': ItemType;\n    /**\n     * Represents an item that can place a lithium element in\n     * Minecraft Education experiences.\n     */\n    static readonly 'element3': ItemType;\n    /**\n     * Represents the zinc element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element30': ItemType;\n    /**\n     * Represents the gallium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element31': ItemType;\n    /**\n     * Represents an item that can place a germanium element in\n     * Minecraft Education experiences.\n     */\n    static readonly 'element32': ItemType;\n    /**\n     * Represents the arsenic element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element33': ItemType;\n    /**\n     * Represents the selenium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element34': ItemType;\n    /**\n     * Represents the bromine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element35': ItemType;\n    /**\n     * Represents the krypton element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element36': ItemType;\n    /**\n     * Represents the rubidium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element37': ItemType;\n    /**\n     * Represents the strontium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element38': ItemType;\n    /**\n     * Represents the yttrium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element39': ItemType;\n    /**\n     * Represents an item that can place a beryllium element in\n     * Minecraft Education experiences.\n     */\n    static readonly 'element4': ItemType;\n    /**\n     * Represents the zirconium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element40': ItemType;\n    /**\n     * Represents the niobium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element41': ItemType;\n    /**\n     * Represents the molybdenum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element42': ItemType;\n    /**\n     * Represents the technetium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element43': ItemType;\n    /**\n     * Represents the ruthenium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element44': ItemType;\n    /**\n     * Represents the rhodium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element45': ItemType;\n    /**\n     * Represents the palladium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element46': ItemType;\n    /**\n     * Represents the silver element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element47': ItemType;\n    /**\n     * Represents the cadmium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element48': ItemType;\n    /**\n     * Represents the indium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element49': ItemType;\n    /**\n     * Represents the boron element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element5': ItemType;\n    /**\n     * Represents the tin element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element50': ItemType;\n    /**\n     * Represents the antimony element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element51': ItemType;\n    /**\n     * Represents the tellurium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element52': ItemType;\n    /**\n     * Represents the iodine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element53': ItemType;\n    /**\n     * Represents the xenon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element54': ItemType;\n    /**\n     * Represents the cesium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element55': ItemType;\n    /**\n     * Represents the barium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element56': ItemType;\n    /**\n     * Represents the lanthanum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element57': ItemType;\n    /**\n     * Represents the cerium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element58': ItemType;\n    /**\n     * Represents the praseodymium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element59': ItemType;\n    /**\n     * Represents the carbon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element6': ItemType;\n    /**\n     * Represents the neodymium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element60': ItemType;\n    /**\n     * Represents the promethium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element61': ItemType;\n    /**\n     * Represents the samarium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element62': ItemType;\n    /**\n     * Represents the europium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element63': ItemType;\n    /**\n     * Represents the gadolinium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element64': ItemType;\n    /**\n     * Represents an item that can place a terbium element in\n     * Minecraft Education experiences.\n     */\n    static readonly 'element65': ItemType;\n    /**\n     * Represents the dysprosium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element66': ItemType;\n    /**\n     * Represents the holmium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element67': ItemType;\n    /**\n     * Represents the erbium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element68': ItemType;\n    /**\n     * Represents the thulium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element69': ItemType;\n    /**\n     * Represents the nitrogen element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element7': ItemType;\n    /**\n     * Represents the ytterbium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element70': ItemType;\n    /**\n     * Represents the lutetium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element71': ItemType;\n    /**\n     * Represents an item that can place a hafnium element in\n     * Minecraft Education experiences.\n     */\n    static readonly 'element72': ItemType;\n    /**\n     * Represents the tantalum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element73': ItemType;\n    /**\n     * Represents the tungsten element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element74': ItemType;\n    /**\n     * Represents the rhenium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element75': ItemType;\n    /**\n     * Represents the osmium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element76': ItemType;\n    /**\n     * Represents the iridium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element77': ItemType;\n    /**\n     * Represents the platinum element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element78': ItemType;\n    /**\n     * Represents the gold element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element79': ItemType;\n    /**\n     * Represents the oxygen element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element8': ItemType;\n    /**\n     * Represents the mercury element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element80': ItemType;\n    /**\n     * Represents the thallium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element81': ItemType;\n    /**\n     * Represents the lead element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element82': ItemType;\n    /**\n     * Represents the bismuth element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element83': ItemType;\n    /**\n     * Represents the polonium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element84': ItemType;\n    /**\n     * Represents the astatine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element85': ItemType;\n    /**\n     * Represents the radon element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element86': ItemType;\n    /**\n     * Represents the francium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element87': ItemType;\n    /**\n     * Represents the radium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element88': ItemType;\n    /**\n     * Represents the actinium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element89': ItemType;\n    /**\n     * Represents the fluorine element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element9': ItemType;\n    /**\n     * Represents the thorium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element90': ItemType;\n    /**\n     * Represents the protactinium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element91': ItemType;\n    /**\n     * Represents the uranium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element92': ItemType;\n    /**\n     * Represents the neptunium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element93': ItemType;\n    /**\n     * Represents the plutonium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element94': ItemType;\n    /**\n     * Represents the americium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element95': ItemType;\n    /**\n     * Represents the curium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element96': ItemType;\n    /**\n     * Represents the berkelium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element97': ItemType;\n    /**\n     * Represents the californium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element98': ItemType;\n    /**\n     * Represents the einsteinium element in Minecraft Education\n     * experiences.\n     */\n    static readonly 'element99': ItemType;\n    static readonly 'elytra': ItemType;\n    static readonly 'emerald': ItemType;\n    /**\n     * Represents an item that can place a block of emerald within\n     * Minecraft.\n     */\n    static readonly 'emeraldBlock': ItemType;\n    /**\n     * Represents an item that can place a block with embedded\n     * emerald ore within Minecraft.\n     */\n    static readonly 'emeraldOre': ItemType;\n    static readonly 'emptyMap': ItemType;\n    static readonly 'enchantedBook': ItemType;\n    static readonly 'enchantedGoldenApple': ItemType;\n    /**\n     * Represents an item that can place an enchanting table within\n     * Minecraft.\n     */\n    static readonly 'enchantingTable': ItemType;\n    /**\n     * Represents an item that can place an end bricks block within\n     * Minecraft.\n     */\n    static readonly 'endBricks': ItemType;\n    /**\n     * Represents an item that can place a set of end brick stairs\n     * within Minecraft.\n     */\n    static readonly 'endBrickStairs': ItemType;\n    static readonly 'endCrystal': ItemType;\n    /**\n     * Represents an item that can place an ender chest within\n     * Minecraft.\n     */\n    static readonly 'enderChest': ItemType;\n    static readonly 'enderEye': ItemType;\n    static readonly 'endermanSpawnEgg': ItemType;\n    static readonly 'endermiteSpawnEgg': ItemType;\n    static readonly 'enderPearl': ItemType;\n    /**\n     * Represents an item that can place an end gateway within\n     * Minecraft.\n     */\n    static readonly 'endGateway': ItemType;\n    /**\n     * Represents an item that can place an end portal block within\n     * Minecraft.\n     */\n    static readonly 'endPortal': ItemType;\n    /**\n     * Represents an item that can place an end portal frame within\n     * Minecraft.\n     */\n    static readonly 'endPortalFrame': ItemType;\n    /**\n     * Represents an item that can place an end rod within\n     * Minecraft.\n     */\n    static readonly 'endRod': ItemType;\n    /**\n     * Represents an item that can place an end stone block within\n     * Minecraft.\n     */\n    static readonly 'endStone': ItemType;\n    static readonly 'evokerSpawnEgg': ItemType;\n    static readonly 'experienceBottle': ItemType;\n    /**\n     * Represents an item that can place a block of exposed copper\n     * within Minecraft.\n     */\n    static readonly 'exposedCopper': ItemType;\n    /**\n     * Represents an item that can place a block of exposed cut\n     * copper within Minecraft.\n     */\n    static readonly 'exposedCutCopper': ItemType;\n    /**\n     * Represents an item that can place a slab of exposed cut\n     * copper within Minecraft.\n     */\n    static readonly 'exposedCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a set of exposed cut\n     * copper stairs within Minecraft.\n     */\n    static readonly 'exposedCutCopperStairs': ItemType;\n    /**\n     * Represents an item that can place a double slab of exposed\n     * cut copper within Minecraft.\n     */\n    static readonly 'exposedDoubleCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a farmland block within\n     * Minecraft.\n     */\n    static readonly 'farmland': ItemType;\n    static readonly 'feather': ItemType;\n    /**\n     * Represents an item that can place a fence within Minecraft.\n     */\n    static readonly 'fence': ItemType;\n    /**\n     * Represents an item that can place a fence gate within\n     * Minecraft.\n     */\n    static readonly 'fenceGate': ItemType;\n    static readonly 'fermentedSpiderEye': ItemType;\n    static readonly 'fieldMasonedBannerPattern': ItemType;\n    static readonly 'filledMap': ItemType;\n    /**\n     * Represents an item that can place a fire within Minecraft.\n     */\n    static readonly 'fire': ItemType;\n    static readonly 'fireCharge': ItemType;\n    static readonly 'fireflySpawnEgg': ItemType;\n    static readonly 'fireworkRocket': ItemType;\n    static readonly 'fireworkStar': ItemType;\n    static readonly 'fishingRod': ItemType;\n    /**\n     * Represents an item that can place a fletching table within\n     * Minecraft.\n     */\n    static readonly 'fletchingTable': ItemType;\n    static readonly 'flint': ItemType;\n    static readonly 'flintAndSteel': ItemType;\n    static readonly 'flowerBannerPattern': ItemType;\n    /**\n     * Represents an item that can place a flowering azalea plant\n     * within Minecraft.\n     */\n    static readonly 'floweringAzalea': ItemType;\n    /**\n     * Represents an item that can place a flower pot within\n     * Minecraft.\n     */\n    static readonly 'flowerPot': ItemType;\n    /**\n     * Represents flowing lava within Minecraft.\n     */\n    static readonly 'flowingLava': ItemType;\n    /**\n     * Represents flowing water within Minecraft.\n     */\n    static readonly 'flowingWater': ItemType;\n    static readonly 'foxSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a frame within Minecraft.\n     */\n    static readonly 'frame': ItemType;\n    static readonly 'frogSpawn': ItemType;\n    static readonly 'frogSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a frosted ice block within\n     * Minecraft.\n     */\n    static readonly 'frostedIce': ItemType;\n    /**\n     * Represents an item that can place a furnace within\n     * Minecraft.\n     */\n    static readonly 'furnace': ItemType;\n    static readonly 'ghastSpawnEgg': ItemType;\n    static readonly 'ghastTear': ItemType;\n    /**\n     * Represents an item that can place a block of gilded\n     * blackstone within Minecraft.\n     */\n    static readonly 'gildedBlackstone': ItemType;\n    /**\n     * Represents an item that can place a glass block within\n     * Minecraft.\n     */\n    static readonly 'glass': ItemType;\n    static readonly 'glassBottle': ItemType;\n    /**\n     * Represents an item that can place a pane of glass within\n     * Minecraft.\n     */\n    static readonly 'glassPane': ItemType;\n    static readonly 'glisteringMelonSlice': ItemType;\n    static readonly 'globeBannerPattern': ItemType;\n    static readonly 'glowBerries': ItemType;\n    /**\n     * Represents an item that can place a glowing frame within\n     * Minecraft.\n     */\n    static readonly 'glowFrame': ItemType;\n    /**\n     * Represents an item that can place a glowing obsidian block\n     * within Minecraft.\n     */\n    static readonly 'glowingobsidian': ItemType;\n    static readonly 'glowInkSac': ItemType;\n    /**\n     * Represents glow lichen within Minecraft.\n     */\n    static readonly 'glowLichen': ItemType;\n    static readonly 'glowSquidSpawnEgg': ItemType;\n    static readonly 'glowStick': ItemType;\n    /**\n     * Represents an item that can place a block of glowstone\n     * within Minecraft.\n     */\n    static readonly 'glowstone': ItemType;\n    static readonly 'glowstoneDust': ItemType;\n    static readonly 'goatHorn': ItemType;\n    static readonly 'goatSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a gold block within\n     * Minecraft.\n     */\n    static readonly 'goldBlock': ItemType;\n    static readonly 'goldenApple': ItemType;\n    static readonly 'goldenAxe': ItemType;\n    static readonly 'goldenBoots': ItemType;\n    static readonly 'goldenCarrot': ItemType;\n    static readonly 'goldenChestplate': ItemType;\n    static readonly 'goldenHelmet': ItemType;\n    static readonly 'goldenHoe': ItemType;\n    static readonly 'goldenHorseArmor': ItemType;\n    static readonly 'goldenLeggings': ItemType;\n    static readonly 'goldenPickaxe': ItemType;\n    /**\n     * Represents an item that can place a golden rail element\n     * within Minecraft.\n     */\n    static readonly 'goldenRail': ItemType;\n    static readonly 'goldenShovel': ItemType;\n    static readonly 'goldenSword': ItemType;\n    static readonly 'goldIngot': ItemType;\n    static readonly 'goldNugget': ItemType;\n    /**\n     * Represents an item that can place a block with embedded gold\n     * ore within Minecraft.\n     */\n    static readonly 'goldOre': ItemType;\n    /**\n     * Represents an item that can place a set of granite stairs\n     * within Minecraft.\n     */\n    static readonly 'graniteStairs': ItemType;\n    /**\n     * Represents an item that can place a block of dirt and grass\n     * within Minecraft.\n     */\n    static readonly 'grass': ItemType;\n    /**\n     * Represents an item that can place a block of dirt and grass\n     * with a path within Minecraft.\n     */\n    static readonly 'grassPath': ItemType;\n    /**\n     * Represents an item that can place a block of gravel within\n     * Minecraft.\n     */\n    static readonly 'gravel': ItemType;\n    /**\n     * Represents an item that can place a gray-colored candle\n     * within Minecraft.\n     */\n    static readonly 'grayCandle': ItemType;\n    /**\n     * Represents an item that can place a cake with gray-colored\n     * candle within Minecraft.\n     */\n    static readonly 'grayCandleCake': ItemType;\n    static readonly 'grayDye': ItemType;\n    /**\n     * Represents an item that can place a gray-colored block of\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'grayGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a green-colored candle\n     * within Minecraft.\n     */\n    static readonly 'greenCandle': ItemType;\n    /**\n     * Represents an item that can place a green-colored candle\n     * cake within Minecraft.\n     */\n    static readonly 'greenCandleCake': ItemType;\n    static readonly 'greenDye': ItemType;\n    /**\n     * Represents an item that can place a green block of glazed\n     * terracotta within Minecraft.\n     */\n    static readonly 'greenGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a grindstone within\n     * Minecraft.\n     */\n    static readonly 'grindstone': ItemType;\n    static readonly 'guardianSpawnEgg': ItemType;\n    static readonly 'gunpowder': ItemType;\n    /**\n     * Represents an item that can place a set of hanging roots\n     * within Minecraft.\n     */\n    static readonly 'hangingRoots': ItemType;\n    /**\n     * Represents an item that can place a block of hardened clay\n     * within Minecraft.\n     */\n    static readonly 'hardenedClay': ItemType;\n    /**\n     * Represents an item that can place a block of hard glass\n     * within Minecraft.\n     */\n    static readonly 'hardGlass': ItemType;\n    /**\n     * Represents an item that can place a pane of hard glass\n     * within Minecraft.\n     */\n    static readonly 'hardGlassPane': ItemType;\n    /**\n     * Represents an item that can place a stained hard glass block\n     * within Minecraft.\n     */\n    static readonly 'hardStainedGlass': ItemType;\n    /**\n     * Represents an item that can place a stained pane of hard\n     * glass within Minecraft.\n     */\n    static readonly 'hardStainedGlassPane': ItemType;\n    /**\n     * Represents an item that can place a block of hay within\n     * Minecraft.\n     */\n    static readonly 'hayBlock': ItemType;\n    static readonly 'heartOfTheSea': ItemType;\n    /**\n     * Represents an item that can place a heavy weighted pressure\n     * plate within Minecraft.\n     */\n    static readonly 'heavyWeightedPressurePlate': ItemType;\n    static readonly 'hoglinSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a block of honey within\n     * Minecraft.\n     */\n    static readonly 'honeyBlock': ItemType;\n    static readonly 'honeyBottle': ItemType;\n    static readonly 'honeycomb': ItemType;\n    /**\n     * Represents an item that can place a honeycomb block within\n     * Minecraft.\n     */\n    static readonly 'honeycombBlock': ItemType;\n    /**\n     * Represents an item that can place a hopper within Minecraft.\n     */\n    static readonly 'hopper': ItemType;\n    static readonly 'hopperMinecart': ItemType;\n    static readonly 'horseSpawnEgg': ItemType;\n    static readonly 'huskSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a block of ice within\n     * Minecraft.\n     */\n    static readonly 'ice': ItemType;\n    static readonly 'iceBomb': ItemType;\n    /**\n     * Represents an item that can place an infested block of\n     * deepslate within Minecraft.\n     */\n    static readonly 'infestedDeepslate': ItemType;\n    /**\n     * Represents an item that can place an information update\n     * block within Minecraft.\n     */\n    static readonly 'infoUpdate': ItemType;\n    /**\n     * Represents an item that can place an information update\n     * block within Minecraft.\n     */\n    static readonly 'infoUpdate2': ItemType;\n    static readonly 'inkSac': ItemType;\n    /**\n     * Represents an item that can place an invisible boundary\n     * bedrock block within Minecraft.\n     */\n    static readonly 'invisibleBedrock': ItemType;\n    static readonly 'ironAxe': ItemType;\n    /**\n     * Represents iron bars within Minecraft.\n     */\n    static readonly 'ironBars': ItemType;\n    /**\n     * Represents an item that can place a block of iron within\n     * Minecraft.\n     */\n    static readonly 'ironBlock': ItemType;\n    static readonly 'ironBoots': ItemType;\n    static readonly 'ironChestplate': ItemType;\n    /**\n     * Represents an item that can place an iron door within\n     * Minecraft.\n     */\n    static readonly 'ironDoor': ItemType;\n    static readonly 'ironHelmet': ItemType;\n    static readonly 'ironHoe': ItemType;\n    static readonly 'ironHorseArmor': ItemType;\n    static readonly 'ironIngot': ItemType;\n    static readonly 'ironLeggings': ItemType;\n    static readonly 'ironNugget': ItemType;\n    /**\n     * Represents an item that can place a block with embedded iron\n     * ore within Minecraft.\n     */\n    static readonly 'ironOre': ItemType;\n    static readonly 'ironPickaxe': ItemType;\n    static readonly 'ironShovel': ItemType;\n    static readonly 'ironSword': ItemType;\n    /**\n     * Represents an item that can place an iron trapdoor within\n     * Minecraft.\n     */\n    static readonly 'ironTrapdoor': ItemType;\n    static readonly 'item.acaciaDoor': ItemType;\n    static readonly 'item.bed': ItemType;\n    static readonly 'item.beetroot': ItemType;\n    static readonly 'item.birchDoor': ItemType;\n    static readonly 'item.brewingStand': ItemType;\n    static readonly 'item.cake': ItemType;\n    static readonly 'item.camera': ItemType;\n    static readonly 'item.campfire': ItemType;\n    static readonly 'item.cauldron': ItemType;\n    static readonly 'item.chain': ItemType;\n    static readonly 'item.crimsonDoor': ItemType;\n    static readonly 'item.darkOakDoor': ItemType;\n    static readonly 'item.flowerPot': ItemType;\n    static readonly 'item.frame': ItemType;\n    static readonly 'item.glowFrame': ItemType;\n    static readonly 'item.hopper': ItemType;\n    static readonly 'item.ironDoor': ItemType;\n    static readonly 'item.jungleDoor': ItemType;\n    static readonly 'item.kelp': ItemType;\n    static readonly 'item.mangroveDoor': ItemType;\n    static readonly 'item.netherSprouts': ItemType;\n    static readonly 'item.netherWart': ItemType;\n    static readonly 'item.reeds': ItemType;\n    static readonly 'item.skull': ItemType;\n    static readonly 'item.soulCampfire': ItemType;\n    static readonly 'item.spruceDoor': ItemType;\n    static readonly 'item.warpedDoor': ItemType;\n    static readonly 'item.wheat': ItemType;\n    static readonly 'item.woodenDoor': ItemType;\n    /**\n     * Represents an item that can place a jigsaw within Minecraft.\n     */\n    static readonly 'jigsaw': ItemType;\n    /**\n     * Represents an item that can place a jukebox within\n     * Minecraft.\n     */\n    static readonly 'jukebox': ItemType;\n    static readonly 'jungleBoat': ItemType;\n    /**\n     * Represents jungle wood button within Minecraft.\n     */\n    static readonly 'jungleButton': ItemType;\n    static readonly 'jungleChestBoat': ItemType;\n    /**\n     * Represents an item that can place a jungle wood door within\n     * Minecraft.\n     */\n    static readonly 'jungleDoor': ItemType;\n    /**\n     * Represents an item that can place a jungle wood fence gate\n     * within Minecraft.\n     */\n    static readonly 'jungleFenceGate': ItemType;\n    /**\n     * Represents an item that can place a jungle wood pressure\n     * plate within Minecraft.\n     */\n    static readonly 'junglePressurePlate': ItemType;\n    /**\n     * Represents an item that can place a jungle sign within\n     * Minecraft.\n     */\n    static readonly 'jungleSign': ItemType;\n    /**\n     * Represents an item that can place a set of jungle wood\n     * stairs within Minecraft.\n     */\n    static readonly 'jungleStairs': ItemType;\n    /**\n     * Represents an item that can place a jungle wood standing\n     * sign within Minecraft.\n     */\n    static readonly 'jungleStandingSign': ItemType;\n    /**\n     * Represents an item that can place a jungle wood trapdoor\n     * within Minecraft.\n     */\n    static readonly 'jungleTrapdoor': ItemType;\n    /**\n     * Represents an item that can place a jungle wood wall sign\n     * within Minecraft.\n     */\n    static readonly 'jungleWallSign': ItemType;\n    /**\n     * Represents an item that can place a set of kelp within\n     * Minecraft.\n     */\n    static readonly 'kelp': ItemType;\n    /**\n     * Represents an item that can place a ladder within Minecraft.\n     */\n    static readonly 'ladder': ItemType;\n    /**\n     * Represents an item that can place a lantern within\n     * Minecraft.\n     */\n    static readonly 'lantern': ItemType;\n    /**\n     * Represents an item that can place a block of lapis lazuli\n     * within Minecraft.\n     */\n    static readonly 'lapisBlock': ItemType;\n    static readonly 'lapisLazuli': ItemType;\n    /**\n     * Represents an item that can place a block with embedded\n     * lapis lazuli within Minecraft.\n     */\n    static readonly 'lapisOre': ItemType;\n    /**\n     * Represents an item that can place a bud of large amethyst\n     * within Minecraft.\n     */\n    static readonly 'largeAmethystBud': ItemType;\n    /**\n     * Represents lava within Minecraft.\n     */\n    static readonly 'lava': ItemType;\n    static readonly 'lavaBucket': ItemType;\n    /**\n     * Represents an item that can place a cauldron filled with\n     * lava within Minecraft.\n     */\n    static readonly 'lavaCauldron': ItemType;\n    static readonly 'lead': ItemType;\n    static readonly 'leather': ItemType;\n    static readonly 'leatherBoots': ItemType;\n    static readonly 'leatherChestplate': ItemType;\n    static readonly 'leatherHelmet': ItemType;\n    static readonly 'leatherHorseArmor': ItemType;\n    static readonly 'leatherLeggings': ItemType;\n    /**\n     * Represents an item that can place a set of leaves within\n     * Minecraft.\n     */\n    static readonly 'leaves': ItemType;\n    /**\n     * Represents an item that can place an updated set of leaves\n     * within Minecraft.\n     */\n    static readonly 'leaves2': ItemType;\n    /**\n     * Represents an item that can place a lectern within\n     * Minecraft.\n     */\n    static readonly 'lectern': ItemType;\n    /**\n     * Represents an item that can place a lever within Minecraft.\n     */\n    static readonly 'lever': ItemType;\n    /**\n     * Represents an item that can place a block of light within\n     * Minecraft.\n     */\n    static readonly 'lightBlock': ItemType;\n    /**\n     * Represents an item that can place a light blue candle within\n     * Minecraft.\n     */\n    static readonly 'lightBlueCandle': ItemType;\n    /**\n     * Represents an item that can place a light blue candle cake\n     * within Minecraft.\n     */\n    static readonly 'lightBlueCandleCake': ItemType;\n    static readonly 'lightBlueDye': ItemType;\n    /**\n     * Represents an item that can place a light blue block of\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'lightBlueGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a light gray candle within\n     * Minecraft.\n     */\n    static readonly 'lightGrayCandle': ItemType;\n    /**\n     * Represents an item that can place a light gray candle cake\n     * within Minecraft.\n     */\n    static readonly 'lightGrayCandleCake': ItemType;\n    static readonly 'lightGrayDye': ItemType;\n    /**\n     * Represents an item that can place a lightning rod within\n     * Minecraft.\n     */\n    static readonly 'lightningRod': ItemType;\n    /**\n     * Represents an item that can place a light weighted pressure\n     * plate within Minecraft.\n     */\n    static readonly 'lightWeightedPressurePlate': ItemType;\n    /**\n     * Represents an item that can place a lime candle within\n     * Minecraft.\n     */\n    static readonly 'limeCandle': ItemType;\n    /**\n     * Represents an item that can place a lime-colored candle cake\n     * within Minecraft.\n     */\n    static readonly 'limeCandleCake': ItemType;\n    static readonly 'limeDye': ItemType;\n    /**\n     * Represents an item that can place a lime-colored block of\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'limeGlazedTerracotta': ItemType;\n    static readonly 'lingeringPotion': ItemType;\n    /**\n     * Represents an item that can place a lit blast furnace within\n     * Minecraft.\n     */\n    static readonly 'litBlastFurnace': ItemType;\n    /**\n     * Represents lit deepslate redstone ore within Minecraft.\n     */\n    static readonly 'litDeepslateRedstoneOre': ItemType;\n    /**\n     * Represents an item that can place a lit furnace within\n     * Minecraft.\n     */\n    static readonly 'litFurnace': ItemType;\n    /**\n     * Represents an item that can place a lit pumpkin within\n     * Minecraft.\n     */\n    static readonly 'litPumpkin': ItemType;\n    /**\n     * Represents an item that can place a lit redstone lamp within\n     * Minecraft.\n     */\n    static readonly 'litRedstoneLamp': ItemType;\n    /**\n     * Represents lit redstone ore within Minecraft.\n     */\n    static readonly 'litRedstoneOre': ItemType;\n    /**\n     * Represents an item that can place a lit smoker within\n     * Minecraft.\n     */\n    static readonly 'litSmoker': ItemType;\n    static readonly 'llamaSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a lodestone within\n     * Minecraft.\n     */\n    static readonly 'lodestone': ItemType;\n    static readonly 'lodestoneCompass': ItemType;\n    /**\n     * Represents an item that can place a log within Minecraft.\n     */\n    static readonly 'log': ItemType;\n    /**\n     * Represents an item that can place a more updated,\n     * customizable log within Minecraft.\n     */\n    static readonly 'log2': ItemType;\n    /**\n     * Represents an item that can place a loom within Minecraft.\n     */\n    static readonly 'loom': ItemType;\n    /**\n     * Represents an item that can place a magenta candle within\n     * Minecraft.\n     */\n    static readonly 'magentaCandle': ItemType;\n    /**\n     * Represents an item that can place a magenta candle cake\n     * within Minecraft.\n     */\n    static readonly 'magentaCandleCake': ItemType;\n    static readonly 'magentaDye': ItemType;\n    /**\n     * Represents an item that can place a block of magenta-colored\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'magentaGlazedTerracotta': ItemType;\n    /**\n     * Represents magma within Minecraft.\n     */\n    static readonly 'magma': ItemType;\n    static readonly 'magmaCream': ItemType;\n    static readonly 'magmaCubeSpawnEgg': ItemType;\n    static readonly 'mangroveBoat': ItemType;\n    static readonly 'mangroveButton': ItemType;\n    static readonly 'mangroveChestBoat': ItemType;\n    static readonly 'mangroveDoor': ItemType;\n    static readonly 'mangroveDoubleSlab': ItemType;\n    static readonly 'mangroveFence': ItemType;\n    static readonly 'mangroveFenceGate': ItemType;\n    static readonly 'mangroveLeaves': ItemType;\n    static readonly 'mangroveLog': ItemType;\n    static readonly 'mangrovePlanks': ItemType;\n    static readonly 'mangrovePressurePlate': ItemType;\n    static readonly 'mangrovePropagule': ItemType;\n    static readonly 'mangroveRoots': ItemType;\n    static readonly 'mangroveSign': ItemType;\n    static readonly 'mangroveSlab': ItemType;\n    static readonly 'mangroveStairs': ItemType;\n    static readonly 'mangroveStandingSign': ItemType;\n    static readonly 'mangroveTrapdoor': ItemType;\n    static readonly 'mangroveWallSign': ItemType;\n    static readonly 'mangroveWood': ItemType;\n    static readonly 'medicine': ItemType;\n    /**\n     * Represents an item that can place a medium-sized bud of\n     * amethyst within Minecraft.\n     */\n    static readonly 'mediumAmethystBud': ItemType;\n    /**\n     * Represents an item that can place a block of melon within\n     * Minecraft.\n     */\n    static readonly 'melonBlock': ItemType;\n    static readonly 'melonSeeds': ItemType;\n    static readonly 'melonSlice': ItemType;\n    /**\n     * Represents an item that can place a stem of melon within\n     * Minecraft.\n     */\n    static readonly 'melonStem': ItemType;\n    static readonly 'milkBucket': ItemType;\n    static readonly 'minecart': ItemType;\n    /**\n     * Represents an item that can place a mob spawner within\n     * Minecraft.\n     */\n    static readonly 'mobSpawner': ItemType;\n    static readonly 'mojangBannerPattern': ItemType;\n    /**\n     * Represents an item that can place a monster egg within\n     * Minecraft.\n     */\n    static readonly 'monsterEgg': ItemType;\n    static readonly 'mooshroomSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a block of moss within\n     * Minecraft.\n     */\n    static readonly 'mossBlock': ItemType;\n    /**\n     * Represents an item that can place a carpet of moss within\n     * Minecraft.\n     */\n    static readonly 'mossCarpet': ItemType;\n    /**\n     * Represents an item that can place a block of cobblestone\n     * with moss within Minecraft.\n     */\n    static readonly 'mossyCobblestone': ItemType;\n    /**\n     * Represents an item that can place a set of mossy cobblestone\n     * stairs within Minecraft.\n     */\n    static readonly 'mossyCobblestoneStairs': ItemType;\n    /**\n     * Represents an item that can place a set of mossy stone brick\n     * stairs within Minecraft.\n     */\n    static readonly 'mossyStoneBrickStairs': ItemType;\n    static readonly 'movingBlock': ItemType;\n    static readonly 'mud': ItemType;\n    static readonly 'mudBrickDoubleSlab': ItemType;\n    static readonly 'mudBricks': ItemType;\n    static readonly 'mudBrickSlab': ItemType;\n    static readonly 'mudBrickStairs': ItemType;\n    static readonly 'mudBrickWall': ItemType;\n    static readonly 'muddyMangroveRoots': ItemType;\n    static readonly 'muleSpawnEgg': ItemType;\n    static readonly 'mushroomStew': ItemType;\n    static readonly 'musicDisc11': ItemType;\n    static readonly 'musicDisc13': ItemType;\n    static readonly 'musicDisc5': ItemType;\n    static readonly 'musicDiscBlocks': ItemType;\n    static readonly 'musicDiscCat': ItemType;\n    static readonly 'musicDiscChirp': ItemType;\n    static readonly 'musicDiscFar': ItemType;\n    static readonly 'musicDiscMall': ItemType;\n    static readonly 'musicDiscMellohi': ItemType;\n    static readonly 'musicDiscOtherside': ItemType;\n    static readonly 'musicDiscPigstep': ItemType;\n    static readonly 'musicDiscStal': ItemType;\n    static readonly 'musicDiscStrad': ItemType;\n    static readonly 'musicDiscWait': ItemType;\n    static readonly 'musicDiscWard': ItemType;\n    static readonly 'mutton': ItemType;\n    /**\n     * Represents an item that can place a mycelium plant within\n     * Minecraft.\n     */\n    static readonly 'mycelium': ItemType;\n    static readonly 'nameTag': ItemType;\n    static readonly 'nautilusShell': ItemType;\n    /**\n     * Represents an item that can place a nether brick block\n     * within Minecraft.\n     */\n    static readonly 'netherbrick': ItemType;\n    /**\n     * Represents an item that can place a nether brick block\n     * within Minecraft.\n     */\n    static readonly 'netherBrick': ItemType;\n    /**\n     * Represents an item that can place a nether brick fence\n     * within Minecraft.\n     */\n    static readonly 'netherBrickFence': ItemType;\n    /**\n     * Represents an item that can place a set of nether brick\n     * stairs within Minecraft.\n     */\n    static readonly 'netherBrickStairs': ItemType;\n    /**\n     * Represents an item that can place a block of nether with\n     * embedded gold ore within Minecraft.\n     */\n    static readonly 'netherGoldOre': ItemType;\n    static readonly 'netheriteAxe': ItemType;\n    /**\n     * Represents an item that can place a block of netherite\n     * within Minecraft.\n     */\n    static readonly 'netheriteBlock': ItemType;\n    static readonly 'netheriteBoots': ItemType;\n    static readonly 'netheriteChestplate': ItemType;\n    static readonly 'netheriteHelmet': ItemType;\n    static readonly 'netheriteHoe': ItemType;\n    static readonly 'netheriteIngot': ItemType;\n    static readonly 'netheriteLeggings': ItemType;\n    static readonly 'netheritePickaxe': ItemType;\n    static readonly 'netheriteScrap': ItemType;\n    static readonly 'netheriteShovel': ItemType;\n    static readonly 'netheriteSword': ItemType;\n    /**\n     * Represents an item that can place a block of netherrack\n     * within Minecraft.\n     */\n    static readonly 'netherrack': ItemType;\n    /**\n     * Represents an item that can place a nether rock within\n     * Minecraft.\n     */\n    static readonly 'netherreactor': ItemType;\n    /**\n     * Represents nether sprouts within Minecraft.\n     */\n    static readonly 'netherSprouts': ItemType;\n    static readonly 'netherStar': ItemType;\n    /**\n     * Represents nether wart within Minecraft.\n     */\n    static readonly 'netherWart': ItemType;\n    /**\n     * Represents an item that can place a block of nether wart\n     * within Minecraft.\n     */\n    static readonly 'netherWartBlock': ItemType;\n    /**\n     * Represents an item that can place a standard set of stone\n     * stairs within Minecraft.\n     */\n    static readonly 'normalStoneStairs': ItemType;\n    /**\n     * Represents an item that can place a note block within\n     * Minecraft.\n     */\n    static readonly 'noteblock': ItemType;\n    static readonly 'npcSpawnEgg': ItemType;\n    static readonly 'oakBoat': ItemType;\n    static readonly 'oakChestBoat': ItemType;\n    static readonly 'oakSign': ItemType;\n    /**\n     * Represents an item that can place a set of oak stairs within\n     * Minecraft.\n     */\n    static readonly 'oakStairs': ItemType;\n    /**\n     * Represents an item that can place an observer within\n     * Minecraft.\n     */\n    static readonly 'observer': ItemType;\n    /**\n     * Represents an item that can place an obsidian block within\n     * Minecraft.\n     */\n    static readonly 'obsidian': ItemType;\n    static readonly 'ocelotSpawnEgg': ItemType;\n    static readonly 'ochreFroglight': ItemType;\n    /**\n     * Represents an item that can place an orange candle within\n     * Minecraft.\n     */\n    static readonly 'orangeCandle': ItemType;\n    /**\n     * Represents an item that can place an orange candle cake\n     * within Minecraft.\n     */\n    static readonly 'orangeCandleCake': ItemType;\n    static readonly 'orangeDye': ItemType;\n    /**\n     * Represents an item that can place a block of orange-colored\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'orangeGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a block of oxidized copper\n     * within Minecraft.\n     */\n    static readonly 'oxidizedCopper': ItemType;\n    /**\n     * Represents an item that can place a block of oxidized cut\n     * copper within Minecraft.\n     */\n    static readonly 'oxidizedCutCopper': ItemType;\n    /**\n     * Represents an item that can place a slab of oxidized cut\n     * copper within Minecraft.\n     */\n    static readonly 'oxidizedCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a set of oxidized cut\n     * copper stairs within Minecraft.\n     */\n    static readonly 'oxidizedCutCopperStairs': ItemType;\n    /**\n     * Represents an item that can place a double slab of oxidized\n     * cut copper within Minecraft.\n     */\n    static readonly 'oxidizedDoubleCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a block of packed ice\n     * within Minecraft.\n     */\n    static readonly 'packedIce': ItemType;\n    static readonly 'packedMud': ItemType;\n    static readonly 'painting': ItemType;\n    static readonly 'pandaSpawnEgg': ItemType;\n    static readonly 'paper': ItemType;\n    static readonly 'parrotSpawnEgg': ItemType;\n    static readonly 'pearlescentFroglight': ItemType;\n    static readonly 'phantomMembrane': ItemType;\n    static readonly 'phantomSpawnEgg': ItemType;\n    static readonly 'piglinBannerPattern': ItemType;\n    static readonly 'piglinBruteSpawnEgg': ItemType;\n    static readonly 'piglinSpawnEgg': ItemType;\n    static readonly 'pigSpawnEgg': ItemType;\n    static readonly 'pillagerSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a pink candle within\n     * Minecraft.\n     */\n    static readonly 'pinkCandle': ItemType;\n    /**\n     * Represents an item that can place a pink candle cake within\n     * Minecraft.\n     */\n    static readonly 'pinkCandleCake': ItemType;\n    static readonly 'pinkDye': ItemType;\n    /**\n     * Represents an item that can place a pink-colored block of\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'pinkGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a piston within Minecraft.\n     */\n    static readonly 'piston': ItemType;\n    static readonly 'pistonArmCollision': ItemType;\n    /**\n     * Represents an item that can place a set of planks within\n     * Minecraft.\n     */\n    static readonly 'planks': ItemType;\n    /**\n     * Represents podzol within Minecraft.\n     */\n    static readonly 'podzol': ItemType;\n    /**\n     * Represents pointed dripstone within Minecraft.\n     */\n    static readonly 'pointedDripstone': ItemType;\n    static readonly 'poisonousPotato': ItemType;\n    static readonly 'polarBearSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a set of polished andesite\n     * stairs within Minecraft.\n     */\n    static readonly 'polishedAndesiteStairs': ItemType;\n    /**\n     * Represents an item that can place a block of polished basalt\n     * within Minecraft.\n     */\n    static readonly 'polishedBasalt': ItemType;\n    /**\n     * Represents an item that can place a block of polished\n     * blackstone within Minecraft.\n     */\n    static readonly 'polishedBlackstone': ItemType;\n    /**\n     * Represents an item that can place a double slab of polished\n     * blackstone brick within Minecraft.\n     */\n    static readonly 'polishedBlackstoneBrickDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a block of polished\n     * blackstone bricks within Minecraft.\n     */\n    static readonly 'polishedBlackstoneBricks': ItemType;\n    /**\n     * Represents an item that can place a slab of polished\n     * blackstone within Minecraft.\n     */\n    static readonly 'polishedBlackstoneBrickSlab': ItemType;\n    /**\n     * Represents an item that can place a set of polished\n     * blackstone brick stairs within Minecraft.\n     */\n    static readonly 'polishedBlackstoneBrickStairs': ItemType;\n    /**\n     * Represents an item that can place a polished blackstone\n     * brick wall within Minecraft.\n     */\n    static readonly 'polishedBlackstoneBrickWall': ItemType;\n    /**\n     * Represents an item that can place a polished blackstone\n     * button within Minecraft.\n     */\n    static readonly 'polishedBlackstoneButton': ItemType;\n    /**\n     * Represents an item that can place a double slab of polished\n     * blackstone within Minecraft.\n     */\n    static readonly 'polishedBlackstoneDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a polished blackstone\n     * pressure plate within Minecraft.\n     */\n    static readonly 'polishedBlackstonePressurePlate': ItemType;\n    /**\n     * Represents an item that can place a slab of polished\n     * blackstone within Minecraft.\n     */\n    static readonly 'polishedBlackstoneSlab': ItemType;\n    /**\n     * Represents an item that can place a set of polished\n     * blackstone stairs within Minecraft.\n     */\n    static readonly 'polishedBlackstoneStairs': ItemType;\n    /**\n     * Represents an item that can place a polished blackstone wall\n     * within Minecraft.\n     */\n    static readonly 'polishedBlackstoneWall': ItemType;\n    /**\n     * Represents an item that can place a block of polished\n     * deepslate within Minecraft.\n     */\n    static readonly 'polishedDeepslate': ItemType;\n    /**\n     * Represents an item that can place a double slab of polished\n     * deepslate within Minecraft.\n     */\n    static readonly 'polishedDeepslateDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a slab of polished\n     * deepslate within Minecraft.\n     */\n    static readonly 'polishedDeepslateSlab': ItemType;\n    /**\n     * Represents an item that can place a set of polished\n     * deepslate stairs within Minecraft.\n     */\n    static readonly 'polishedDeepslateStairs': ItemType;\n    /**\n     * Represents an item that can place a wall of polished\n     * deepslate within Minecraft.\n     */\n    static readonly 'polishedDeepslateWall': ItemType;\n    /**\n     * Represents an item that can place a block of polished\n     * diorite within Minecraft.\n     */\n    static readonly 'polishedDioriteStairs': ItemType;\n    /**\n     * Represents an item that can place a set of polished granite\n     * stairs within Minecraft.\n     */\n    static readonly 'polishedGraniteStairs': ItemType;\n    static readonly 'poppedChorusFruit': ItemType;\n    static readonly 'porkchop': ItemType;\n    /**\n     * Represents an item that can place a portal within Minecraft.\n     */\n    static readonly 'portal': ItemType;\n    static readonly 'potato': ItemType;\n    /**\n     * Represents an item that can place a set of potatoes within\n     * Minecraft.\n     */\n    static readonly 'potatoes': ItemType;\n    static readonly 'potion': ItemType;\n    /**\n     * Represents an item that can place a block of powder snow\n     * within Minecraft.\n     */\n    static readonly 'powderSnow': ItemType;\n    static readonly 'powderSnowBucket': ItemType;\n    /**\n     * Represents an item that can place a powered comparator\n     * within Minecraft.\n     */\n    static readonly 'poweredComparator': ItemType;\n    /**\n     * Represents an item that can place a powered repeater within\n     * Minecraft.\n     */\n    static readonly 'poweredRepeater': ItemType;\n    /**\n     * Represents an item that can place a block of prismarine\n     * within Minecraft.\n     */\n    static readonly 'prismarine': ItemType;\n    /**\n     * Represents an item that can place a set of prismarine brick\n     * stairs within Minecraft.\n     */\n    static readonly 'prismarineBricksStairs': ItemType;\n    static readonly 'prismarineCrystals': ItemType;\n    static readonly 'prismarineShard': ItemType;\n    /**\n     * Represents an item that can place a set of prismarine stairs\n     * within Minecraft.\n     */\n    static readonly 'prismarineStairs': ItemType;\n    static readonly 'pufferfish': ItemType;\n    static readonly 'pufferfishBucket': ItemType;\n    static readonly 'pufferfishSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a pumpkin within\n     * Minecraft.\n     */\n    static readonly 'pumpkin': ItemType;\n    static readonly 'pumpkinPie': ItemType;\n    static readonly 'pumpkinSeeds': ItemType;\n    /**\n     * Represents an item that can place a pumpkin stem within\n     * Minecraft.\n     */\n    static readonly 'pumpkinStem': ItemType;\n    /**\n     * Represents an item that can place a purple candle within\n     * Minecraft.\n     */\n    static readonly 'purpleCandle': ItemType;\n    /**\n     * Represents an item that can place a purple colored candle\n     * cake within Minecraft.\n     */\n    static readonly 'purpleCandleCake': ItemType;\n    static readonly 'purpleDye': ItemType;\n    /**\n     * Represents an item that can place a purple-colored block of\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'purpleGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a purpur block within\n     * Minecraft.\n     */\n    static readonly 'purpurBlock': ItemType;\n    /**\n     * Represents an item that can place a set of purpur stairs\n     * within Minecraft.\n     */\n    static readonly 'purpurStairs': ItemType;\n    static readonly 'quartz': ItemType;\n    /**\n     * Represents an item that can place a block of solid quartz\n     * within Minecraft.\n     */\n    static readonly 'quartzBlock': ItemType;\n    /**\n     * Represents an item that can place a block of solid quartz\n     * bricks within Minecraft.\n     */\n    static readonly 'quartzBricks': ItemType;\n    /**\n     * Represents an item that can place a block with embedded\n     * quartz ore within Minecraft.\n     */\n    static readonly 'quartzOre': ItemType;\n    /**\n     * Represents an item that can place a set of quartz stairs\n     * within Minecraft.\n     */\n    static readonly 'quartzStairs': ItemType;\n    static readonly 'rabbit': ItemType;\n    static readonly 'rabbitFoot': ItemType;\n    static readonly 'rabbitHide': ItemType;\n    static readonly 'rabbitSpawnEgg': ItemType;\n    static readonly 'rabbitStew': ItemType;\n    /**\n     * Represents an item that can place a set of rails within\n     * Minecraft.\n     */\n    static readonly 'rail': ItemType;\n    static readonly 'rapidFertilizer': ItemType;\n    static readonly 'ravagerSpawnEgg': ItemType;\n    static readonly 'rawCopper': ItemType;\n    /**\n     * Represents an item that can place a block of raw copper\n     * within Minecraft.\n     */\n    static readonly 'rawCopperBlock': ItemType;\n    static readonly 'rawGold': ItemType;\n    /**\n     * Represents an item that can place a block of raw gold within\n     * Minecraft.\n     */\n    static readonly 'rawGoldBlock': ItemType;\n    static readonly 'rawIron': ItemType;\n    /**\n     * Represents an item that can place a block of raw iron within\n     * Minecraft.\n     */\n    static readonly 'rawIronBlock': ItemType;\n    static readonly 'recoveryCompass': ItemType;\n    /**\n     * Represents an item that can place a red candle within\n     * Minecraft.\n     */\n    static readonly 'redCandle': ItemType;\n    /**\n     * Represents an item that can place a red candle cake within\n     * Minecraft.\n     */\n    static readonly 'redCandleCake': ItemType;\n    static readonly 'redDye': ItemType;\n    /**\n     * Represents an item that can place a red flower within\n     * Minecraft.\n     */\n    static readonly 'redFlower': ItemType;\n    /**\n     * Represents an item that can place a red-colored block of\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'redGlazedTerracotta': ItemType;\n    /**\n     * Represents an item that can place a red mushroom within\n     * Minecraft.\n     */\n    static readonly 'redMushroom': ItemType;\n    /**\n     * Represents an item that can place a block of red mushroom\n     * within Minecraft.\n     */\n    static readonly 'redMushroomBlock': ItemType;\n    /**\n     * Represents an item that can place a block of red nether\n     * brick within Minecraft.\n     */\n    static readonly 'redNetherBrick': ItemType;\n    /**\n     * Represents an item that can place a set of red nether brick\n     * stairs within Minecraft.\n     */\n    static readonly 'redNetherBrickStairs': ItemType;\n    /**\n     * Represents an item that can place a block of red sandstone\n     * within Minecraft.\n     */\n    static readonly 'redSandstone': ItemType;\n    /**\n     * Represents an item that can place a set of red sandstone\n     * stairs within Minecraft.\n     */\n    static readonly 'redSandstoneStairs': ItemType;\n    static readonly 'redstone': ItemType;\n    /**\n     * Represents an item that can place a block of redstone within\n     * Minecraft.\n     */\n    static readonly 'redstoneBlock': ItemType;\n    /**\n     * Represents an item that can place a redstone lamp within\n     * Minecraft.\n     */\n    static readonly 'redstoneLamp': ItemType;\n    /**\n     * Represents an item that can place a block with embedded\n     * redstone ore within Minecraft.\n     */\n    static readonly 'redstoneOre': ItemType;\n    /**\n     * Represents an item that can place a redstone torch within\n     * Minecraft.\n     */\n    static readonly 'redstoneTorch': ItemType;\n    /**\n     * Represents an item that can place a redstone wire within\n     * Minecraft.\n     */\n    static readonly 'redstoneWire': ItemType;\n    static readonly 'reinforcedDeepslate': ItemType;\n    static readonly 'repeater': ItemType;\n    /**\n     * Represents an item that can place a repeating command block\n     * within Minecraft.\n     */\n    static readonly 'repeatingCommandBlock': ItemType;\n    /**\n     * Represents an item that can place a reserved block within\n     * Minecraft.\n     */\n    static readonly 'reserved6': ItemType;\n    /**\n     * Represents an item that can place a respawn anchor within\n     * Minecraft.\n     */\n    static readonly 'respawnAnchor': ItemType;\n    static readonly 'rottenFlesh': ItemType;\n    static readonly 'saddle': ItemType;\n    static readonly 'salmon': ItemType;\n    static readonly 'salmonBucket': ItemType;\n    static readonly 'salmonSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a block of sand within\n     * Minecraft.\n     */\n    static readonly 'sand': ItemType;\n    /**\n     * Represents an item that can place a block of sandstone\n     * within Minecraft.\n     */\n    static readonly 'sandstone': ItemType;\n    /**\n     * Represents an item that can place a set of sandstone stairs\n     * within Minecraft.\n     */\n    static readonly 'sandstoneStairs': ItemType;\n    /**\n     * Represents an item that can place a sapling within\n     * Minecraft.\n     */\n    static readonly 'sapling': ItemType;\n    /**\n     * Represents an item that can place a set of scaffolding\n     * within Minecraft.\n     */\n    static readonly 'scaffolding': ItemType;\n    static readonly 'sculk': ItemType;\n    static readonly 'sculkCatalyst': ItemType;\n    /**\n     * Represents an item that can place a sculk sensor within\n     * Minecraft.\n     */\n    static readonly 'sculkSensor': ItemType;\n    static readonly 'sculkShrieker': ItemType;\n    static readonly 'sculkVein': ItemType;\n    static readonly 'scute': ItemType;\n    /**\n     * Represents seagrass within Minecraft.\n     */\n    static readonly 'seagrass': ItemType;\n    static readonly 'seaLantern': ItemType;\n    /**\n     * Represents an item that can place a seapickle within\n     * Minecraft.\n     */\n    static readonly 'seaPickle': ItemType;\n    static readonly 'shears': ItemType;\n    static readonly 'sheepSpawnEgg': ItemType;\n    static readonly 'shield': ItemType;\n    /**\n     * Represents an item that can place a shroom light within\n     * Minecraft.\n     */\n    static readonly 'shroomlight': ItemType;\n    /**\n     * Represents an item that can place a shulker box within\n     * Minecraft.\n     */\n    static readonly 'shulkerBox': ItemType;\n    static readonly 'shulkerShell': ItemType;\n    static readonly 'shulkerSpawnEgg': ItemType;\n    static readonly 'silverfishSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a silver-colored block of\n     * glazed terracotta within Minecraft.\n     */\n    static readonly 'silverGlazedTerracotta': ItemType;\n    static readonly 'skeletonHorseSpawnEgg': ItemType;\n    static readonly 'skeletonSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a skull within Minecraft.\n     */\n    static readonly 'skull': ItemType;\n    static readonly 'skullBannerPattern': ItemType;\n    /**\n     * Represents slime within Minecraft.\n     */\n    static readonly 'slime': ItemType;\n    static readonly 'slimeBall': ItemType;\n    static readonly 'slimeSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a small bud of amethyst\n     * within Minecraft.\n     */\n    static readonly 'smallAmethystBud': ItemType;\n    /**\n     * Represents an item that can place a small dripleaf block\n     * within Minecraft.\n     */\n    static readonly 'smallDripleafBlock': ItemType;\n    /**\n     * Represents an item that can place a smithing table within\n     * Minecraft.\n     */\n    static readonly 'smithingTable': ItemType;\n    /**\n     * Represents an item that can place a smoker within Minecraft.\n     */\n    static readonly 'smoker': ItemType;\n    /**\n     * Represents an item that can place a block of smooth basalt\n     * within Minecraft.\n     */\n    static readonly 'smoothBasalt': ItemType;\n    /**\n     * Represents an item that can place a set of smooth quartz\n     * stairs within Minecraft.\n     */\n    static readonly 'smoothQuartzStairs': ItemType;\n    /**\n     * Represents an item that can place a set of smooth red\n     * sandstone stairs within Minecraft.\n     */\n    static readonly 'smoothRedSandstoneStairs': ItemType;\n    /**\n     * Represents an item that can place a set of smooth redstone\n     * stairs within Minecraft.\n     */\n    static readonly 'smoothSandstoneStairs': ItemType;\n    /**\n     * Represents an item that can place a smooth stone block\n     * within Minecraft.\n     */\n    static readonly 'smoothStone': ItemType;\n    /**\n     * Represents snow within Minecraft.\n     */\n    static readonly 'snow': ItemType;\n    static readonly 'snowball': ItemType;\n    /**\n     * Represents an item that can place a layer of snow within\n     * Minecraft.\n     */\n    static readonly 'snowLayer': ItemType;\n    /**\n     * Represents an item that can place a soul campfire within\n     * Minecraft.\n     */\n    static readonly 'soulCampfire': ItemType;\n    /**\n     * Represents soul fire within Minecraft.\n     */\n    static readonly 'soulFire': ItemType;\n    /**\n     * Represents an item that can place a soul lantern within\n     * Minecraft.\n     */\n    static readonly 'soulLantern': ItemType;\n    /**\n     * Represents an item that can place a block of soul sand\n     * within Minecraft.\n     */\n    static readonly 'soulSand': ItemType;\n    /**\n     * Represents soul soil within Minecraft.\n     */\n    static readonly 'soulSoil': ItemType;\n    /**\n     * Represents an item that can place a soul torch within\n     * Minecraft.\n     */\n    static readonly 'soulTorch': ItemType;\n    static readonly 'sparkler': ItemType;\n    static readonly 'spawnEgg': ItemType;\n    static readonly 'spiderEye': ItemType;\n    static readonly 'spiderSpawnEgg': ItemType;\n    static readonly 'splashPotion': ItemType;\n    /**\n     * Represents an item that can place a sponge within Minecraft.\n     */\n    static readonly 'sponge': ItemType;\n    /**\n     * Represents an item that can place a spore blossom within\n     * Minecraft.\n     */\n    static readonly 'sporeBlossom': ItemType;\n    static readonly 'spruceBoat': ItemType;\n    /**\n     * Represents an item that can place a spruce wood button\n     * within Minecraft.\n     */\n    static readonly 'spruceButton': ItemType;\n    static readonly 'spruceChestBoat': ItemType;\n    /**\n     * Represents an item that can place a spruce wood door within\n     * Minecraft.\n     */\n    static readonly 'spruceDoor': ItemType;\n    /**\n     * Represents an item that can place a spruce wood fence gate\n     * within Minecraft.\n     */\n    static readonly 'spruceFenceGate': ItemType;\n    /**\n     * Represents an item that can place a spruce wood pressure\n     * plate within Minecraft.\n     */\n    static readonly 'sprucePressurePlate': ItemType;\n    /**\n     * Represents an item that can place a spruce sign within\n     * Minecraft.\n     */\n    static readonly 'spruceSign': ItemType;\n    /**\n     * Represents an item that can place a set of spruce wood\n     * stairs within Minecraft.\n     */\n    static readonly 'spruceStairs': ItemType;\n    /**\n     * Represents an item that can place a spruce wood standing\n     * sign within Minecraft.\n     */\n    static readonly 'spruceStandingSign': ItemType;\n    /**\n     * Represents an item that can place a spruce wood trapdoor\n     * within Minecraft.\n     */\n    static readonly 'spruceTrapdoor': ItemType;\n    /**\n     * Represents an item that can place a spruce wood wall sign\n     * within Minecraft.\n     */\n    static readonly 'spruceWallSign': ItemType;\n    static readonly 'spyglass': ItemType;\n    static readonly 'squidSpawnEgg': ItemType;\n    /**\n     * Represents stained glass within Minecraft.\n     */\n    static readonly 'stainedGlass': ItemType;\n    /**\n     * Represents an item that can place a pane of stained glass\n     * within Minecraft.\n     */\n    static readonly 'stainedGlassPane': ItemType;\n    /**\n     * Represents an item that can place a block of stained\n     * hardened clay within Minecraft.\n     */\n    static readonly 'stainedHardenedClay': ItemType;\n    /**\n     * Represents an item that can place a standing banner within\n     * Minecraft.\n     */\n    static readonly 'standingBanner': ItemType;\n    /**\n     * Represents an item that can place a standing sign within\n     * Minecraft.\n     */\n    static readonly 'standingSign': ItemType;\n    static readonly 'stick': ItemType;\n    /**\n     * Represents an item that can place a piston block with a\n     * sticky arm within Minecraft.\n     */\n    static readonly 'stickyPiston': ItemType;\n    static readonly 'stickyPistonArmCollision': ItemType;\n    /**\n     * Represents an item that can place a block of stone within\n     * Minecraft.\n     */\n    static readonly 'stone': ItemType;\n    static readonly 'stoneAxe': ItemType;\n    static readonly 'stoneBlockSlab': ItemType;\n    static readonly 'stoneBlockSlab2': ItemType;\n    static readonly 'stoneBlockSlab3': ItemType;\n    static readonly 'stoneBlockSlab4': ItemType;\n    /**\n     * Represents an item that can place a block of stone brick\n     * within Minecraft.\n     */\n    static readonly 'stonebrick': ItemType;\n    /**\n     * Represents an item that can place a set of stone brick\n     * stairs within Minecraft.\n     */\n    static readonly 'stoneBrickStairs': ItemType;\n    /**\n     * Represents an item that can place a stone button within\n     * Minecraft.\n     */\n    static readonly 'stoneButton': ItemType;\n    /**\n     * Represents an item that can place a stonecutter within\n     * Minecraft.\n     */\n    static readonly 'stonecutter': ItemType;\n    /**\n     * Represents an item that can place a stonecutter block within\n     * Minecraft.\n     */\n    static readonly 'stonecutterBlock': ItemType;\n    static readonly 'stoneHoe': ItemType;\n    static readonly 'stonePickaxe': ItemType;\n    /**\n     * Represents an item that can place a stone pressure plate\n     * within Minecraft.\n     */\n    static readonly 'stonePressurePlate': ItemType;\n    static readonly 'stoneShovel': ItemType;\n    /**\n     * Represents an item that can place a set of stone stairs\n     * within Minecraft.\n     */\n    static readonly 'stoneStairs': ItemType;\n    static readonly 'stoneSword': ItemType;\n    static readonly 'straySpawnEgg': ItemType;\n    static readonly 'striderSpawnEgg': ItemType;\n    static readonly 'string': ItemType;\n    /**\n     * Represents an item that can place a stripped acacia log\n     * within Minecraft.\n     */\n    static readonly 'strippedAcaciaLog': ItemType;\n    /**\n     * Represents an item that can place a stripped birch log\n     * within Minecraft.\n     */\n    static readonly 'strippedBirchLog': ItemType;\n    /**\n     * Represents stripped crimson hyphae within Minecraft.\n     */\n    static readonly 'strippedCrimsonHyphae': ItemType;\n    /**\n     * Represents an item that can place a stripped crimson stem\n     * within Minecraft.\n     */\n    static readonly 'strippedCrimsonStem': ItemType;\n    /**\n     * Represents an item that can place a stripped dark oak log\n     * within Minecraft.\n     */\n    static readonly 'strippedDarkOakLog': ItemType;\n    /**\n     * Represents an item that can place a stripped jungle log\n     * within Minecraft.\n     */\n    static readonly 'strippedJungleLog': ItemType;\n    static readonly 'strippedMangroveLog': ItemType;\n    static readonly 'strippedMangroveWood': ItemType;\n    /**\n     * Represents an item that can place a stripped oak log within\n     * Minecraft.\n     */\n    static readonly 'strippedOakLog': ItemType;\n    /**\n     * Represents an item that can place a stripped spruce log\n     * within Minecraft.\n     */\n    static readonly 'strippedSpruceLog': ItemType;\n    /**\n     * Represents stripped warped hyphae within Minecraft.\n     */\n    static readonly 'strippedWarpedHyphae': ItemType;\n    /**\n     * Represents stripped warped stem within Minecraft.\n     */\n    static readonly 'strippedWarpedStem': ItemType;\n    /**\n     * Represents an item that can place a structure block, which\n     * provides for the saving and loading of block structures,\n     * within Minecraft.\n     */\n    static readonly 'structureBlock': ItemType;\n    /**\n     * Represents an item that can place a structure void within\n     * Minecraft.\n     */\n    static readonly 'structureVoid': ItemType;\n    static readonly 'sugar': ItemType;\n    static readonly 'sugarCane': ItemType;\n    static readonly 'suspiciousStew': ItemType;\n    static readonly 'sweetBerries': ItemType;\n    /**\n     * Represents an item that can place a sweet berry bush within\n     * Minecraft.\n     */\n    static readonly 'sweetBerryBush': ItemType;\n    static readonly 'tadpoleBucket': ItemType;\n    static readonly 'tadpoleSpawnEgg': ItemType;\n    /**\n     * Represents tall grass within Minecraft.\n     */\n    static readonly 'tallgrass': ItemType;\n    /**\n     * Represents an item that can place a target within Minecraft.\n     */\n    static readonly 'target': ItemType;\n    /**\n     * Represents tinted glass within Minecraft.\n     */\n    static readonly 'tintedGlass': ItemType;\n    /**\n     * Represents an item that can place a block of TnT within\n     * Minecraft.\n     */\n    static readonly 'tnt': ItemType;\n    static readonly 'tntMinecart': ItemType;\n    /**\n     * Represents an item that can place a torch within Minecraft.\n     */\n    static readonly 'torch': ItemType;\n    static readonly 'totemOfUndying': ItemType;\n    /**\n     * Represents an item that can place a trapdoor within\n     * Minecraft.\n     */\n    static readonly 'trapdoor': ItemType;\n    /**\n     * Represents an item that can place a trapped chest within\n     * Minecraft.\n     */\n    static readonly 'trappedChest': ItemType;\n    static readonly 'trident': ItemType;\n    static readonly 'tripWire': ItemType;\n    /**\n     * Represents an item that can place a tripwire hook within\n     * Minecraft.\n     */\n    static readonly 'tripwireHook': ItemType;\n    static readonly 'tropicalFish': ItemType;\n    static readonly 'tropicalFishBucket': ItemType;\n    static readonly 'tropicalFishSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a block of tuff within\n     * Minecraft.\n     */\n    static readonly 'tuff': ItemType;\n    /**\n     * Represents an item that can place a turtle egg within\n     * Minecraft.\n     */\n    static readonly 'turtleEgg': ItemType;\n    static readonly 'turtleHelmet': ItemType;\n    static readonly 'turtleSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a set of twisting vines\n     * within Minecraft.\n     */\n    static readonly 'twistingVines': ItemType;\n    /**\n     * Represents an item that can place an underwater torch within\n     * Minecraft.\n     */\n    static readonly 'underwaterTorch': ItemType;\n    /**\n     * Represents an item that can place an undyed shulker box\n     * within Minecraft.\n     */\n    static readonly 'undyedShulkerBox': ItemType;\n    /**\n     * Represents an item that can place an unknown block within\n     * Minecraft.\n     */\n    static readonly 'unknown': ItemType;\n    /**\n     * Represents an item that can place an unlit redstone torch\n     * within Minecraft.\n     */\n    static readonly 'unlitRedstoneTorch': ItemType;\n    /**\n     * Represents an item that can place an unpowered comparator\n     * within Minecraft.\n     */\n    static readonly 'unpoweredComparator': ItemType;\n    /**\n     * Represents an item that can place an unpowered repeater\n     * within Minecraft.\n     */\n    static readonly 'unpoweredRepeater': ItemType;\n    static readonly 'verdantFroglight': ItemType;\n    static readonly 'vexSpawnEgg': ItemType;\n    static readonly 'villagerSpawnEgg': ItemType;\n    static readonly 'vindicatorSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a set of vines within\n     * Minecraft.\n     */\n    static readonly 'vine': ItemType;\n    /**\n     * Represents an item that can place a wall banner within\n     * Minecraft.\n     */\n    static readonly 'wallBanner': ItemType;\n    /**\n     * Represents an item that can place a wall sign within\n     * Minecraft.\n     */\n    static readonly 'wallSign': ItemType;\n    static readonly 'wanderingTraderSpawnEgg': ItemType;\n    static readonly 'wardenSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a warped button within\n     * Minecraft.\n     */\n    static readonly 'warpedButton': ItemType;\n    /**\n     * Represents an item that can place a warped door within\n     * Minecraft.\n     */\n    static readonly 'warpedDoor': ItemType;\n    /**\n     * Represents an item that can place a double slab of warped\n     * within Minecraft.\n     */\n    static readonly 'warpedDoubleSlab': ItemType;\n    /**\n     * Represents an item that can place a warped fence within\n     * Minecraft.\n     */\n    static readonly 'warpedFence': ItemType;\n    /**\n     * Represents an item that can place a warped fence gate within\n     * Minecraft.\n     */\n    static readonly 'warpedFenceGate': ItemType;\n    /**\n     * Represents warped fungus within Minecraft.\n     */\n    static readonly 'warpedFungus': ItemType;\n    static readonly 'warpedFungusOnAStick': ItemType;\n    /**\n     * Represents warped hyphae within Minecraft.\n     */\n    static readonly 'warpedHyphae': ItemType;\n    /**\n     * Represents warped nylium within Minecraft.\n     */\n    static readonly 'warpedNylium': ItemType;\n    /**\n     * Represents warped planks within Minecraft.\n     */\n    static readonly 'warpedPlanks': ItemType;\n    /**\n     * Represents an item that can place a warped pressure plate\n     * within Minecraft.\n     */\n    static readonly 'warpedPressurePlate': ItemType;\n    /**\n     * Represents an item that can place a set of warped roots\n     * within Minecraft.\n     */\n    static readonly 'warpedRoots': ItemType;\n    static readonly 'warpedSign': ItemType;\n    /**\n     * Represents an item that can place a slab of warped material\n     * within Minecraft.\n     */\n    static readonly 'warpedSlab': ItemType;\n    /**\n     * Represents an item that can place a set of warped stairs\n     * within Minecraft.\n     */\n    static readonly 'warpedStairs': ItemType;\n    /**\n     * Represents an item that can place a warped standing sign\n     * within Minecraft.\n     */\n    static readonly 'warpedStandingSign': ItemType;\n    /**\n     * Represents an item that can place a warped stem within\n     * Minecraft.\n     */\n    static readonly 'warpedStem': ItemType;\n    /**\n     * Represents an item that can place a warped trapdoor within\n     * Minecraft.\n     */\n    static readonly 'warpedTrapdoor': ItemType;\n    /**\n     * Represents an item that can place a warped wall sign within\n     * Minecraft.\n     */\n    static readonly 'warpedWallSign': ItemType;\n    /**\n     * Represents an item that can place a warped wart block within\n     * Minecraft.\n     */\n    static readonly 'warpedWartBlock': ItemType;\n    /**\n     * Represents water within Minecraft.\n     */\n    static readonly 'water': ItemType;\n    static readonly 'waterBucket': ItemType;\n    /**\n     * Represents an item that can place a water lily within\n     * Minecraft.\n     */\n    static readonly 'waterlily': ItemType;\n    /**\n     * Represents an item that can place a block of waxed copper\n     * within Minecraft.\n     */\n    static readonly 'waxedCopper': ItemType;\n    /**\n     * Represents an item that can place a block of waxed cut\n     * copper within Minecraft.\n     */\n    static readonly 'waxedCutCopper': ItemType;\n    /**\n     * Represents an item that can place a slab of waxed cut copper\n     * within Minecraft.\n     */\n    static readonly 'waxedCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a set of waxed cut copper\n     * stairs within Minecraft.\n     */\n    static readonly 'waxedCutCopperStairs': ItemType;\n    /**\n     * Represents an item that can place a double slab of waxed cut\n     * copper within Minecraft.\n     */\n    static readonly 'waxedDoubleCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a block of waxed exposed\n     * copper within Minecraft.\n     */\n    static readonly 'waxedExposedCopper': ItemType;\n    /**\n     * Represents an item that can place a block of waxed exposed\n     * cut copper within Minecraft.\n     */\n    static readonly 'waxedExposedCutCopper': ItemType;\n    /**\n     * Represents an item that can place a slab of waxed exposed\n     * cut copper within Minecraft.\n     */\n    static readonly 'waxedExposedCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a set of waxed exposed cut\n     * copper stairs within Minecraft.\n     */\n    static readonly 'waxedExposedCutCopperStairs': ItemType;\n    /**\n     * Represents an item that can place a double slab of waxed\n     * exposed cut copper within Minecraft.\n     */\n    static readonly 'waxedExposedDoubleCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a block of waxed oxidized\n     * copper within Minecraft.\n     */\n    static readonly 'waxedOxidizedCopper': ItemType;\n    /**\n     * Represents an item that can place a block of waxed oxidized\n     * cut copper within Minecraft.\n     */\n    static readonly 'waxedOxidizedCutCopper': ItemType;\n    /**\n     * Represents an item that can place a slab of waxed oxidized\n     * cut copper within Minecraft.\n     */\n    static readonly 'waxedOxidizedCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a set of waxed oxidized\n     * cut copper stairs within Minecraft.\n     */\n    static readonly 'waxedOxidizedCutCopperStairs': ItemType;\n    /**\n     * Represents an item that can place a double slab of waxed\n     * oxidized cut copper within Minecraft.\n     */\n    static readonly 'waxedOxidizedDoubleCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a block of waxed weathered\n     * copper within Minecraft.\n     */\n    static readonly 'waxedWeatheredCopper': ItemType;\n    /**\n     * Represents an item that can place a block of waxed weathered\n     * cut copper within Minecraft.\n     */\n    static readonly 'waxedWeatheredCutCopper': ItemType;\n    /**\n     * Represents an item that can place a slab of waxed weathered\n     * cut copper within Minecraft.\n     */\n    static readonly 'waxedWeatheredCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a set of waxed weathered\n     * cut copper stairs within Minecraft.\n     */\n    static readonly 'waxedWeatheredCutCopperStairs': ItemType;\n    /**\n     * Represents an item that can place a double slab of waxed\n     * weathered cut copper within Minecraft.\n     */\n    static readonly 'waxedWeatheredDoubleCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a block of weathered\n     * copper within Minecraft.\n     */\n    static readonly 'weatheredCopper': ItemType;\n    /**\n     * Represents an item that can place a block of weathered cut\n     * copper within Minecraft.\n     */\n    static readonly 'weatheredCutCopper': ItemType;\n    /**\n     * Represents an item that can place a slab of weathered cut\n     * copper within Minecraft.\n     */\n    static readonly 'weatheredCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a set of weathered cut\n     * copper stairs within Minecraft.\n     */\n    static readonly 'weatheredCutCopperStairs': ItemType;\n    /**\n     * Represents an item that can place a double slab of weathered\n     * cut copper within Minecraft.\n     */\n    static readonly 'weatheredDoubleCutCopperSlab': ItemType;\n    /**\n     * Represents an item that can place a web within Minecraft.\n     */\n    static readonly 'web': ItemType;\n    /**\n     * Represents an item that can place a set of weeping vines\n     * within Minecraft.\n     */\n    static readonly 'weepingVines': ItemType;\n    /**\n     * Represents wheat within Minecraft.\n     */\n    static readonly 'wheat': ItemType;\n    static readonly 'wheatSeeds': ItemType;\n    /**\n     * Represents an item that can place a white candle within\n     * Minecraft.\n     */\n    static readonly 'whiteCandle': ItemType;\n    /**\n     * Represents an item that can place a white candle cake within\n     * Minecraft.\n     */\n    static readonly 'whiteCandleCake': ItemType;\n    static readonly 'whiteDye': ItemType;\n    /**\n     * Represents an item that can place a block of white glazed\n     * terracotta within Minecraft.\n     */\n    static readonly 'whiteGlazedTerracotta': ItemType;\n    static readonly 'witchSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a wither rose within\n     * Minecraft.\n     */\n    static readonly 'witherRose': ItemType;\n    static readonly 'witherSkeletonSpawnEgg': ItemType;\n    static readonly 'wolfSpawnEgg': ItemType;\n    /**\n     * Represents an item that can place a block of wood within\n     * Minecraft.\n     */\n    static readonly 'wood': ItemType;\n    static readonly 'woodenAxe': ItemType;\n    /**\n     * Represents an item that can place a wooden button within\n     * Minecraft.\n     */\n    static readonly 'woodenButton': ItemType;\n    /**\n     * Represents an item that can place a wooden door within\n     * Minecraft.\n     */\n    static readonly 'woodenDoor': ItemType;\n    static readonly 'woodenHoe': ItemType;\n    static readonly 'woodenPickaxe': ItemType;\n    /**\n     * Represents an item that can place a wooden pressure plate\n     * within Minecraft.\n     */\n    static readonly 'woodenPressurePlate': ItemType;\n    static readonly 'woodenShovel': ItemType;\n    /**\n     * Represents an item that can place a wooden slab within\n     * Minecraft.\n     */\n    static readonly 'woodenSlab': ItemType;\n    static readonly 'woodenSword': ItemType;\n    /**\n     * Represents wool within Minecraft.\n     */\n    static readonly 'wool': ItemType;\n    static readonly 'writableBook': ItemType;\n    static readonly 'writtenBook': ItemType;\n    /**\n     * Represents an item that can place a yellow candle within\n     * Minecraft.\n     */\n    static readonly 'yellowCandle': ItemType;\n    /**\n     * Represents an item that can place a yellow candle cake\n     * within Minecraft.\n     */\n    static readonly 'yellowCandleCake': ItemType;\n    static readonly 'yellowDye': ItemType;\n    /**\n     * Represents an item that can place a yellow flower within\n     * Minecraft.\n     */\n    static readonly 'yellowFlower': ItemType;\n    /**\n     * Represents an item that can place a yellow block of glazed\n     * terracotta within Minecraft.\n     */\n    static readonly 'yellowGlazedTerracotta': ItemType;\n    static readonly 'zoglinSpawnEgg': ItemType;\n    static readonly 'zombieHorseSpawnEgg': ItemType;\n    static readonly 'zombiePigmanSpawnEgg': ItemType;\n    static readonly 'zombieSpawnEgg': ItemType;\n    static readonly 'zombieVillagerSpawnEgg': ItemType;\n    protected constructor();\n}\n/**\n * Contains a set of additional variable values for further\n * defining how rendering and animations function.\n */\ndeclare class MolangVariableMap {\n    /**\n     * @remarks\n     * Sets a Molang rendering/animation variable with the value of\n     * a Red/Green/Blue color.\n     * @param variableName\n     * @param color\n     */\n    setColorRGB(variableName: string, color: Color): MolangVariableMap;\n    /**\n     * @remarks\n     * Sets a Molang rendering/animation variable with the value of\n     * a Red/Green/Blue color + Alpha (transparency) value.\n     * @param variableName\n     * @param color\n     */\n    setColorRGBA(variableName: string, color: Color): MolangVariableMap;\n    /**\n     * @remarks\n     * Sets the speed and direction for a Molang (rendering and\n     * animation) variable.\n     * @param variableName\n     * @param speed\n     * @param direction\n     */\n    setSpeedAndDirection(variableName: string, speed: number, direction: Vector): MolangVariableMap;\n    /**\n     * @remarks\n     * Sets a vector value for a Molang (rendering and animation)\n     * variable.\n     * @param variableName\n     * @param vector\n     */\n    setVector3(variableName: string, vector: Vector): MolangVariableMap;\n}\n/**\n * Additional configuration options for\n * {@link mojang-minecraft.World.playMusic}/{@link mojang-minecraft.World.queueMusic}\n * methods.\n */\ndeclare class MusicOptions {\n    /**\n     * Specifies a fade overlap for music at the end of play.\n     */\n    'fade': number;\n    /**\n     * If set to true, this music track will play repeatedly.\n     */\n    'loop': boolean;\n    /**\n     * Relative volume level of the music.\n     */\n    'volume': number;\n}\n/**\n * Contains data resulting from a navigation operation,\n * including whether the navigation is possible and the path of\n * navigation.\n */\ndeclare class NavigationResult {\n    /**\n     * Whether the navigation result contains a full path,\n     * including to the requested destination.\n     */\n    readonly 'isFullPath': boolean;\n    /**\n     * A set of block locations that comprise the navigation route.\n     */\n    readonly 'path': BlockLocation[];\n    protected constructor();\n}\n/**\n * Represents a min/max structure for expressing a potential\n * range of numbers.\n */\ndeclare class NumberRange {\n    /**\n     * Maximum value within a range.\n     */\n    'max': number;\n    /**\n     * Minimum value within a range.\n     */\n    'min': number;\n    /**\n     * @remarks\n     * Returns a random number between the minimum and maximum of\n     * the range.\n     */\n    next(): number;\n    protected constructor();\n}\n/**\n * Contains information related to changes to a piston\n * expanding or retracting.\n */\ndeclare class PistonActivateEvent extends BlockEvent {\n    /**\n     * Block impacted by this event.\n     */\n    readonly 'block': Block;\n    /**\n     * Dimension that contains the block that is the subject of\n     * this event.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * True if the piston is the process of expanding.\n     */\n    readonly 'isExpanding': boolean;\n    /**\n     * Contains additional properties and details of the piston.\n     */\n    readonly 'piston': BlockPistonComponent;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to piston activations.\n */\ndeclare class PistonActivateEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a piston expands or\n     * retracts.\n     * @param callback\n     * @example pistonEvent.ts\n     * ```typescript\n     *          let canceled = false;\n     *\n     *          const pistonLoc = new mc.BlockLocation(\n     *            Math.floor(targetLocation.x) + 1,\n     *            Math.floor(targetLocation.y) + 2,\n     *            Math.floor(targetLocation.z) + 1\n     *          );\n     *\n     *          const pistonCallback = mc.world.events.beforePistonActivate.subscribe((pistonEvent: mc.BeforePistonActivateEvent) => {\n     *            if (pistonEvent.piston.location.equals(pistonLoc)) {\n     *              log(\"Cancelling piston event\");\n     *              pistonEvent.cancel = true;\n     *              canceled = true;\n     *            }\n     *          });\n     * ```\n     */\n    subscribe(callback: (arg: PistonActivateEvent) => void): (arg: PistonActivateEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a piston expands\n     * or retracts.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: PistonActivateEvent) => void): void;\n    protected constructor();\n}\n/**\n * Represents a player within the world.\n */\ndeclare class Player extends Entity {\n    /**\n     * Dimension that the entity is currently within.\n     * @throws This property can throw when used.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * Location of the center of the head component of the player.\n     * @throws This property can throw when used.\n     */\n    readonly 'headLocation': Location;\n    /**\n     * Identifier for the player.\n     * @throws This property can throw when used.\n     */\n    readonly 'id': string;\n    /**\n     * True if the player is currently using a sneaking movement.\n     */\n    'isSneaking': boolean;\n    /**\n     * Current location of the player.\n     * @throws This property can throw when used.\n     */\n    readonly 'location': Location;\n    /**\n     * Name of the player.\n     * @throws This property can throw when used.\n     */\n    readonly 'name': string;\n    /**\n     * Optional name tag of the player.\n     */\n    'nameTag': string;\n    /**\n     * Contains methods for manipulating the on-screen display of a\n     * Player.\n     */\n    readonly 'onScreenDisplay': ScreenDisplay;\n    /**\n     * Main rotation of the entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'rotation': XYRotation;\n    /**\n     * Returns a scoreboard identity that represents this entity.\n     * @throws This property can throw when used.\n     */\n    readonly 'scoreboard': ScoreboardIdentity;\n    /**\n     * Manages the selected slot in the player's hotbar.\n     */\n    'selectedSlot': number;\n    /**\n     * Retrieves or sets an entity that is used as the target of\n     * AI-related behaviors, like attacking. For players, which\n     * don't use any AI semantics, this property does not do\n     * anything.\n     */\n    'target': Entity;\n    /**\n     * Current speed of the player across X, Y, and Z dimensions.\n     * @throws This property can throw when used.\n     */\n    readonly 'velocity': Vector;\n    /**\n     * Vector of the current view of the player.\n     * @throws This property can throw when used.\n     */\n    readonly 'viewVector': Vector;\n    /**\n     * @remarks\n     * Adds an effect, like poison, to the entity.\n     * @param effectType\n     * Type of effect to add to the entity.\n     * @param duration\n     * Amount of time, in ticks, for the effect to apply.\n     * @param amplifier\n     * Optional amplification of the effect to apply.\n     * @param showParticles\n     * @throws This function can throw errors.\n     */\n    addEffect(effectType: EffectType, duration: number, amplifier?: number, showParticles?: boolean): void;\n    /**\n     * @remarks\n     * Adds a specified tag to an entity.\n     * @param tag\n     * Content of the tag to add.\n     * @throws This function can throw errors.\n     */\n    addTag(tag: string): boolean;\n    /**\n     * @remarks\n     * Gets the first block that intersects with the vector of the\n     * view of this entity.\n     * @param options\n     * Additional options for processing this raycast query.\n     * @throws This function can throw errors.\n     */\n    getBlockFromViewVector(options?: BlockRaycastOptions): Block;\n    /**\n     * @remarks\n     * Gets a component (that represents additional capabilities)\n     * for an entity.\n     * @param componentId\n     * The identifier of the component (e.g., 'minecraft:rideable')\n     * to retrieve. If no namespace prefix is specified,\n     * 'minecraft:' is assumed. If the component is not present on\n     * the entity, undefined is returned.\n     */\n    getComponent: EntityComponents;\n    /**\n     * @remarks\n     * Returns all components that are both present on this entity\n     * and supported by the API.\n     */\n    getComponents(): IEntityComponent[];\n    /**\n     * @remarks\n     * Returns a property value.\n     * @param identifier\n     * @returns\n     * Returns the value for the property, or undefined if the\n     * property has not been set.\n     * @throws This function can throw errors.\n     */\n    getDynamicProperty(identifier: string): boolean | number | string;\n    /**\n     * @remarks\n     * Returns the effect for the specified EffectType on the\n     * entity, or undefined if the effect is not present.\n     * @param effectType\n     * @returns\n     * Effect object for the specified effect, or undefined if the\n     * effect is not present.\n     * @throws This function can throw errors.\n     */\n    getEffect(effectType: EffectType): Effect;\n    /**\n     * @remarks\n     * Gets the first entity that intersects with the vector of the\n     * view of this entity.\n     * @param options\n     * Additional options for processing this raycast query.\n     * @throws This function can throw errors.\n     */\n    getEntitiesFromViewVector(options?: EntityRaycastOptions): Entity[];\n    /**\n     * @remarks\n     * Gets the current item cooldown time for a particular\n     * cooldown category.\n     * @param itemCategory\n     * Specifies the cooldown category to retrieve the current\n     * cooldown for.\n     * @throws This function can throw errors.\n     */\n    getItemCooldown(itemCategory: string): number;\n    /**\n     * @remarks\n     * Returns all tags associated with an entity.\n     * @throws This function can throw errors.\n     */\n    getTags(): string[];\n    /**\n     * @remarks\n     * Returns true if the specified component is present on this\n     * entity.\n     * @param componentId\n     * The identifier of the component (e.g., 'minecraft:rideable')\n     * to retrieve. If no namespace prefix is specified,\n     * 'minecraft:' is assumed.\n     */\n    hasComponent(componentId: string): boolean;\n    /**\n     * @remarks\n     * Tests whether an entity has a particular tag.\n     * @param tag\n     * Identifier of the tag to test for.\n     * @throws This function can throw errors.\n     */\n    hasTag(tag: string): boolean;\n    /**\n     * @remarks\n     * Kills this entity. The entity will drop loot as normal.\n     * @throws This function can throw errors.\n     */\n    kill(): void;\n    /**\n     * @remarks\n     * Plays a sound that only this particular player can hear.\n     * @param soundID\n     * Identifier of the sound to play.\n     * @param soundOptions\n     * Additional optional options for the sound.\n     * @throws This function can throw errors.\n     */\n    playSound(soundID: string, soundOptions?: SoundOptions): void;\n    /**\n     * @remarks\n     * Removes a specified property.\n     * @param identifier\n     * @throws This function can throw errors.\n     */\n    removeDynamicProperty(identifier: string): boolean;\n    /**\n     * @remarks\n     * Removes a specified tag from an entity.\n     * @param tag\n     * Content of the tag to remove.\n     * @throws This function can throw errors.\n     */\n    removeTag(tag: string): boolean;\n    /**\n     * @remarks\n     * Runs a particular command from the context of this player.\n     * @param commandString\n     * Command to run. Note that command strings should not start\n     * with slash.\n     * @returns\n     * For commands that return data, returns a JSON structure with\n     * command response values.\n     * @throws This function can throw errors.\n     * @example commands.js\n     * ```typescript\n     *        player.runCommand(\"say You got a new high score!\");\n     *        player.runCommand(\"scoreboard players set @s score 10\");\n     *\n     * ```\n     */\n    runCommand(commandString: string): any;\n    /**\n     * @remarks\n     * Runs a particular command asynchronously from the context of\n     * this entity. Where possible, running a command\n     * asynchronously is recommended, especially for long running\n     * operations.\n     * @param commandString\n     * Command to run. Note that command strings should not start\n     * with slash.\n     * @returns\n     * For commands that return data, returns a JSON structure with\n     * command response values.\n     * @throws This function can throw errors.\n     */\n    runCommandAsync(commandString: string): Promise<CommandResult>;\n    /**\n     * @remarks\n     * Sets a specified property to a value.\n     * @param identifier\n     * @param value\n     * Data value of the property to set.\n     * @throws This function can throw errors.\n     */\n    setDynamicProperty(identifier: string, value: boolean | number | string): void;\n    /**\n     * @remarks\n     * Sets the main rotation of the entity.\n     * @param degreesX\n     * @param degreesY\n     * @throws This function can throw errors.\n     */\n    setRotation(degreesX: number, degreesY: number): void;\n    /**\n     * @remarks\n     * Sets a velocity for the entity to move with.\n     * @param velocity\n     * X/Y/Z components of the velocity.\n     * @throws This function can throw errors.\n     */\n    setVelocity(velocity: Vector): void;\n    /**\n     * @remarks\n     * Sets the item cooldown time for a particular cooldown\n     * category.\n     * @param itemCategory\n     * Specifies the cooldown category to retrieve the current\n     * cooldown for.\n     * @param tickDuration\n     * Duration in ticks of the item cooldown.\n     * @throws This function can throw errors.\n     */\n    startItemCooldown(itemCategory: string, tickDuration: number): void;\n    /**\n     * @remarks\n     * Teleports the selected player to a new location\n     * @param location\n     * New location for the player.\n     * @param dimension\n     * Dimension to move the selected player to.\n     * @param xRotation\n     * X rotation of the player after teleportation.\n     * @param yRotation\n     * Y rotation of the player after teleportation.\n     * @param keepVelocity\n     * @throws This function can throw errors.\n     */\n    teleport(\n        location: Location,\n        dimension: Dimension,\n        xRotation: number,\n        yRotation: number,\n        keepVelocity?: boolean,\n    ): void;\n    /**\n     * @remarks\n     * Teleports the selected player to a new location, and will\n     * have the player facing a specified location.\n     * @param location\n     * New location for the player.\n     * @param dimension\n     * Dimension to move the selected player to.\n     * @param facingLocation\n     * Location that this player will be facing.\n     * @param keepVelocity\n     * @throws This function can throw errors.\n     */\n    teleportFacing(location: Location, dimension: Dimension, facingLocation: Location, keepVelocity?: boolean): void;\n    /**\n     * @remarks\n     * Triggers an entity type event. For every entity, a number of\n     * events are defined in an entities' definition for key entity\n     * behaviors; for example, creepers have a\n     * minecraft:start_exploding type event.\n     * @param eventName\n     * Name of the entity type event to trigger. If a namespace is\n     * not specified, minecraft: is assumed.\n     * @throws This function can throw errors.\n     */\n    triggerEvent(eventName: string): void;\n    protected constructor();\n}\n/**\n * Represents the inventory of a {@link mojang-minecraft.Player} in\n * the world.\n */\ndeclare class PlayerInventoryComponentContainer extends InventoryComponentContainer {\n    /**\n     * Contains a count of the slots in the container that are\n     * empty.\n     * @throws This property can throw when used.\n     */\n    readonly 'emptySlotsCount': number;\n    /**\n     * Returns the size capacity of the inventory container on this\n     * block.\n     * @throws This property can throw when used.\n     */\n    readonly 'size': number;\n    /**\n     * @remarks\n     * Adds an item to the specified container. Item will be placed\n     * in the first available empty slot. (use .setItem if you wish\n     * to set items in a particular slot.)\n     * @param itemStack\n     * The stack of items to add.\n     * @throws This function can throw errors.\n     */\n    addItem(itemStack: ItemStack): void;\n    /**\n     * @remarks\n     * Gets the item stack for the set of items at the specified\n     * slot. If the slot is empty, returns undefined. This method\n     * does not change or clear the contents of the specified slot.\n     * @param slot\n     * Zero-based index of the slot to retrieve items from.\n     * @throws This function can throw errors.\n     */\n    getItem(slot: number): ItemStack;\n    /**\n     * @remarks\n     * Sets an item stack within a particular slot.\n     * @param slot\n     * Zero-based index of the slot to set an item at.\n     * @param itemStack\n     * Stack of items to place within the specified slot.\n     * @throws This function can throw errors.\n     */\n    setItem(slot: number, itemStack: ItemStack): void;\n    /**\n     * @remarks\n     * Swaps items between two different slots within containers.\n     * @param slot\n     * Zero-based index of the slot to swap from this container.\n     * @param otherSlot\n     * Zero-based index of the slot to swap with.\n     * @param otherContainer\n     * Target container to swap with. Note this can be the same\n     * container as this source.\n     * @throws This function can throw errors.\n     */\n    swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean;\n    /**\n     * @remarks\n     * Moves an item from one slot to another, potentially across\n     * containers.\n     * @param fromSlot\n     * @param toSlot\n     * Zero-based index of the slot to move to.\n     * @param toContainer\n     * Target container to transfer to. Note this can be the same\n     * container as the source.\n     * @throws This function can throw errors.\n     */\n    transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean;\n    protected constructor();\n}\n/**\n * This type is usable for iterating over a set of players.\n * This means it can be used in statements like for...of\n * statements, Array.from(iterator), and more.\n */\ndeclare class PlayerIterator implements Iterable<Player> {\n    [Symbol.iterator](): Iterator<Player>;\n    /**\n     * @remarks\n     * Retrieves the next item in this iteration. The resulting\n     * IteratorResult contains .done and .value properties which\n     * can be used to see the next Player in the iteration.\n     */\n    next(): IteratorResult<Player>;\n    protected constructor();\n}\n/**\n * Contains information regarding a player that has joined.\n */\ndeclare class PlayerJoinEvent {\n    /**\n     * Player that has joined the world.\n     */\n    'player': Player;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to a player joining the\n * world.\n */\ndeclare class PlayerJoinEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a player joins the\n     * world.\n     * @param callback\n     */\n    subscribe(callback: (arg: PlayerJoinEvent) => void): (arg: PlayerJoinEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a player joins the\n     * world.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: PlayerJoinEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information regarding a player that has left the\n * world.\n */\ndeclare class PlayerLeaveEvent {\n    /**\n     * Player that has left the world.\n     */\n    readonly 'playerName': string;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to a player leaving the\n * world.\n */\ndeclare class PlayerLeaveEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a player leaves the\n     * world.\n     * @param callback\n     */\n    subscribe(callback: (arg: PlayerLeaveEvent) => void): (arg: PlayerLeaveEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a player leaves\n     * the world.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: PlayerLeaveEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains information related to a projectile hitting an\n * entity or block.\n */\ndeclare class ProjectileHitEvent {\n    /**\n     * Contains additional information about the block that was hit\n     * by the projectile, or undefined if the projectile did not\n     * hit a block.\n     */\n    readonly 'blockHit': BlockHitInformation;\n    /**\n     * Dimension where this projectile hit took place.\n     */\n    readonly 'dimension': Dimension;\n    /**\n     * Contains additional information about a block that was hit.\n     */\n    readonly 'entityHit': EntityHitInformation;\n    /**\n     * Direction vector of the projectile as it hit a block/entity.\n     */\n    readonly 'hitVector': Vector;\n    /**\n     * Location where the projectile hit occurred.\n     */\n    readonly 'location': Location;\n    /**\n     * Entity for the projectile that hit a block/entity.\n     */\n    readonly 'projectile': Entity;\n    /**\n     * Optional source entity that fired the projectile.\n     */\n    readonly 'source': Entity;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to when a projectile\n * hits an entity or block.\n */\ndeclare class ProjectileHitEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when a projectile hits\n     * an entity or block.\n     * @param callback\n     */\n    subscribe(callback: (arg: ProjectileHitEvent) => void): (arg: ProjectileHitEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when a projectile hits\n     * an entity or block.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: ProjectileHitEvent) => void): void;\n    protected constructor();\n}\n/**\n * Provides methods that should be used within the World\n * Initialize event to register dynamic properties that can be\n * used and stored within Minecraft.\n */\ndeclare class PropertyRegistry {\n    /**\n     * @remarks\n     * Registers a dynamic property for a particular entity type\n     * (e.g., a minecraft:skeleton.).\n     * @param propertiesDefinition\n     * @param entityType\n     * @throws This function can throw errors.\n     */\n    registerEntityTypeDynamicProperties(\n        propertiesDefinition: DynamicPropertiesDefinition,\n        entityType: EntityType,\n    ): void;\n    /**\n     * @remarks\n     * Registers a globally available dynamic property for a world.\n     * @param propertiesDefinition\n     * @throws This function can throw errors.\n     */\n    registerWorldDynamicProperties(propertiesDefinition: DynamicPropertiesDefinition): void;\n    protected constructor();\n}\n/**\n * Contains objectives and participants for the scoreboard.\n */\ndeclare class Scoreboard {\n    /**\n     * @remarks\n     * Returns a specific objective (by id).\n     * @param objectiveId\n     * @throws This function can throw errors.\n     */\n    getObjective(objectiveId: string): ScoreboardObjective;\n    /**\n     * @remarks\n     * Returns all defined objectives.\n     * @throws This function can throw errors.\n     */\n    getObjectives(): ScoreboardObjective[];\n    /**\n     * @remarks\n     * Returns all defined scoreboard identities.\n     * @throws This function can throw errors.\n     */\n    getParticipants(): ScoreboardIdentity[];\n    protected constructor();\n}\n/**\n * Contains an identity of the scoreboard item.\n */\ndeclare class ScoreboardIdentity {\n    /**\n     * Returns the player-visible name of this identity.\n     */\n    readonly 'displayName': string;\n    /**\n     * Identifier of the scoreboard identity.\n     */\n    readonly 'id': number;\n    /**\n     * Type of the scoreboard identity.\n     */\n    readonly 'type': ScoreboardIdentityType;\n    /**\n     * @remarks\n     * If the scoreboard identity is an entity or player, returns\n     * the entity that this scoreboard item corresponds to.\n     * @throws This function can throw errors.\n     */\n    getEntity(): Entity;\n    protected constructor();\n}\n/**\n * Contains objectives and participants for the scoreboard.\n */\ndeclare class ScoreboardObjective {\n    /**\n     * Returns the player-visible name of this scoreboard\n     * objective.\n     * @throws This property can throw when used.\n     */\n    readonly 'displayName': string;\n    /**\n     * Identifier of the scoreboard objective.\n     * @throws This property can throw when used.\n     */\n    readonly 'id': string;\n    /**\n     * @remarks\n     * Returns all objective participant identities.\n     * @throws This function can throw errors.\n     */\n    getParticipants(): ScoreboardIdentity[];\n    /**\n     * @remarks\n     * Returns a specific score for a participant.\n     * @param participant\n     * @throws This function can throw errors.\n     */\n    getScore(participant: ScoreboardIdentity): number;\n    /**\n     * @remarks\n     * Returns specific scores for this objective for all\n     * participants.\n     * @throws This function can throw errors.\n     */\n    getScores(): ScoreboardScoreInfo[];\n    protected constructor();\n}\n/**\n * Contains a pair of a scoreboard participant and its\n * respective score.\n */\ndeclare class ScoreboardScoreInfo {\n    /**\n     * This scoreboard participant for this score.\n     */\n    readonly 'participant': ScoreboardIdentity;\n    /**\n     * Score value of the identity for this objective.\n     */\n    readonly 'score': number;\n    protected constructor();\n}\n/**\n * Contains information about user interface elements that are\n * showing up on the screen.\n */\ndeclare class ScreenDisplay {\n    /**\n     * @remarks\n     * Clears the title and subtitle, if currently displayed.\n     * @throws This function can throw errors.\n     */\n    clearTitle(): void;\n    /**\n     * @remarks\n     * Set the action bar text - a piece of text that displays\n     * beneath the title and above the hot-bar.\n     * @param text\n     * @throws This function can throw errors.\n     */\n    setActionBar(text: string): void;\n    /**\n     * @remarks\n     * Will cause a title to show up on the player's on screen\n     * display. You can optionally specify an additional subtitle\n     * as well as fade in, stay and fade out times.\n     * @param title\n     * @param options\n     * @throws This function can throw errors.\n     */\n    setTitle(title: string, options?: TitleDisplayOptions): void;\n    /**\n     * @remarks\n     * Updates the subtitle if the subtitle was previously\n     * displayed via the setTitle method.\n     * @param subtitle\n     * @throws This function can throw errors.\n     */\n    updateSubtitle(subtitle: string): void;\n    protected constructor();\n}\n/**\n * Describes a particular seating position on this rideable\n * entity.\n */\ndeclare class Seat {\n    /**\n     * If specified, contains a forced rotation that the riders in\n     * this seat are facing.\n     */\n    'lockRiderRotation': number;\n    /**\n     * A maximum number of riders that this seat can support.\n     */\n    'maxRiderCount': number;\n    /**\n     * A minimum number of riders that can be placed in this seat\n     * position, if this seat is to be filled.\n     */\n    'minRiderCount': number;\n    /**\n     * Physical location of this seat, relative to the entity's\n     * location.\n     */\n    'position': Location;\n    protected constructor();\n}\n/**\n * Additional configuration options for the\n * {@link mojang-minecraft.Player.playSound}/{@link mojang-minecraft.World.playSound}\n * method.\n */\ndeclare class SoundOptions {\n    /**\n     * Specifies a location of where to play a particular sound.\n     */\n    'location': Location;\n    /**\n     * Pitch adjustment level for the sound.\n     */\n    'pitch': number;\n    /**\n     * Relative volume level of the sound.\n     */\n    'volume': number;\n}\n/**\n * Contains the state of a string-based property for a\n * {@link mojang-minecraft.BlockPermutation}.\n */\ndeclare class StringBlockProperty extends IBlockProperty {\n    /**\n     * Name of this property.\n     */\n    readonly 'name': string;\n    /**\n     * A list of allowed values for this string property.\n     */\n    readonly 'validValues': string[];\n    /**\n     * The current value of this property.\n     * @throws\n     * Setting this property can throw if the value passed is not\n     * valid for the property. Use\n     * {@link mojang-minecraft.StringBlockProperty.validValues} to check\n     * allowed values.\n     */\n    'value': string;\n    protected constructor();\n}\n/**\n * An event for handling updates, that fires 20 times every\n * second.\n */\ndeclare class TickEvent {\n    /**\n     * Current tick at the time this event was fired.\n     */\n    readonly 'currentTick': number;\n    /**\n     * Time since the last tick was fired.\n     */\n    readonly 'deltaTime': number;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to a tick event.\n */\ndeclare class TickEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called on every tick.\n     * @param callback\n     */\n    subscribe(callback: (arg: TickEvent) => void): (arg: TickEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called every tick.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: TickEvent) => void): void;\n    protected constructor();\n}\n/**\n * Contains additional options for displaying a title and\n * optional subtitle.\n */\ndeclare class TitleDisplayOptions {\n    /**\n     * Fade-in time for the title and subtitle, in seconds.\n     */\n    'fadeInSeconds': number;\n    /**\n     * Fade-out time for the title and subtitle, in seconds.\n     */\n    'fadeOutSeconds': number;\n    /**\n     * Amount of time for the title and subtitle to stay in place.\n     */\n    'staySeconds': number;\n    /**\n     * Optional subtitle text.\n     */\n    'subtitle': string;\n}\n/**\n * Represents a trigger for firing an event.\n */\ndeclare class Trigger {\n    /**\n     * Event name of the trigger.\n     */\n    'eventName': string;\n    constructor(eventName: string);\n}\n/**\n * Contains a description of a vector.\n */\ndeclare class Vector {\n    /**\n     * X component of this vector.\n     */\n    'x': number;\n    /**\n     * Y component of this vector.\n     */\n    'y': number;\n    /**\n     * Z component of this vector.\n     */\n    'z': number;\n    /**\n     * A constant vector that represents (0, 0, -1).\n     */\n    static readonly 'back': Vector;\n    /**\n     * A constant vector that represents (0, -1, 0).\n     */\n    static readonly 'down': Vector;\n    /**\n     * A constant vector that represents (0, 0, 1).\n     */\n    static readonly 'forward': Vector;\n    /**\n     * A constant vector that represents (-1, 0, 0).\n     */\n    static readonly 'left': Vector;\n    /**\n     * A constant vector that represents (1, 1, 1).\n     */\n    static readonly 'one': Vector;\n    /**\n     * A constant vector that represents (1, 0, 0).\n     */\n    static readonly 'right': Vector;\n    /**\n     * A constant vector that represents (0, 1, 0).\n     */\n    static readonly 'up': Vector;\n    /**\n     * A constant vector that represents (0, 0, 0).\n     */\n    static readonly 'zero': Vector;\n    /**\n     * @remarks\n     * Returns the addition of these vectors.\n     * @param a\n     * @param b\n     */\n    static add(a: Vector, b: Vector): Vector;\n    /**\n     * @remarks\n     * Creates a new instance of an abstract vector.\n     * @param x\n     * X component of the vector.\n     * @param y\n     * Y component of the vector.\n     * @param z\n     * Z component of the vector.\n     */\n    constructor(x: number, y: number, z: number);\n    /**\n     * @remarks\n     * Returns the cross product of these two vectors.\n     * @param a\n     * @param b\n     */\n    static cross(a: Vector, b: Vector): Vector;\n    /**\n     * @remarks\n     * Returns the distance between two vectors.\n     * @param a\n     * @param b\n     */\n    static distance(a: Vector, b: Vector): number;\n    /**\n     * @remarks\n     * Returns the component-wise division of these vectors.\n     * @param a\n     * @param b\n     */\n    static divide(a: Vector, b: number | Vector): Vector;\n    /**\n     * @remarks\n     * Compares this vector and another vector to one another.\n     * @param other\n     * Other vector to compare this vector to.\n     * @returns\n     * True if the two vectors are equal.\n     */\n    equals(other: Vector): boolean;\n    /**\n     * @remarks\n     * Returns the length of this vector.\n     */\n    length(): number;\n    /**\n     * @remarks\n     * Returns the linear interpolation between a and b using t as\n     * the control.\n     * @param a\n     * @param b\n     * @param t\n     */\n    static lerp(a: Vector, b: Vector, t: number): Vector;\n    /**\n     * @remarks\n     * Returns a vector that is made from the largest components of\n     * two vectors.\n     * @param a\n     * @param b\n     */\n    static max(a: Vector, b: Vector): Vector;\n    /**\n     * @remarks\n     * Returns a vector that is made from the smallest components\n     * of two vectors.\n     * @param a\n     * @param b\n     */\n    static min(a: Vector, b: Vector): Vector;\n    /**\n     * @remarks\n     * Returns the component-wise product of these vectors.\n     * @param a\n     * @param b\n     */\n    static multiply(a: Vector, b: number | Vector): Vector;\n    /**\n     * @remarks\n     * Returns this vector as a normalized vector.\n     */\n    normalized(): Vector;\n    /**\n     * @remarks\n     * Returns the spherical linear interpolation between a and b\n     * using s as the control.\n     * @param a\n     * @param b\n     * @param s\n     */\n    static slerp(a: Vector, b: Vector, s: number): Vector;\n    /**\n     * @remarks\n     * Returns the subtraction of these vectors.\n     * @param a\n     * @param b\n     */\n    static subtract(a: Vector, b: Vector): Vector;\n}\n/**\n * Contains information related to changes in weather in the\n * environment.\n */\ndeclare class WeatherChangeEvent {\n    /**\n     * Dimension in which the weather has changed.\n     */\n    readonly 'dimension': string;\n    /**\n     * Whether it is lightning after the change in weather.\n     */\n    readonly 'lightning': boolean;\n    /**\n     * Whether it is raining after the change in weather.\n     */\n    readonly 'raining': boolean;\n    protected constructor();\n}\n/**\n * Manages callbacks that are connected to weather changing.\n */\ndeclare class WeatherChangeEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when weather changes.\n     * @param callback\n     */\n    subscribe(callback: (arg: WeatherChangeEvent) => void): (arg: WeatherChangeEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called when weather changes.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: WeatherChangeEvent) => void): void;\n    protected constructor();\n}\n/**\n * A class that wraps the state of a world - a set of\n * dimensions and the environment of Minecraft.\n */\ndeclare class World {\n    /**\n     * Contains a set of events that are applicable to the entirety\n     * of the world.\n     */\n    readonly 'events': Events;\n    /**\n     * Returns the general global scoreboard that applies to the\n     * world.\n     */\n    readonly 'scoreboard': Scoreboard;\n    /**\n     * @param dimensionId\n     * @returns\n     * The requested dimension\n     * @throws\n     * Throws if the given dimension name is invalid\n     */\n    getDimension(dimensionId: \"overworld\" | \"nether\" | \"the end\" | \"minecraft:overworld\" | \"minecraft:nether\" | \"minecraft:the_end\"): Dimension;\n    /**\n     * @remarks\n     * Returns a property value.\n     * @param identifier\n     * @returns\n     * Returns the value for the property, or undefined if the\n     * property has not been set.\n     * @throws This function can throw errors.\n     */\n    getDynamicProperty(identifier: string): boolean | number | string;\n    /**\n     * @remarks\n     * Returns all players currently in the world.\n     * @param options\n     * @returns\n     * All players currently in the world.\n     * @throws This function can throw errors.\n     */\n    getPlayers(options?: EntityQueryOptions): PlayerIterator;\n    /**\n     * @remarks\n     * Plays a particular music track for all players.\n     * @param trackID\n     * @param musicOptions\n     */\n    playMusic(trackID: string, musicOptions?: MusicOptions): void;\n    /**\n     * @remarks\n     * Plays a sound for all players.\n     * @param soundID\n     * @param soundOptions\n     */\n    playSound(soundID: string, soundOptions?: SoundOptions): void;\n    /**\n     * @remarks\n     * Queues an additional music track for players. If a track is\n     * not playing, a music track will play.\n     * @param trackID\n     * @param musicOptions\n     */\n    queueMusic(trackID: string, musicOptions?: MusicOptions): void;\n    /**\n     * @remarks\n     * Removes a specified property.\n     * @param identifier\n     * @throws This function can throw errors.\n     */\n    removeDynamicProperty(identifier: string): boolean;\n    /**\n     * @remarks\n     * Sets a specified property to a value.\n     * @param identifier\n     * @param value\n     * Data value of the property to set.\n     * @throws This function can throw errors.\n     */\n    setDynamicProperty(identifier: string, value: boolean | number | string): void;\n    /**\n     * @remarks\n     * Stops any music tracks from playing.\n     */\n    stopMusic(): void;\n    protected constructor();\n}\n/**\n * Contains information and methods that can be used at the\n * initialization of the scripting environment for a World.\n * Also, use the supplied propertyRegistry object to register\n * any dynamic properties, within the scope of the World\n * Initialize execution.\n */\ndeclare class WorldInitializeEvent {\n    /**\n     * Contains methods for scripts to initialize and register\n     * dynamic properties they may wish to use within a world.\n     * @example propertyRegistration.js\n     * ```typescript\n     *        import { DynamicPropertiesDefinition, MinecraftEntityTypes, world } from \"mojang-minecraft\";\n     *\n     *        world.events.worldInitialize.subscribe((e) => {\n     *          let def = new DynamicPropertiesDefinition();\n     *\n     *          def.defineNumber(\"rpgStrength\");\n     *          def.defineString(\"rpgRole\", 16);\n     *          def.defineBoolean(\"rpgIsHero\");\n     *\n     *          e.propertyRegistry.registerEntityTypeDynamicProperties(def, MinecraftEntityTypes.skeleton);\n     *        });\n     *\n     * ```\n     */\n    readonly 'propertyRegistry': PropertyRegistry;\n    protected constructor();\n}\n/**\n * Manages callbacks that are run at the initialization of the\n * scripting environment for a World. Do note that this event\n * may run multiple times within a session in the case that the\n * /reload command is used.\n */\ndeclare class WorldInitializeEventSignal {\n    /**\n     * @remarks\n     * Adds a callback that will be called when the scripting\n     * environment is initialized for a World.\n     * @param callback\n     */\n    subscribe(callback: (arg: WorldInitializeEvent) => void): (arg: WorldInitializeEvent) => void;\n    /**\n     * @remarks\n     * Removes a callback from being called the scripting\n     * environment is initialized for a World.\n     * @param callback\n     * @throws This function can throw errors.\n     */\n    unsubscribe(callback: (arg: WorldInitializeEvent) => void): void;\n    protected constructor();\n}\n/**\n * Represents a rotation structure with pitch and yaw\n * components.\n */\ndeclare class XYRotation {\n    /**\n     * Yaw component (left-to-right) of this position.\n     */\n    'x': number;\n    /**\n     * Pitch (up-and-down) element of this rotation.\n     */\n    'y': number;\n    protected constructor();\n}\n/**\n * How many times the server ticks per second of real time.\n */\ndeclare const TicksPerSecond = 20;\n/**\n * A class that wraps the state of a world - a set of\n * dimensions and the environment of Minecraft.\n */\ndeclare const world: World;\n";export const Namespace="\ndeclare namespace mojangminecraft {\n    type EntityComponents = {\n        (componentName: 'minecraft:ageable'                     | 'ageable'                     ): EntityAgeableComponent\n        (componentName: 'minecraft:breathable'                  | 'breathable'                  ): EntityBreathableComponent\n        (componentName: 'minecraft:color'                       | 'color'                       ): EntityColorComponent\n        (componentName: 'minecraft:flying_speed'                | 'flying_speed'                ): EntityFlyingSpeedComponent\n        (componentName: 'minecraft:healable'                    | 'healable'                    ): EntityHealableComponent\n        (componentName: 'minecraft:health'                      | 'health'                      ): EntityHealthComponent\n        (componentName: 'minecraft:item'                        | 'item'                        ): EntityItemComponent\n        (componentName: 'minecraft:inventory'                   | 'inventory'                   ): EntityInventoryComponent\n        (componentName: 'minecraft:lava_movement'               | 'lava_movement'               ): EntityLavaMovementComponent\n        (componentName: 'minecraft:leashable'                   | 'leashable'                   ): EntityLeashableComponent\n        (componentName: 'minecraft:movement.amphibious'         | 'movement.amphibious'         ): EntityMovementAmphibiousComponent\n        (componentName: 'minecraft:movement.basic'              | 'movement.basic'              ): EntityMovementBasicComponent\n        (componentName: 'minecraft:movement'                    | 'movement'                    ): EntityMovementComponent\n        (componentName: 'minecraft:movement.fly'                | 'movement.fly'                ): EntityMovementFlyComponent\n        (componentName: 'minecraft:movement.generic'            | 'movement.generic'            ): EntityMovementGenericComponent\n        (componentName: 'minecraft:movement.glide'              | 'movement.glide'              ): EntityMovementGlideComponent\n        (componentName: 'minecraft:movement.hover'              | 'movement.hover'              ): EntityMovementHoverComponent\n        (componentName: 'minecraft:movement.jump'               | 'movement.jump'               ): EntityMovementJumpComponent\n        (componentName: 'minecraft:movement.skip'               | 'movement.skip'               ): EntityMovementSkipComponent\n        (componentName: 'minecraft:movement.sway'               | 'movement.sway'               ): EntityMovementSwayComponent\n        (componentName: 'minecraft:navigation.climb'            | 'navigation.climb'            ): EntityNavigationClimbComponent\n        (componentName: 'minecraft:navigation.float'            | 'navigation.float'            ): EntityNavigationFloatComponent\n        (componentName: 'minecraft:navigation.fly'              | 'navigation.fly'              ): EntityNavigationFlyComponent\n        (componentName: 'minecraft:navigation.generic'          | 'navigation.generic'          ): EntityNavigationGenericComponent\n        (componentName: 'minecraft:navigation.hover'            | 'navigation.hover'            ): EntityNavigationHoverComponent\n        (componentName: 'minecraft:navigation.walk'             | 'navigation.walk'             ): EntityNavigationWalkComponent\n        (componentName: 'minecraft:rideable'                    | 'rideable'                    ): EntityRideableComponent\n        (componentName: 'minecraft:strength'                    | 'strength'                    ): EntityStrengthComponent\n        (componentName: 'minecraft:tameable'                    | 'tameable'                    ): EntityTameableComponent\n        (componentName: 'minecraft:underwater_movement'         | 'underwater_movement'         ): EntityUnderwaterMovementComponent\n        (componentName: 'minecraft:can_climb'                   | 'can_climb'                   ): EntityCanClimbComponent\n        (componentName: 'minecraft:can_fly'                     | 'can_fly'                     ): EntityCanFlyComponent\n        (componentName: 'minecraft:can_power_jump'              | 'can_power_jump'              ): EntityCanPowerJumpComponent\n        (componentName: 'minecraft:fire_immune'                 | 'fire_immune'                 ): EntityFireImmuneComponent\n        (componentName: 'minecraft:floats_in_liquid'            | 'floats_in_liquid'            ): EntityFloatsInLiquidComponent\n        (componentName: 'minecraft:is_dyable'                   | 'is_dyable'                   ): EntityIsDyableComponent\n        (componentName: 'minecraft:is_baby'                     | 'is_baby'                     ): EntityIsBabyComponent\n        (componentName: 'minecraft:is_charged'                  | 'is_charged'                  ): EntityIsChargedComponent\n        (componentName: 'minecraft:is_chested'                  | 'is_chested'                  ): EntityIsChestedComponent\n        (componentName: 'minecraft:is_hidden_when_invisible'    | 'is_hidden_when_invisible'    ): EntityIsHiddenWhenInvisibleComponent\n        (componentName: 'minecraft:is_ignited'                  | 'is_ignited'                  ): EntityIsIgnitedComponent\n        (componentName: 'minecraft:is_illager_captain'          | 'is_illager_captain'          ): EntityIsIllagerCaptainComponent\n        (componentName: 'minecraft:is_saddled'                  | 'is_saddled'                  ): EntityIsSaddledComponent\n        (componentName: 'minecraft:is_shaking'                  | 'is_shaking'                  ): EntityIsShakingComponent\n        (componentName: 'minecraft:is_sheared'                  | 'is_sheared'                  ): EntityIsShearedComponent\n        (componentName: 'minecraft:is_stackable'                | 'is_stackable'                ): EntityIsStackableComponent\n        (componentName: 'minecraft:is_stunned'                  | 'is_stunned'                  ): EntityIsStunnedComponent\n        (componentName: 'minecraft:is_tamed'                    | 'is_tamed'                    ): EntityIsTamedComponent\n        (componentName: 'minecraft:wants_jockey'                | 'wants_jockey'                ): EntityWantsJockeyComponent\n        (componentName: 'minecraft:friction_modifier'           | 'friction_modifier'           ): EntityFrictionModifierComponent\n        (componentName: 'minecraft:ground_offset'               | 'ground_offset'               ): EntityGroundOffsetComponent\n        (componentName: 'minecraft:mark_variant'                | 'mark_variant'                ): EntityMarkVariantComponent\n        (componentName: 'minecraft:push_through'                | 'push_through'                ): EntityPushThroughComponent\n        (componentName: 'minecraft:scale'                       | 'scale'                       ): EntityScaleComponent\n        (componentName: 'minecraft:skin_id'                     | 'skin_id'                     ): EntitySkinIdComponent\n        (componentName: 'minecraft:variant'                     | 'variant'                     ): EntityVariantComponent\n        (componentName: string): IEntityComponent\n    };\n    export enum Direction {\n        down = 0,\n        up = 1,\n        north = 2,\n        south = 3,\n        west = 4,\n        east = 5,\n    }\n    export enum GameMode {\n        survival = 0,\n        creative = 1,\n        adventure = 2,\n    }\n    export enum ScoreboardIdentityType {\n        player = 1,\n        entity = 2,\n        fakePlayer = 3,\n    }\n    export class BeforeChatEvent {\n        'cancel': boolean;\n        'message': string;\n        'sender': Player;\n        'sendToTargets': boolean;\n        'targets': Player[];\n        protected constructor();\n    }\n    export class BeforeChatEventSignal {\n        subscribe(callback: (arg: BeforeChatEvent) => void): (arg: BeforeChatEvent) => void;\n        unsubscribe(callback: (arg: BeforeChatEvent) => void): void;\n        protected constructor();\n    }\n    export class BeforeDataDrivenEntityTriggerEvent {\n        'cancel': boolean;\n        readonly 'entity': Entity;\n        readonly 'id': string;\n        'modifiers': DefinitionModifier[];\n        protected constructor();\n    }\n    export class BeforeDataDrivenEntityTriggerEventSignal {\n        subscribe(\n            callback: (arg: BeforeDataDrivenEntityTriggerEvent) => void,\n            options?: EntityDataDrivenTriggerEventOptions,\n        ): (arg: BeforeDataDrivenEntityTriggerEvent) => void;\n        unsubscribe(callback: (arg: BeforeDataDrivenEntityTriggerEvent) => void): void;\n        protected constructor();\n    }\n    export class BeforeExplosionEvent {\n        'cancel': boolean;\n        readonly 'dimension': Dimension;\n        'impactedBlocks': BlockLocation[];\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class BeforeExplosionEventSignal {\n        subscribe(callback: (arg: BeforeExplosionEvent) => void): (arg: BeforeExplosionEvent) => void;\n        unsubscribe(callback: (arg: BeforeExplosionEvent) => void): void;\n        protected constructor();\n    }\n    export class BeforeItemDefinitionEventSignal {\n        subscribe(\n            callback: (arg: BeforeItemDefinitionTriggeredEvent) => void,\n        ): (arg: BeforeItemDefinitionTriggeredEvent) => void;\n        unsubscribe(callback: (arg: BeforeItemDefinitionTriggeredEvent) => void): void;\n        protected constructor();\n    }\n    export class BeforeItemDefinitionTriggeredEvent {\n        'cancel': boolean;\n        readonly 'eventName': string;\n        'item': ItemStack;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class BeforeItemUseEvent {\n        'cancel': boolean;\n        'item': ItemStack;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class BeforeItemUseEventSignal {\n        subscribe(callback: (arg: BeforeItemUseEvent) => void): (arg: BeforeItemUseEvent) => void;\n        unsubscribe(callback: (arg: BeforeItemUseEvent) => void): void;\n        protected constructor();\n    }\n    export class BeforeItemUseOnEvent {\n        readonly 'blockFace': Direction;\n        readonly 'blockLocation': BlockLocation;\n        'cancel': boolean;\n        readonly 'faceLocationX': number;\n        readonly 'faceLocationY': number;\n        'item': ItemStack;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class BeforeItemUseOnEventSignal {\n        subscribe(callback: (arg: BeforeItemUseOnEvent) => void): (arg: BeforeItemUseOnEvent) => void;\n        unsubscribe(callback: (arg: BeforeItemUseOnEvent) => void): void;\n        protected constructor();\n    }\n    export class BeforePistonActivateEvent extends BlockEvent {\n        readonly 'block': Block;\n        'cancel': boolean;\n        readonly 'dimension': Dimension;\n        readonly 'isExpanding': boolean;\n        readonly 'piston': BlockPistonComponent;\n        protected constructor();\n    }\n    export class BeforePistonActivateEventSignal {\n        subscribe(callback: (arg: BeforePistonActivateEvent) => void): (arg: BeforePistonActivateEvent) => void;\n        unsubscribe(callback: (arg: BeforePistonActivateEvent) => void): void;\n        protected constructor();\n    }\n    export class Block {\n        readonly 'dimension': Dimension;\n        readonly 'id': string;\n        readonly 'isEmpty': boolean;\n        'isWaterlogged': boolean;\n        readonly 'location': BlockLocation;\n        readonly 'permutation': BlockPermutation;\n        readonly 'type': BlockType;\n        readonly 'x': number;\n        readonly 'y': number;\n        readonly 'z': number;\n        getComponent: {\n            (componentName: 'minecraft:inventory'                   | 'inventory'                   ): BlockInventoryComponent\n            (componentName: string): any\n        };\n        getTags(): string[];\n        hasTag(tag: string): boolean;\n        setPermutation(permutation: BlockPermutation): void;\n        setType(blockType: BlockType): void;\n        protected constructor();\n    }\n    export class BlockAreaSize {\n        'x': number;\n        'y': number;\n        'z': number;\n        constructor(x: number, y: number, z: number);\n        equals(other: BlockAreaSize): boolean;\n    }\n    export class BlockBreakEvent extends BlockEvent {\n        readonly 'block': Block;\n        readonly 'brokenBlockPermutation': BlockPermutation;\n        readonly 'dimension': Dimension;\n        readonly 'player': Player;\n        protected constructor();\n    }\n    export class BlockBreakEventSignal {\n        subscribe(callback: (arg: BlockBreakEvent) => void): (arg: BlockBreakEvent) => void;\n        unsubscribe(callback: (arg: BlockBreakEvent) => void): void;\n        protected constructor();\n    }\n    export class BlockComponent {\n        protected constructor();\n    }\n    export class BlockEvent {\n        readonly 'block': Block;\n        readonly 'dimension': Dimension;\n        protected constructor();\n    }\n    export class BlockExplodeEvent extends BlockEvent {\n        readonly 'block': Block;\n        readonly 'dimension': Dimension;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class BlockExplodeEventSignal {\n        subscribe(callback: (arg: BlockExplodeEvent) => void): (arg: BlockExplodeEvent) => void;\n        unsubscribe(callback: (arg: BlockExplodeEvent) => void): void;\n        protected constructor();\n    }\n    export class BlockHitInformation {\n        readonly 'block': Block;\n        readonly 'face': Direction;\n        readonly 'faceLocationX': number;\n        readonly 'faceLocationY': number;\n        protected constructor();\n    }\n    export class BlockInventoryComponent extends BlockComponent {\n        readonly 'container': BlockInventoryComponentContainer;\n        readonly 'location': BlockLocation;\n        protected constructor();\n    }\n    export class BlockInventoryComponentContainer extends Container {\n        readonly 'emptySlotsCount': number;\n        readonly 'size': number;\n        addItem(itemStack: ItemStack): void;\n        getItem(slot: number): ItemStack;\n        setItem(slot: number, itemStack: ItemStack): void;\n        swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean;\n        transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean;\n        protected constructor();\n    }\n    export class BlockLavaContainerComponent extends BlockComponent {\n        'fillLevel': number;\n        readonly 'location': BlockLocation;\n        protected constructor();\n    }\n    export class BlockLocation {\n        'x': number;\n        'y': number;\n        'z': number;\n        above(): BlockLocation;\n        blocksBetween(other: BlockLocation): BlockLocation[];\n        constructor(x: number, y: number, z: number);\n        equals(other: BlockLocation): boolean;\n        offset(x: number, y: number, z: number): BlockLocation;\n    }\n    export class BlockPermutation {\n        readonly 'type': BlockType;\n        clone(): BlockPermutation;\n        getAllProperties(): IBlockProperty[];\n        getProperty(propertyName: string): IBlockProperty;\n        getTags(): string[];\n        hasTag(tag: string): boolean;\n        protected constructor();\n    }\n    export class BlockPistonComponent extends BlockComponent {\n        readonly 'attachedBlocks': BlockLocation[];\n        readonly 'isExpanded': boolean;\n        readonly 'isExpanding': boolean;\n        readonly 'isMoving': boolean;\n        readonly 'isRetracted': boolean;\n        readonly 'isRetracting': boolean;\n        readonly 'location': BlockLocation;\n        protected constructor();\n    }\n    export class BlockPlaceEvent extends BlockEvent {\n        readonly 'block': Block;\n        readonly 'dimension': Dimension;\n        readonly 'player': Player;\n        protected constructor();\n    }\n    export class BlockPlaceEventSignal {\n        subscribe(callback: (arg: BlockPlaceEvent) => void): (arg: BlockPlaceEvent) => void;\n        unsubscribe(callback: (arg: BlockPlaceEvent) => void): void;\n        protected constructor();\n    }\n    export class BlockPotionContainerComponent extends BlockComponent {\n        'fillLevel': number;\n        readonly 'location': BlockLocation;\n        setPotionType(item: ItemStack): void;\n        protected constructor();\n    }\n    export class BlockProperties {\n        static readonly 'active' = 'active';\n        static readonly 'age' = 'age';\n        static readonly 'ageBit' = 'age_bit';\n        static readonly 'allowUnderwaterBit' = 'allow_underwater_bit';\n        static readonly 'attachedBit' = 'attached_bit';\n        static readonly 'attachment' = 'attachment';\n        static readonly 'bambooLeafSize' = 'bamboo_leaf_size';\n        static readonly 'bambooStalkThickness' = 'bamboo_stalk_thickness';\n        static readonly 'bigDripleafHead' = 'big_dripleaf_head';\n        static readonly 'bigDripleafTilt' = 'big_dripleaf_tilt';\n        static readonly 'biteCounter' = 'bite_counter';\n        static readonly 'blockLightLevel' = 'block_light_level';\n        static readonly 'bloom' = 'bloom';\n        static readonly 'brewingStandSlotABit' = 'brewing_stand_slot_a_bit';\n        static readonly 'brewingStandSlotBBit' = 'brewing_stand_slot_b_bit';\n        static readonly 'brewingStandSlotCBit' = 'brewing_stand_slot_c_bit';\n        static readonly 'buttonPressedBit' = 'button_pressed_bit';\n        static readonly 'candles' = 'candles';\n        static readonly 'canSummon' = 'can_summon';\n        static readonly 'cauldronLiquid' = 'cauldron_liquid';\n        static readonly 'chemistryTableType' = 'chemistry_table_type';\n        static readonly 'chiselType' = 'chisel_type';\n        static readonly 'clusterCount' = 'cluster_count';\n        static readonly 'color' = 'color';\n        static readonly 'colorBit' = 'color_bit';\n        static readonly 'composterFillLevel' = 'composter_fill_level';\n        static readonly 'conditionalBit' = 'conditional_bit';\n        static readonly 'coralColor' = 'coral_color';\n        static readonly 'coralDirection' = 'coral_direction';\n        static readonly 'coralFanDirection' = 'coral_fan_direction';\n        static readonly 'coralHangTypeBit' = 'coral_hang_type_bit';\n        static readonly 'coveredBit' = 'covered_bit';\n        static readonly 'crackedState' = 'cracked_state';\n        static readonly 'damage' = 'damage';\n        static readonly 'deadBit' = 'dead_bit';\n        static readonly 'deprecated' = 'deprecated';\n        static readonly 'direction' = 'direction';\n        static readonly 'dirtType' = 'dirt_type';\n        static readonly 'disarmedBit' = 'disarmed_bit';\n        static readonly 'doorHingeBit' = 'door_hinge_bit';\n        static readonly 'doublePlantType' = 'double_plant_type';\n        static readonly 'dragDown' = 'drag_down';\n        static readonly 'dripstoneThickness' = 'dripstone_thickness';\n        static readonly 'endPortalEyeBit' = 'end_portal_eye_bit';\n        static readonly 'explodeBit' = 'explode_bit';\n        static readonly 'extinguished' = 'extinguished';\n        static readonly 'facingDirection' = 'facing_direction';\n        static readonly 'fillLevel' = 'fill_level';\n        static readonly 'flowerType' = 'flower_type';\n        static readonly 'groundSignDirection' = 'ground_sign_direction';\n        static readonly 'growingPlantAge' = 'growing_plant_age';\n        static readonly 'growth' = 'growth';\n        static readonly 'hanging' = 'hanging';\n        static readonly 'headPieceBit' = 'head_piece_bit';\n        static readonly 'height' = 'height';\n        static readonly 'honeyLevel' = 'honey_level';\n        static readonly 'hugeMushroomBits' = 'huge_mushroom_bits';\n        static readonly 'infiniburnBit' = 'infiniburn_bit';\n        static readonly 'inWallBit' = 'in_wall_bit';\n        static readonly 'itemFrameMapBit' = 'item_frame_map_bit';\n        static readonly 'itemFramePhotoBit' = 'item_frame_photo_bit';\n        static readonly 'kelpAge' = 'kelp_age';\n        static readonly 'leverDirection' = 'lever_direction';\n        static readonly 'liquidDepth' = 'liquid_depth';\n        static readonly 'lit' = 'lit';\n        static readonly 'moisturizedAmount' = 'moisturized_amount';\n        static readonly 'monsterEggStoneType' = 'monster_egg_stone_type';\n        static readonly 'multiFaceDirectionBits' = 'multi_face_direction_bits';\n        static readonly 'newLeafType' = 'new_leaf_type';\n        static readonly 'newLogType' = 'new_log_type';\n        static readonly 'noDropBit' = 'no_drop_bit';\n        static readonly 'occupiedBit' = 'occupied_bit';\n        static readonly 'oldLeafType' = 'old_leaf_type';\n        static readonly 'oldLogType' = 'old_log_type';\n        static readonly 'openBit' = 'open_bit';\n        static readonly 'outputLitBit' = 'output_lit_bit';\n        static readonly 'outputSubtractBit' = 'output_subtract_bit';\n        static readonly 'persistentBit' = 'persistent_bit';\n        static readonly 'pillarAxis' = 'pillar_axis';\n        static readonly 'portalAxis' = 'portal_axis';\n        static readonly 'poweredBit' = 'powered_bit';\n        static readonly 'prismarineBlockType' = 'prismarine_block_type';\n        static readonly 'propaguleStage' = 'propagule_stage';\n        static readonly 'railDataBit' = 'rail_data_bit';\n        static readonly 'railDirection' = 'rail_direction';\n        static readonly 'redstoneSignal' = 'redstone_signal';\n        static readonly 'repeaterDelay' = 'repeater_delay';\n        static readonly 'respawnAnchorCharge' = 'respawn_anchor_charge';\n        static readonly 'rotation' = 'rotation';\n        static readonly 'sandStoneType' = 'sand_stone_type';\n        static readonly 'sandType' = 'sand_type';\n        static readonly 'saplingType' = 'sapling_type';\n        static readonly 'seaGrassType' = 'sea_grass_type';\n        static readonly 'spongeType' = 'sponge_type';\n        static readonly 'stability' = 'stability';\n        static readonly 'stabilityCheck' = 'stability_check';\n        static readonly 'stoneBrickType' = 'stone_brick_type';\n        static readonly 'stoneSlabType' = 'stone_slab_type';\n        static readonly 'stoneSlabType2' = 'stone_slab_type_2';\n        static readonly 'stoneSlabType3' = 'stone_slab_type_3';\n        static readonly 'stoneSlabType4' = 'stone_slab_type_4';\n        static readonly 'stoneType' = 'stone_type';\n        static readonly 'strippedBit' = 'stripped_bit';\n        static readonly 'structureBlockType' = 'structure_block_type';\n        static readonly 'structureVoidType' = 'structure_void_type';\n        static readonly 'suspendedBit' = 'suspended_bit';\n        static readonly 'tallGrassType' = 'tall_grass_type';\n        static readonly 'toggleBit' = 'toggle_bit';\n        static readonly 'topSlotBit' = 'top_slot_bit';\n        static readonly 'torchFacingDirection' = 'torch_facing_direction';\n        static readonly 'triggeredBit' = 'triggered_bit';\n        static readonly 'turtleEggCount' = 'turtle_egg_count';\n        static readonly 'twistingVinesAge' = 'twisting_vines_age';\n        static readonly 'updateBit' = 'update_bit';\n        static readonly 'upperBlockBit' = 'upper_block_bit';\n        static readonly 'upsideDownBit' = 'upside_down_bit';\n        static readonly 'vineDirectionBits' = 'vine_direction_bits';\n        static readonly 'wallBlockType' = 'wall_block_type';\n        static readonly 'wallConnectionTypeEast' = 'wall_connection_type_east';\n        static readonly 'wallConnectionTypeNorth' = 'wall_connection_type_north';\n        static readonly 'wallConnectionTypeSouth' = 'wall_connection_type_south';\n        static readonly 'wallConnectionTypeWest' = 'wall_connection_type_west';\n        static readonly 'wallPostBit' = 'wall_post_bit';\n        static readonly 'weepingVinesAge' = 'weeping_vines_age';\n        static readonly 'weirdoDirection' = 'weirdo_direction';\n        static readonly 'woodType' = 'wood_type';\n        protected constructor();\n    }\n    export class BlockRaycastOptions {\n        'includeLiquidBlocks': boolean;\n        'includePassableBlocks': boolean;\n        'maxDistance': number;\n    }\n    export class BlockRecordPlayerComponent {\n        clearRecord(): void;\n        isPlaying(): boolean;\n        setRecord(recordItemType: ItemType): void;\n        protected constructor();\n    }\n    export class BlockSnowContainerComponent extends BlockComponent {\n        'fillLevel': number;\n        readonly 'location': BlockLocation;\n        protected constructor();\n    }\n    export class BlockType {\n        readonly 'canBeWaterlogged': boolean;\n        readonly 'id': string;\n        createDefaultBlockPermutation(): BlockPermutation;\n        protected constructor();\n    }\n    export class BlockWaterContainerComponent extends BlockComponent {\n        'customColor': Color;\n        'fillLevel': number;\n        readonly 'location': BlockLocation;\n        addDye(itemType: ItemType): void;\n        protected constructor();\n    }\n    export class BoolBlockProperty extends IBlockProperty {\n        readonly 'name': string;\n        readonly 'validValues': boolean[];\n        'value': boolean;\n        protected constructor();\n    }\n    export class ButtonPushEvent extends BlockEvent {\n        readonly 'block': Block;\n        readonly 'dimension': Dimension;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class ButtonPushEventSignal {\n        subscribe(callback: (arg: ButtonPushEvent) => void): (arg: ButtonPushEvent) => void;\n        unsubscribe(callback: (arg: ButtonPushEvent) => void): void;\n        protected constructor();\n    }\n    export class ChatEvent {\n        'message': string;\n        'sender': Player;\n        'sendToTargets': boolean;\n        'targets': Player[];\n        protected constructor();\n    }\n    export class ChatEventSignal {\n        subscribe(callback: (arg: ChatEvent) => void): (arg: ChatEvent) => void;\n        unsubscribe(callback: (arg: ChatEvent) => void): void;\n        protected constructor();\n    }\n    export class Color {\n        'alpha': number;\n        'blue': number;\n        'green': number;\n        'red': number;\n        constructor(red: number, green: number, blue: number, alpha: number);\n    }\n    export class CommandResult {\n        readonly 'successCount': number;\n        protected constructor();\n    }\n    export class Container {\n        readonly 'emptySlotsCount': number;\n        readonly 'size': number;\n        addItem(itemStack: ItemStack): void;\n        getItem(slot: number): ItemStack;\n        setItem(slot: number, itemStack: ItemStack): void;\n        swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean;\n        transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean;\n        protected constructor();\n    }\n    export class DataDrivenEntityTriggerEvent {\n        readonly 'entity': Entity;\n        readonly 'id': string;\n        readonly 'modifiers': DefinitionModifier[];\n        protected constructor();\n    }\n    export class DataDrivenEntityTriggerEventSignal {\n        subscribe(\n            callback: (arg: DataDrivenEntityTriggerEvent) => void,\n            options?: EntityDataDrivenTriggerEventOptions,\n        ): (arg: DataDrivenEntityTriggerEvent) => void;\n        unsubscribe(callback: (arg: DataDrivenEntityTriggerEvent) => void): void;\n        protected constructor();\n    }\n    export class DefinitionModifier {\n        readonly 'componentGroupsToAdd': string[];\n        readonly 'componentGroupsToRemove': string[];\n        'triggers': Trigger[];\n    }\n    export class Dimension {\n        readonly 'id': string;\n        createExplosion(location: Location, radius: number, explosionOptions: ExplosionOptions): void;\n        getBlock(location: BlockLocation): Block;\n        getBlockFromRay(location: Location, direction: Vector, options?: BlockRaycastOptions): Block;\n        getEntities(getEntities?: EntityQueryOptions): EntityIterator;\n        getEntitiesAtBlockLocation(location: BlockLocation): Entity[];\n        getEntitiesFromRay(location: Location, direction: Vector, options?: EntityRaycastOptions): Entity[];\n        getPlayers(getPlayers?: EntityQueryOptions): PlayerIterator;\n        isEmpty(location: BlockLocation): boolean;\n        runCommand(commandString: string): any;\n        runCommandAsync(commandString: string): Promise<CommandResult>;\n        spawnEntity(identifier: string, location: BlockLocation | Location): Entity;\n        spawnItem(item: ItemStack, location: BlockLocation | Location): Entity;\n        spawnParticle(effectName: string, location: Location, molangVariables: MolangVariableMap): void;\n        protected constructor();\n    }\n    export class DynamicPropertiesDefinition {\n        defineBoolean(identifier: string): void;\n        defineNumber(identifier: string): void;\n        defineString(identifier: string, maxLength: number): void;\n    }\n    export class Effect {\n        readonly 'amplifier': number;\n        readonly 'displayName': string;\n        readonly 'duration': number;\n        protected constructor();\n    }\n    export class EffectAddEvent {\n        'effect': Effect;\n        'effectState': number;\n        'entity': Entity;\n        protected constructor();\n    }\n    export class EffectAddEventSignal {\n        subscribe(callback: (arg: EffectAddEvent) => void, options?: EntityEventOptions): (arg: EffectAddEvent) => void;\n        unsubscribe(callback: (arg: EffectAddEvent) => void): void;\n        protected constructor();\n    }\n    export class EffectType {\n        getName(): string;\n        protected constructor();\n    }\n    export class Enchantment {\n        'level': number;\n        readonly 'type': EnchantmentType;\n        constructor(enchantmentType: EnchantmentType, level?: number);\n    }\n    export class EnchantmentList implements Iterable<Enchantment> {\n        readonly 'slot': number;\n        [Symbol.iterator](): Iterator<Enchantment>;\n        addEnchantment(enchantment: Enchantment): boolean;\n        canAddEnchantment(enchantment: Enchantment): boolean;\n        constructor(enchantmentSlot: number);\n        getEnchantment(enchantmentType: EnchantmentType): Enchantment;\n        hasEnchantment(enchantmentType: EnchantmentType): number;\n        next(): IteratorResult<Enchantment>;\n        removeEnchantment(enchantmentType: EnchantmentType): void;\n    }\n    export class EnchantmentSlot {\n        static readonly 'all' = -1;\n        static readonly 'armorFeet' = 4;\n        static readonly 'armorHead' = 1;\n        static readonly 'armorLegs' = 8;\n        static readonly 'armorTorso' = 2;\n        static readonly 'axe' = 512;\n        static readonly 'bow' = 32;\n        static readonly 'carrotStick' = 8192;\n        static readonly 'cosmeticHead' = 262144;\n        static readonly 'crossbow' = 65536;\n        static readonly 'elytra' = 16384;\n        static readonly 'fishingRod' = 4096;\n        static readonly 'flintsteel' = 256;\n        static readonly 'gArmor' = 15;\n        static readonly 'gDigging' = 3648;\n        static readonly 'gTool' = 131520;\n        static readonly 'hoe' = 64;\n        static readonly 'none' = 0;\n        static readonly 'pickaxe' = 1024;\n        static readonly 'shears' = 128;\n        static readonly 'shield' = 131072;\n        static readonly 'shovel' = 2048;\n        static readonly 'spear' = 32768;\n        static readonly 'sword' = 16;\n        protected constructor();\n    }\n    export class EnchantmentType {\n        readonly 'id': string;\n        readonly 'maxLevel': number;\n        protected constructor();\n    }\n    export class Entity {\n        readonly 'dimension': Dimension;\n        readonly 'headLocation': Location;\n        readonly 'id': string;\n        'isSneaking': boolean;\n        readonly 'location': Location;\n        'nameTag': string;\n        readonly 'rotation': XYRotation;\n        readonly 'scoreboard': ScoreboardIdentity;\n        'target': Entity;\n        readonly 'velocity': Vector;\n        readonly 'viewVector': Vector;\n        addEffect(effectType: EffectType, duration: number, amplifier?: number, showParticles?: boolean): void;\n        addTag(tag: string): boolean;\n        getBlockFromViewVector(options?: BlockRaycastOptions): Block;\n        getComponent: EntityComponents;\n        getComponents(): IEntityComponent[];\n        getDynamicProperty(identifier: string): boolean | number | string;\n        getEffect(effectType: EffectType): Effect;\n        getEntitiesFromViewVector(options?: EntityRaycastOptions): Entity[];\n        getTags(): string[];\n        hasComponent(componentId: string): boolean;\n        hasTag(tag: string): boolean;\n        kill(): void;\n        removeDynamicProperty(identifier: string): boolean;\n        removeTag(tag: string): boolean;\n        runCommand(commandString: string): any;\n        runCommandAsync(commandString: string): Promise<CommandResult>;\n        setDynamicProperty(identifier: string, value: boolean | number | string): void;\n        setRotation(degreesX: number, degreesY: number): void;\n        setVelocity(velocity: Vector): void;\n        teleport(\n            location: Location,\n            dimension: Dimension,\n            xRotation: number,\n            yRotation: number,\n            keepVelocity?: boolean,\n        ): void;\n        teleportFacing(location: Location, dimension: Dimension, facingLocation: Location, keepVelocity?: boolean): void;\n        triggerEvent(eventName: string): void;\n        protected constructor();\n    }\n    export class EntityAddRiderComponent extends IEntityComponent {\n        readonly 'entityType': string;\n        readonly 'id': string;\n        readonly 'spawnEvent': string;\n        protected constructor();\n    }\n    export class EntityAgeableComponent extends IEntityComponent {\n        readonly 'dropItems': string[];\n        readonly 'duration': number;\n        readonly 'feedItems': EntityDefinitionFeedItem[];\n        readonly 'growUp': Trigger;\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityBreathableComponent extends IEntityComponent {\n        readonly 'breatheBlocks': BlockPermutation[];\n        readonly 'breathesAir': boolean;\n        readonly 'breathesLava': boolean;\n        readonly 'breathesSolids': boolean;\n        readonly 'breathesWater': boolean;\n        readonly 'generatesBubbles': boolean;\n        readonly 'id': string;\n        readonly 'inhaleTime': number;\n        readonly 'nonBreatheBlocks': BlockPermutation[];\n        readonly 'suffocateTime': number;\n        readonly 'totalSupply': number;\n        setAirSupply(value: number): void;\n        protected constructor();\n    }\n    export class EntityCanClimbComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityCanFlyComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityCanPowerJumpComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityColorComponent extends IEntityComponent {\n        readonly 'id': string;\n        'value': number;\n        protected constructor();\n    }\n    export class EntityCreateEvent {\n        'entity': Entity;\n        protected constructor();\n    }\n    export class EntityCreateEventSignal {\n        subscribe(callback: (arg: EntityCreateEvent) => void): (arg: EntityCreateEvent) => void;\n        unsubscribe(callback: (arg: EntityCreateEvent) => void): void;\n        protected constructor();\n    }\n    export class EntityDataDrivenTriggerEventOptions {\n        'entities': Entity[];\n        'entityTypes': string[];\n        'eventTypes': string[];\n    }\n    export class EntityDefinitionFeedItem {\n        readonly 'growth': number;\n        readonly 'item': string;\n        protected constructor();\n    }\n    export class EntityEventOptions {\n        'entities': Entity[];\n        'entityTypes': string[];\n    }\n    export class EntityFireImmuneComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityFloatsInLiquidComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityFlyingSpeedComponent extends IEntityComponent {\n        readonly 'id': string;\n        'value': number;\n        protected constructor();\n    }\n    export class EntityFrictionModifierComponent extends IEntityComponent {\n        readonly 'id': string;\n        'value': number;\n        protected constructor();\n    }\n    export class EntityGroundOffsetComponent extends IEntityComponent {\n        readonly 'id': string;\n        'value': number;\n        protected constructor();\n    }\n    export class EntityHealableComponent extends IEntityComponent {\n        readonly 'filters': FilterGroup;\n        readonly 'forceUse': boolean;\n        readonly 'id': string;\n        readonly 'items': FeedItem[];\n        protected constructor();\n    }\n    export class EntityHealthComponent extends IEntityComponent {\n        readonly 'current': number;\n        readonly 'id': string;\n        readonly 'value': number;\n        resetToDefaultValue(): void;\n        resetToMaxValue(): void;\n        resetToMinValue(): void;\n        setCurrent(value: number): void;\n        protected constructor();\n    }\n    export class EntityHitEvent {\n        readonly 'entity': Entity;\n        readonly 'hitBlock': Block;\n        readonly 'hitEntity': Entity;\n        protected constructor();\n    }\n    export class EntityHitEventSignal {\n        subscribe(callback: (arg: EntityHitEvent) => void, options?: EntityEventOptions): (arg: EntityHitEvent) => void;\n        unsubscribe(callback: (arg: EntityHitEvent) => void): void;\n        protected constructor();\n    }\n    export class EntityHitInformation {\n        readonly 'entity': Entity;\n        protected constructor();\n    }\n    export class EntityHurtEvent {\n        readonly 'cause': string;\n        readonly 'damage': number;\n        readonly 'damagingEntity': Entity;\n        readonly 'hurtEntity': Entity;\n        readonly 'projectile': Entity;\n        protected constructor();\n    }\n    export class EntityHurtEventSignal {\n        subscribe(callback: (arg: EntityHurtEvent) => void, options?: EntityEventOptions): (arg: EntityHurtEvent) => void;\n        unsubscribe(callback: (arg: EntityHurtEvent) => void): void;\n        protected constructor();\n    }\n    export class EntityInventoryComponent extends IEntityComponent {\n        readonly 'additionalSlotsPerStrength': number;\n        readonly 'canBeSiphonedFrom': boolean;\n        readonly 'container': InventoryComponentContainer;\n        readonly 'containerType': string;\n        readonly 'id': string;\n        readonly 'inventorySize': number;\n        readonly 'private': boolean;\n        readonly 'restrictToOwner': boolean;\n        protected constructor();\n    }\n    export class EntityIsBabyComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsChargedComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsChestedComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsDyableComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsHiddenWhenInvisibleComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsIgnitedComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsIllagerCaptainComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsSaddledComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsShakingComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsShearedComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsStackableComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsStunnedComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityIsTamedComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityItemComponent {\n        readonly 'itemStack': ItemStack;\n        protected constructor();\n    }\n    export class EntityIterator implements Iterable<Entity> {\n        [Symbol.iterator](): Iterator<Entity>;\n        next(): IteratorResult<Entity>;\n        protected constructor();\n    }\n    export class EntityLavaMovementComponent extends IEntityComponent {\n        readonly 'current': number;\n        readonly 'id': string;\n        readonly 'value': number;\n        resetToDefaultValue(): void;\n        resetToMaxValue(): void;\n        resetToMinValue(): void;\n        setCurrent(value: number): void;\n        protected constructor();\n    }\n    export class EntityLeashableComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'softDistance': number;\n        leash(leashHolder: Entity): void;\n        unleash(): void;\n        protected constructor();\n    }\n    export class EntityMarkVariantComponent extends IEntityComponent {\n        readonly 'id': string;\n        'value': number;\n        protected constructor();\n    }\n    export class EntityMountTamingComponent extends IEntityComponent {\n        readonly 'id': string;\n        setTamed(showParticles: boolean): void;\n        protected constructor();\n    }\n    export class EntityMovementAmphibiousComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        protected constructor();\n    }\n    export class EntityMovementBasicComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        protected constructor();\n    }\n    export class EntityMovementComponent extends IEntityComponent {\n        readonly 'current': number;\n        readonly 'id': string;\n        readonly 'value': number;\n        resetToDefaultValue(): void;\n        resetToMaxValue(): void;\n        resetToMinValue(): void;\n        setCurrent(value: number): void;\n        protected constructor();\n    }\n    export class EntityMovementFlyComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        protected constructor();\n    }\n    export class EntityMovementGenericComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        protected constructor();\n    }\n    export class EntityMovementGlideComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        readonly 'speedWhenTurning': number;\n        readonly 'startSpeed': number;\n        protected constructor();\n    }\n    export class EntityMovementHoverComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        protected constructor();\n    }\n    export class EntityMovementJumpComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        protected constructor();\n    }\n    export class EntityMovementSkipComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        protected constructor();\n    }\n    export class EntityMovementSwayComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'maxTurn': number;\n        readonly 'swayAmplitude': number;\n        readonly 'swayFrequency': number;\n        protected constructor();\n    }\n    export class EntityNavigationClimbComponent extends IEntityComponent {\n        readonly 'avoidDamageBlocks': boolean;\n        readonly 'avoidPortals': boolean;\n        readonly 'avoidSun': boolean;\n        readonly 'avoidWater': boolean;\n        readonly 'canBreach': boolean;\n        readonly 'canBreakDoors': boolean;\n        readonly 'canFloat': boolean;\n        readonly 'canJump': boolean;\n        readonly 'canOpenDoors': boolean;\n        readonly 'canOpenIronDoors': boolean;\n        readonly 'canPassDoors': boolean;\n        readonly 'canPathFromAir': boolean;\n        readonly 'canPathOverLava': boolean;\n        readonly 'canPathOverWater': boolean;\n        readonly 'canSink': boolean;\n        readonly 'canSwim': boolean;\n        readonly 'canWalk': boolean;\n        readonly 'canWalkInLava': boolean;\n        readonly 'id': string;\n        readonly 'isAmphibious': boolean;\n        protected constructor();\n    }\n    export class EntityNavigationFloatComponent extends IEntityComponent {\n        readonly 'avoidDamageBlocks': boolean;\n        readonly 'avoidPortals': boolean;\n        readonly 'avoidSun': boolean;\n        readonly 'avoidWater': boolean;\n        readonly 'canBreach': boolean;\n        readonly 'canBreakDoors': boolean;\n        readonly 'canFloat': boolean;\n        readonly 'canJump': boolean;\n        readonly 'canOpenDoors': boolean;\n        readonly 'canOpenIronDoors': boolean;\n        readonly 'canPassDoors': boolean;\n        readonly 'canPathFromAir': boolean;\n        readonly 'canPathOverLava': boolean;\n        readonly 'canPathOverWater': boolean;\n        readonly 'canSink': boolean;\n        readonly 'canSwim': boolean;\n        readonly 'canWalk': boolean;\n        readonly 'canWalkInLava': boolean;\n        readonly 'id': string;\n        readonly 'isAmphibious': boolean;\n        protected constructor();\n    }\n    export class EntityNavigationFlyComponent extends IEntityComponent {\n        readonly 'avoidDamageBlocks': boolean;\n        readonly 'avoidPortals': boolean;\n        readonly 'avoidSun': boolean;\n        readonly 'avoidWater': boolean;\n        readonly 'canBreach': boolean;\n        readonly 'canBreakDoors': boolean;\n        readonly 'canFloat': boolean;\n        readonly 'canJump': boolean;\n        readonly 'canOpenDoors': boolean;\n        readonly 'canOpenIronDoors': boolean;\n        readonly 'canPassDoors': boolean;\n        readonly 'canPathFromAir': boolean;\n        readonly 'canPathOverLava': boolean;\n        readonly 'canPathOverWater': boolean;\n        readonly 'canSink': boolean;\n        readonly 'canSwim': boolean;\n        readonly 'canWalk': boolean;\n        readonly 'canWalkInLava': boolean;\n        readonly 'id': string;\n        readonly 'isAmphibious': boolean;\n        protected constructor();\n    }\n    export class EntityNavigationGenericComponent extends IEntityComponent {\n        readonly 'avoidDamageBlocks': boolean;\n        readonly 'avoidPortals': boolean;\n        readonly 'avoidSun': boolean;\n        readonly 'avoidWater': boolean;\n        readonly 'canBreach': boolean;\n        readonly 'canBreakDoors': boolean;\n        readonly 'canFloat': boolean;\n        readonly 'canJump': boolean;\n        readonly 'canOpenDoors': boolean;\n        readonly 'canOpenIronDoors': boolean;\n        readonly 'canPassDoors': boolean;\n        readonly 'canPathFromAir': boolean;\n        readonly 'canPathOverLava': boolean;\n        readonly 'canPathOverWater': boolean;\n        readonly 'canSink': boolean;\n        readonly 'canSwim': boolean;\n        readonly 'canWalk': boolean;\n        readonly 'canWalkInLava': boolean;\n        readonly 'id': string;\n        readonly 'isAmphibious': boolean;\n        protected constructor();\n    }\n    export class EntityNavigationHoverComponent extends IEntityComponent {\n        readonly 'avoidDamageBlocks': boolean;\n        readonly 'avoidPortals': boolean;\n        readonly 'avoidSun': boolean;\n        readonly 'avoidWater': boolean;\n        readonly 'canBreach': boolean;\n        readonly 'canBreakDoors': boolean;\n        readonly 'canFloat': boolean;\n        readonly 'canJump': boolean;\n        readonly 'canOpenDoors': boolean;\n        readonly 'canOpenIronDoors': boolean;\n        readonly 'canPassDoors': boolean;\n        readonly 'canPathFromAir': boolean;\n        readonly 'canPathOverLava': boolean;\n        readonly 'canPathOverWater': boolean;\n        readonly 'canSink': boolean;\n        readonly 'canSwim': boolean;\n        readonly 'canWalk': boolean;\n        readonly 'canWalkInLava': boolean;\n        readonly 'id': string;\n        readonly 'isAmphibious': boolean;\n        protected constructor();\n    }\n    export class EntityNavigationWalkComponent extends IEntityComponent {\n        readonly 'avoidDamageBlocks': boolean;\n        readonly 'avoidPortals': boolean;\n        readonly 'avoidSun': boolean;\n        readonly 'avoidWater': boolean;\n        readonly 'canBreach': boolean;\n        readonly 'canBreakDoors': boolean;\n        readonly 'canFloat': boolean;\n        readonly 'canJump': boolean;\n        readonly 'canOpenDoors': boolean;\n        readonly 'canOpenIronDoors': boolean;\n        readonly 'canPassDoors': boolean;\n        readonly 'canPathFromAir': boolean;\n        readonly 'canPathOverLava': boolean;\n        readonly 'canPathOverWater': boolean;\n        readonly 'canSink': boolean;\n        readonly 'canSwim': boolean;\n        readonly 'canWalk': boolean;\n        readonly 'canWalkInLava': boolean;\n        readonly 'id': string;\n        readonly 'isAmphibious': boolean;\n        protected constructor();\n    }\n    export class EntityPushThroughComponent extends IEntityComponent {\n        readonly 'id': string;\n        'value': number;\n        protected constructor();\n    }\n    export class EntityQueryOptions {\n        'closest': number;\n        'excludeFamilies': string[];\n        'excludeGameModes': GameMode[];\n        'excludeNames': string[];\n        'excludeTags': string[];\n        'excludeTypes': string[];\n        'families': string[];\n        'farthest': number;\n        'gameMode': GameMode;\n        'location': Location;\n        'maxDistance': number;\n        'maxHorizontalRotation': number;\n        'maxLevel': number;\n        'maxVerticalRotation': number;\n        'minDistance': number;\n        'minHorizontalRotation': number;\n        'minLevel': number;\n        'minVerticalRotation': number;\n        'name': string;\n        'scoreOptions': EntityQueryScoreOptions[];\n        'tags': string[];\n        'type': string;\n        'volume': BlockAreaSize;\n    }\n    export class EntityQueryScoreOptions {\n        'exclude': boolean;\n        'maxScore': number;\n        'minScore': number;\n        'objective': string;\n    }\n    export class EntityRaycastOptions {\n        'maxDistance': number;\n    }\n    export class EntityRideableComponent extends IEntityComponent {\n        readonly 'controllingSeat': number;\n        readonly 'crouchingSkipInteract': boolean;\n        readonly 'familyTypes': string[];\n        readonly 'id': string;\n        readonly 'interactText': string;\n        readonly 'pullInEntities': boolean;\n        readonly 'riderCanInteract': boolean;\n        readonly 'seatCount': number;\n        readonly 'seats': Seat[];\n        addRider(rider: Entity): boolean;\n        ejectRider(rider: Entity): void;\n        ejectRiders(): void;\n        protected constructor();\n    }\n    export class EntityScaleComponent extends IEntityComponent {\n        readonly 'id': string;\n        'value': number;\n        protected constructor();\n    }\n    export class EntitySkinIdComponent extends IEntityComponent {\n        readonly 'id': string;\n        'value': number;\n        protected constructor();\n    }\n    export class EntityStrengthComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'max': number;\n        readonly 'value': number;\n        protected constructor();\n    }\n    export class EntityTameableComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'probability': number;\n        readonly 'tameEvent': Trigger;\n        readonly 'tameItems': string[];\n        tame(): boolean;\n        protected constructor();\n    }\n    export class EntityType {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class EntityTypeIterator implements Iterable<EntityType> {\n        [Symbol.iterator](): Iterator<EntityType>;\n        next(): IteratorResult<EntityType>;\n        protected constructor();\n    }\n    export class EntityTypes {\n        static get(identifier: string): EntityType;\n        static getAll(): EntityTypeIterator;\n        protected constructor();\n    }\n    export class EntityUnderwaterMovementComponent extends IEntityComponent {\n        readonly 'current': number;\n        readonly 'id': string;\n        readonly 'value': number;\n        resetToDefaultValue(): void;\n        resetToMaxValue(): void;\n        resetToMinValue(): void;\n        setCurrent(value: number): void;\n        protected constructor();\n    }\n    export class EntityVariantComponent extends IEntityComponent {\n        readonly 'id': string;\n        readonly 'value': number;\n        protected constructor();\n    }\n    export class EntityWantsJockeyComponent extends IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class Events {\n        readonly 'beforeChat': BeforeChatEventSignal;\n        readonly 'beforeDataDrivenEntityTriggerEvent': BeforeDataDrivenEntityTriggerEventSignal;\n        readonly 'beforeExplosion': BeforeExplosionEventSignal;\n        readonly 'beforeItemDefinitionEvent': BeforeItemDefinitionEventSignal;\n        readonly 'beforeItemUse': BeforeItemUseEventSignal;\n        readonly 'beforeItemUseOn': BeforeItemUseOnEventSignal;\n        readonly 'beforePistonActivate': BeforePistonActivateEventSignal;\n        readonly 'blockBreak': BlockBreakEventSignal;\n        readonly 'blockExplode': BlockExplodeEventSignal;\n        readonly 'blockPlace': BlockPlaceEventSignal;\n        readonly 'buttonPush': ButtonPushEventSignal;\n        readonly 'chat': ChatEventSignal;\n        readonly 'dataDrivenEntityTriggerEvent': DataDrivenEntityTriggerEventSignal;\n        readonly 'effectAdd': EffectAddEventSignal;\n        readonly 'entityCreate': EntityCreateEventSignal;\n        readonly 'entityHit': EntityHitEventSignal;\n        readonly 'entityHurt': EntityHurtEventSignal;\n        readonly 'explosion': ExplosionEventSignal;\n        readonly 'itemCompleteCharge': ItemCompleteChargeEventSignal;\n        readonly 'itemDefinitionEvent': ItemDefinitionEventSignal;\n        readonly 'itemReleaseCharge': ItemReleaseChargeEventSignal;\n        readonly 'itemStartCharge': ItemStartChargeEventSignal;\n        readonly 'itemStartUseOn': ItemStartUseOnEventSignal;\n        readonly 'itemStopCharge': ItemStopChargeEventSignal;\n        readonly 'itemStopUseOn': ItemStopUseOnEventSignal;\n        readonly 'itemUse': ItemUseEventSignal;\n        readonly 'itemUseOn': ItemUseOnEventSignal;\n        readonly 'leverActivate': LeverActionEventSignal;\n        readonly 'pistonActivate': PistonActivateEventSignal;\n        readonly 'playerJoin': PlayerJoinEventSignal;\n        readonly 'playerLeave': PlayerLeaveEventSignal;\n        'projectileHit': ProjectileHitEventSignal;\n        readonly 'tick': TickEventSignal;\n        readonly 'weatherChange': WeatherChangeEventSignal;\n        readonly 'worldInitialize': WorldInitializeEventSignal;\n        protected constructor();\n    }\n    export class ExplosionEvent {\n        readonly 'dimension': Dimension;\n        readonly 'impactedBlocks': BlockLocation[];\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class ExplosionEventSignal {\n        subscribe(callback: (arg: ExplosionEvent) => void): (arg: ExplosionEvent) => void;\n        unsubscribe(callback: (arg: ExplosionEvent) => void): void;\n        protected constructor();\n    }\n    export class ExplosionOptions {\n        'allowUnderwater': boolean;\n        'breaksBlocks': boolean;\n        'causesFire': boolean;\n        'source': Entity;\n    }\n    export class FeedItem {\n        readonly 'effects': FeedItemEffect[];\n        readonly 'healAmount': number;\n        readonly 'item': string;\n        protected constructor();\n    }\n    export class FeedItemEffect {\n        readonly 'amplifier': number;\n        readonly 'chance': number;\n        readonly 'duration': number;\n        readonly 'name': string;\n        protected constructor();\n    }\n    export class FilterGroup {\n        protected constructor();\n    }\n    export class FluidContainer {\n        static readonly 'maxFillLevel' = 6;\n        static readonly 'minFillLevel' = 0;\n        protected constructor();\n    }\n    export class IBlockProperty {\n        readonly 'name': string;\n        protected constructor();\n    }\n    export class IEntityComponent {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class IntBlockProperty extends IBlockProperty {\n        readonly 'name': string;\n        readonly 'validValues': number[];\n        'value': number;\n        protected constructor();\n    }\n    export class InventoryComponentContainer extends Container {\n        readonly 'emptySlotsCount': number;\n        readonly 'size': number;\n        addItem(itemStack: ItemStack): void;\n        getItem(slot: number): ItemStack;\n        setItem(slot: number, itemStack: ItemStack): void;\n        swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean;\n        transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean;\n        protected constructor();\n    }\n    export class ItemCompleteChargeEvent {\n        readonly 'itemStack': ItemStack;\n        readonly 'source': Entity;\n        readonly 'useDuration': number;\n        protected constructor();\n    }\n    export class ItemCompleteChargeEventSignal {\n        subscribe(callback: (arg: ItemCompleteChargeEvent) => void): (arg: ItemCompleteChargeEvent) => void;\n        unsubscribe(callback: (arg: ItemCompleteChargeEvent) => void): void;\n        protected constructor();\n    }\n    export class ItemCooldownComponent {\n        readonly 'cooldownCategory': string;\n        readonly 'cooldownTicks': number;\n        readonly 'id': string;\n        startCooldown(player: Player): void;\n        protected constructor();\n    }\n    export class ItemDefinitionEventSignal {\n        subscribe(callback: (arg: ItemDefinitionTriggeredEvent) => void): (arg: ItemDefinitionTriggeredEvent) => void;\n        unsubscribe(callback: (arg: ItemDefinitionTriggeredEvent) => void): void;\n        protected constructor();\n    }\n    export class ItemDefinitionTriggeredEvent {\n        readonly 'eventName': string;\n        'item': ItemStack;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class ItemDurabilityComponent {\n        'damage': number;\n        readonly 'damageRange': NumberRange;\n        readonly 'id': string;\n        readonly 'maxDurability': number;\n        getDamageChance(unbreaking?: number): number;\n        protected constructor();\n    }\n    export class ItemEnchantsComponent {\n        'enchantments': EnchantmentList;\n        readonly 'id': string;\n        removeAllEnchantments(): void;\n        protected constructor();\n    }\n    export class ItemFoodComponent {\n        readonly 'canAlwaysEat': boolean;\n        readonly 'id': string;\n        readonly 'nutrition': number;\n        readonly 'saturationModifier': number;\n        readonly 'usingConvertsTo': string;\n        protected constructor();\n    }\n    export class ItemReleaseChargeEvent {\n        readonly 'itemStack': ItemStack;\n        readonly 'source': Entity;\n        readonly 'useDuration': number;\n        protected constructor();\n    }\n    export class ItemReleaseChargeEventSignal {\n        subscribe(callback: (arg: ItemReleaseChargeEvent) => void): (arg: ItemReleaseChargeEvent) => void;\n        unsubscribe(callback: (arg: ItemReleaseChargeEvent) => void): void;\n        protected constructor();\n    }\n    export class Items {\n        static get(itemId: string): ItemType;\n        protected constructor();\n    }\n    export class ItemStack {\n        'amount': number;\n        'data': number;\n        readonly 'id': string;\n        'nameTag': string;\n        constructor(itemType: ItemType, amount?: number, data?: number);\n        getComponent: {\n            (componentName: 'minecraft:cooldown'                    | 'cooldown'                    ): ItemCooldownComponent\n            (componentName: 'minecraft:enchantments'                | 'enchantments'                ): ItemEnchantsComponent\n            (componentName: 'minecraft:durability'                  | 'durability'                  ): ItemDurabilityComponent\n            (componentName: 'minecraft:food'                        | 'food'                        ): ItemFoodComponent\n            (componentName: string): any\n        };\n        getComponents(): any[];\n        getLore(): string[];\n        hasComponent(componentId: string): boolean;\n        setLore(loreList: string[]): void;\n        triggerEvent(eventName: string): void;\n    }\n    export class ItemStartChargeEvent {\n        readonly 'itemStack': ItemStack;\n        readonly 'source': Entity;\n        readonly 'useDuration': number;\n        protected constructor();\n    }\n    export class ItemStartChargeEventSignal {\n        subscribe(callback: (arg: ItemStartChargeEvent) => void): (arg: ItemStartChargeEvent) => void;\n        unsubscribe(callback: (arg: ItemStartChargeEvent) => void): void;\n        protected constructor();\n    }\n    export class ItemStartUseOnEvent {\n        readonly 'blockFace': Direction;\n        readonly 'blockLocation': BlockLocation;\n        readonly 'buildBlockLocation': BlockLocation;\n        'item': ItemStack;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class ItemStartUseOnEventSignal {\n        subscribe(callback: (arg: ItemStartUseOnEvent) => void): (arg: ItemStartUseOnEvent) => void;\n        unsubscribe(callback: (arg: ItemStartUseOnEvent) => void): void;\n        protected constructor();\n    }\n    export class ItemStopChargeEvent {\n        readonly 'itemStack': ItemStack;\n        readonly 'source': Entity;\n        readonly 'useDuration': number;\n        protected constructor();\n    }\n    export class ItemStopChargeEventSignal {\n        subscribe(callback: (arg: ItemStopChargeEvent) => void): (arg: ItemStopChargeEvent) => void;\n        unsubscribe(callback: (arg: ItemStopChargeEvent) => void): void;\n        protected constructor();\n    }\n    export class ItemStopUseOnEvent {\n        readonly 'blockLocation': BlockLocation;\n        'item': ItemStack;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class ItemStopUseOnEventSignal {\n        subscribe(callback: (arg: ItemStopUseOnEvent) => void): (arg: ItemStopUseOnEvent) => void;\n        unsubscribe(callback: (arg: ItemStopUseOnEvent) => void): void;\n        protected constructor();\n    }\n    export class ItemType {\n        readonly 'id': string;\n        protected constructor();\n    }\n    export class ItemUseEvent {\n        'item': ItemStack;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class ItemUseEventSignal {\n        subscribe(callback: (arg: ItemUseEvent) => void): (arg: ItemUseEvent) => void;\n        unsubscribe(callback: (arg: ItemUseEvent) => void): void;\n        protected constructor();\n    }\n    export class ItemUseOnEvent {\n        readonly 'blockFace': Direction;\n        readonly 'blockLocation': BlockLocation;\n        readonly 'faceLocationX': number;\n        readonly 'faceLocationY': number;\n        'item': ItemStack;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class ItemUseOnEventSignal {\n        subscribe(callback: (arg: ItemUseOnEvent) => void): (arg: ItemUseOnEvent) => void;\n        unsubscribe(callback: (arg: ItemUseOnEvent) => void): void;\n        protected constructor();\n    }\n    export class LeverActionEvent extends BlockEvent {\n        readonly 'block': Block;\n        readonly 'dimension': Dimension;\n        readonly 'isPowered': boolean;\n        readonly 'player': Player;\n        protected constructor();\n    }\n    export class LeverActionEventSignal {\n        subscribe(callback: (arg: LeverActionEvent) => void): (arg: LeverActionEvent) => void;\n        unsubscribe(callback: (arg: LeverActionEvent) => void): void;\n        protected constructor();\n    }\n    export class Location {\n        'x': number;\n        'y': number;\n        'z': number;\n        constructor(x: number, y: number, z: number);\n        equals(other: Location): boolean;\n        isNear(other: Location, epsilon: number): boolean;\n    }\n    export class MinecraftBlockTypes {\n        static readonly 'acaciaButton': BlockType;\n        static readonly 'acaciaDoor': BlockType;\n        static readonly 'acaciaFenceGate': BlockType;\n        static readonly 'acaciaPressurePlate': BlockType;\n        static readonly 'acaciaStairs': BlockType;\n        static readonly 'acaciaStandingSign': BlockType;\n        static readonly 'acaciaTrapdoor': BlockType;\n        static readonly 'acaciaWallSign': BlockType;\n        static readonly 'activatorRail': BlockType;\n        static readonly 'air': BlockType;\n        static readonly 'allow': BlockType;\n        static readonly 'amethystBlock': BlockType;\n        static readonly 'amethystCluster': BlockType;\n        static readonly 'ancientDebris': BlockType;\n        static readonly 'andesiteStairs': BlockType;\n        static readonly 'anvil': BlockType;\n        static readonly 'azalea': BlockType;\n        static readonly 'azaleaLeaves': BlockType;\n        static readonly 'azaleaLeavesFlowered': BlockType;\n        static readonly 'bamboo': BlockType;\n        static readonly 'bambooSapling': BlockType;\n        static readonly 'barrel': BlockType;\n        static readonly 'barrier': BlockType;\n        static readonly 'basalt': BlockType;\n        static readonly 'beacon': BlockType;\n        static readonly 'bed': BlockType;\n        static readonly 'bedrock': BlockType;\n        static readonly 'beehive': BlockType;\n        static readonly 'beeNest': BlockType;\n        static readonly 'beetroot': BlockType;\n        static readonly 'bell': BlockType;\n        static readonly 'bigDripleaf': BlockType;\n        static readonly 'birchButton': BlockType;\n        static readonly 'birchDoor': BlockType;\n        static readonly 'birchFenceGate': BlockType;\n        static readonly 'birchPressurePlate': BlockType;\n        static readonly 'birchStairs': BlockType;\n        static readonly 'birchStandingSign': BlockType;\n        static readonly 'birchTrapdoor': BlockType;\n        static readonly 'birchWallSign': BlockType;\n        static readonly 'blackCandle': BlockType;\n        static readonly 'blackCandleCake': BlockType;\n        static readonly 'blackGlazedTerracotta': BlockType;\n        static readonly 'blackstone': BlockType;\n        static readonly 'blackstoneDoubleSlab': BlockType;\n        static readonly 'blackstoneSlab': BlockType;\n        static readonly 'blackstoneStairs': BlockType;\n        static readonly 'blackstoneWall': BlockType;\n        static readonly 'blastFurnace': BlockType;\n        static readonly 'blueCandle': BlockType;\n        static readonly 'blueCandleCake': BlockType;\n        static readonly 'blueGlazedTerracotta': BlockType;\n        static readonly 'blueIce': BlockType;\n        static readonly 'boneBlock': BlockType;\n        static readonly 'bookshelf': BlockType;\n        static readonly 'borderBlock': BlockType;\n        static readonly 'brewingStand': BlockType;\n        static readonly 'brickBlock': BlockType;\n        static readonly 'brickStairs': BlockType;\n        static readonly 'brownCandle': BlockType;\n        static readonly 'brownCandleCake': BlockType;\n        static readonly 'brownGlazedTerracotta': BlockType;\n        static readonly 'brownMushroom': BlockType;\n        static readonly 'brownMushroomBlock': BlockType;\n        static readonly 'bubbleColumn': BlockType;\n        static readonly 'buddingAmethyst': BlockType;\n        static readonly 'cactus': BlockType;\n        static readonly 'cake': BlockType;\n        static readonly 'calcite': BlockType;\n        static readonly 'camera': BlockType;\n        static readonly 'campfire': BlockType;\n        static readonly 'candle': BlockType;\n        static readonly 'candleCake': BlockType;\n        static readonly 'carpet': BlockType;\n        static readonly 'carrots': BlockType;\n        static readonly 'cartographyTable': BlockType;\n        static readonly 'carvedPumpkin': BlockType;\n        static readonly 'cauldron': BlockType;\n        static readonly 'caveVines': BlockType;\n        static readonly 'caveVinesBodyWithBerries': BlockType;\n        static readonly 'caveVinesHeadWithBerries': BlockType;\n        static readonly 'chain': BlockType;\n        static readonly 'chainCommandBlock': BlockType;\n        static readonly 'chemicalHeat': BlockType;\n        static readonly 'chemistryTable': BlockType;\n        static readonly 'chest': BlockType;\n        static readonly 'chiseledDeepslate': BlockType;\n        static readonly 'chiseledNetherBricks': BlockType;\n        static readonly 'chiseledPolishedBlackstone': BlockType;\n        static readonly 'chorusFlower': BlockType;\n        static readonly 'chorusPlant': BlockType;\n        static readonly 'clay': BlockType;\n        static readonly 'clientRequestPlaceholderBlock': BlockType;\n        static readonly 'coalBlock': BlockType;\n        static readonly 'coalOre': BlockType;\n        static readonly 'cobbledDeepslate': BlockType;\n        static readonly 'cobbledDeepslateDoubleSlab': BlockType;\n        static readonly 'cobbledDeepslateSlab': BlockType;\n        static readonly 'cobbledDeepslateStairs': BlockType;\n        static readonly 'cobbledDeepslateWall': BlockType;\n        static readonly 'cobblestone': BlockType;\n        static readonly 'cobblestoneWall': BlockType;\n        static readonly 'cocoa': BlockType;\n        static readonly 'coloredTorchBp': BlockType;\n        static readonly 'coloredTorchRg': BlockType;\n        static readonly 'commandBlock': BlockType;\n        static readonly 'composter': BlockType;\n        static readonly 'concrete': BlockType;\n        static readonly 'concretePowder': BlockType;\n        static readonly 'conduit': BlockType;\n        static readonly 'copperBlock': BlockType;\n        static readonly 'copperOre': BlockType;\n        static readonly 'coral': BlockType;\n        static readonly 'coralBlock': BlockType;\n        static readonly 'coralFan': BlockType;\n        static readonly 'coralFanDead': BlockType;\n        static readonly 'coralFanHang': BlockType;\n        static readonly 'coralFanHang2': BlockType;\n        static readonly 'coralFanHang3': BlockType;\n        static readonly 'crackedDeepslateBricks': BlockType;\n        static readonly 'crackedDeepslateTiles': BlockType;\n        static readonly 'crackedNetherBricks': BlockType;\n        static readonly 'crackedPolishedBlackstoneBricks': BlockType;\n        static readonly 'craftingTable': BlockType;\n        static readonly 'crimsonButton': BlockType;\n        static readonly 'crimsonDoor': BlockType;\n        static readonly 'crimsonDoubleSlab': BlockType;\n        static readonly 'crimsonFence': BlockType;\n        static readonly 'crimsonFenceGate': BlockType;\n        static readonly 'crimsonFungus': BlockType;\n        static readonly 'crimsonHyphae': BlockType;\n        static readonly 'crimsonNylium': BlockType;\n        static readonly 'crimsonPlanks': BlockType;\n        static readonly 'crimsonPressurePlate': BlockType;\n        static readonly 'crimsonRoots': BlockType;\n        static readonly 'crimsonSlab': BlockType;\n        static readonly 'crimsonStairs': BlockType;\n        static readonly 'crimsonStandingSign': BlockType;\n        static readonly 'crimsonStem': BlockType;\n        static readonly 'crimsonTrapdoor': BlockType;\n        static readonly 'crimsonWallSign': BlockType;\n        static readonly 'cryingObsidian': BlockType;\n        static readonly 'cutCopper': BlockType;\n        static readonly 'cutCopperSlab': BlockType;\n        static readonly 'cutCopperStairs': BlockType;\n        static readonly 'cyanCandle': BlockType;\n        static readonly 'cyanCandleCake': BlockType;\n        static readonly 'cyanGlazedTerracotta': BlockType;\n        static readonly 'darkOakButton': BlockType;\n        static readonly 'darkOakDoor': BlockType;\n        static readonly 'darkOakFenceGate': BlockType;\n        static readonly 'darkOakPressurePlate': BlockType;\n        static readonly 'darkOakStairs': BlockType;\n        static readonly 'darkoakStandingSign': BlockType;\n        static readonly 'darkOakTrapdoor': BlockType;\n        static readonly 'darkoakWallSign': BlockType;\n        static readonly 'darkPrismarineStairs': BlockType;\n        static readonly 'daylightDetector': BlockType;\n        static readonly 'daylightDetectorInverted': BlockType;\n        static readonly 'deadbush': BlockType;\n        static readonly 'deepslate': BlockType;\n        static readonly 'deepslateBrickDoubleSlab': BlockType;\n        static readonly 'deepslateBricks': BlockType;\n        static readonly 'deepslateBrickSlab': BlockType;\n        static readonly 'deepslateBrickStairs': BlockType;\n        static readonly 'deepslateBrickWall': BlockType;\n        static readonly 'deepslateCoalOre': BlockType;\n        static readonly 'deepslateCopperOre': BlockType;\n        static readonly 'deepslateDiamondOre': BlockType;\n        static readonly 'deepslateEmeraldOre': BlockType;\n        static readonly 'deepslateGoldOre': BlockType;\n        static readonly 'deepslateIronOre': BlockType;\n        static readonly 'deepslateLapisOre': BlockType;\n        static readonly 'deepslateRedstoneOre': BlockType;\n        static readonly 'deepslateTileDoubleSlab': BlockType;\n        static readonly 'deepslateTiles': BlockType;\n        static readonly 'deepslateTileSlab': BlockType;\n        static readonly 'deepslateTileStairs': BlockType;\n        static readonly 'deepslateTileWall': BlockType;\n        static readonly 'deny': BlockType;\n        static readonly 'detectorRail': BlockType;\n        static readonly 'diamondBlock': BlockType;\n        static readonly 'diamondOre': BlockType;\n        static readonly 'dioriteStairs': BlockType;\n        static readonly 'dirt': BlockType;\n        static readonly 'dirtWithRoots': BlockType;\n        static readonly 'dispenser': BlockType;\n        static readonly 'doubleCutCopperSlab': BlockType;\n        static readonly 'doublePlant': BlockType;\n        static readonly 'doubleStoneBlockSlab': BlockType;\n        static readonly 'doubleStoneBlockSlab2': BlockType;\n        static readonly 'doubleStoneBlockSlab3': BlockType;\n        static readonly 'doubleStoneBlockSlab4': BlockType;\n        static readonly 'doubleStoneSlab': BlockType;\n        static readonly 'doubleStoneSlab2': BlockType;\n        static readonly 'doubleStoneSlab3': BlockType;\n        static readonly 'doubleStoneSlab4': BlockType;\n        static readonly 'doubleWoodenSlab': BlockType;\n        static readonly 'dragonEgg': BlockType;\n        static readonly 'driedKelpBlock': BlockType;\n        static readonly 'dripstoneBlock': BlockType;\n        static readonly 'dropper': BlockType;\n        static readonly 'element0': BlockType;\n        static readonly 'element1': BlockType;\n        static readonly 'element10': BlockType;\n        static readonly 'element100': BlockType;\n        static readonly 'element101': BlockType;\n        static readonly 'element102': BlockType;\n        static readonly 'element103': BlockType;\n        static readonly 'element104': BlockType;\n        static readonly 'element105': BlockType;\n        static readonly 'element106': BlockType;\n        static readonly 'element107': BlockType;\n        static readonly 'element108': BlockType;\n        static readonly 'element109': BlockType;\n        static readonly 'element11': BlockType;\n        static readonly 'element110': BlockType;\n        static readonly 'element111': BlockType;\n        static readonly 'element112': BlockType;\n        static readonly 'element113': BlockType;\n        static readonly 'element114': BlockType;\n        static readonly 'element115': BlockType;\n        static readonly 'element116': BlockType;\n        static readonly 'element117': BlockType;\n        static readonly 'element118': BlockType;\n        static readonly 'element12': BlockType;\n        static readonly 'element13': BlockType;\n        static readonly 'element14': BlockType;\n        static readonly 'element15': BlockType;\n        static readonly 'element16': BlockType;\n        static readonly 'element17': BlockType;\n        static readonly 'element18': BlockType;\n        static readonly 'element19': BlockType;\n        static readonly 'element2': BlockType;\n        static readonly 'element20': BlockType;\n        static readonly 'element21': BlockType;\n        static readonly 'element22': BlockType;\n        static readonly 'element23': BlockType;\n        static readonly 'element24': BlockType;\n        static readonly 'element25': BlockType;\n        static readonly 'element26': BlockType;\n        static readonly 'element27': BlockType;\n        static readonly 'element28': BlockType;\n        static readonly 'element29': BlockType;\n        static readonly 'element3': BlockType;\n        static readonly 'element30': BlockType;\n        static readonly 'element31': BlockType;\n        static readonly 'element32': BlockType;\n        static readonly 'element33': BlockType;\n        static readonly 'element34': BlockType;\n        static readonly 'element35': BlockType;\n        static readonly 'element36': BlockType;\n        static readonly 'element37': BlockType;\n        static readonly 'element38': BlockType;\n        static readonly 'element39': BlockType;\n        static readonly 'element4': BlockType;\n        static readonly 'element40': BlockType;\n        static readonly 'element41': BlockType;\n        static readonly 'element42': BlockType;\n        static readonly 'element43': BlockType;\n        static readonly 'element44': BlockType;\n        static readonly 'element45': BlockType;\n        static readonly 'element46': BlockType;\n        static readonly 'element47': BlockType;\n        static readonly 'element48': BlockType;\n        static readonly 'element49': BlockType;\n        static readonly 'element5': BlockType;\n        static readonly 'element50': BlockType;\n        static readonly 'element51': BlockType;\n        static readonly 'element52': BlockType;\n        static readonly 'element53': BlockType;\n        static readonly 'element54': BlockType;\n        static readonly 'element55': BlockType;\n        static readonly 'element56': BlockType;\n        static readonly 'element57': BlockType;\n        static readonly 'element58': BlockType;\n        static readonly 'element59': BlockType;\n        static readonly 'element6': BlockType;\n        static readonly 'element60': BlockType;\n        static readonly 'element61': BlockType;\n        static readonly 'element62': BlockType;\n        static readonly 'element63': BlockType;\n        static readonly 'element64': BlockType;\n        static readonly 'element65': BlockType;\n        static readonly 'element66': BlockType;\n        static readonly 'element67': BlockType;\n        static readonly 'element68': BlockType;\n        static readonly 'element69': BlockType;\n        static readonly 'element7': BlockType;\n        static readonly 'element70': BlockType;\n        static readonly 'element71': BlockType;\n        static readonly 'element72': BlockType;\n        static readonly 'element73': BlockType;\n        static readonly 'element74': BlockType;\n        static readonly 'element75': BlockType;\n        static readonly 'element76': BlockType;\n        static readonly 'element77': BlockType;\n        static readonly 'element78': BlockType;\n        static readonly 'element79': BlockType;\n        static readonly 'element8': BlockType;\n        static readonly 'element80': BlockType;\n        static readonly 'element81': BlockType;\n        static readonly 'element82': BlockType;\n        static readonly 'element83': BlockType;\n        static readonly 'element84': BlockType;\n        static readonly 'element85': BlockType;\n        static readonly 'element86': BlockType;\n        static readonly 'element87': BlockType;\n        static readonly 'element88': BlockType;\n        static readonly 'element89': BlockType;\n        static readonly 'element9': BlockType;\n        static readonly 'element90': BlockType;\n        static readonly 'element91': BlockType;\n        static readonly 'element92': BlockType;\n        static readonly 'element93': BlockType;\n        static readonly 'element94': BlockType;\n        static readonly 'element95': BlockType;\n        static readonly 'element96': BlockType;\n        static readonly 'element97': BlockType;\n        static readonly 'element98': BlockType;\n        static readonly 'element99': BlockType;\n        static readonly 'emeraldBlock': BlockType;\n        static readonly 'emeraldOre': BlockType;\n        static readonly 'enchantingTable': BlockType;\n        static readonly 'endBricks': BlockType;\n        static readonly 'endBrickStairs': BlockType;\n        static readonly 'enderChest': BlockType;\n        static readonly 'endGateway': BlockType;\n        static readonly 'endPortal': BlockType;\n        static readonly 'endPortalFrame': BlockType;\n        static readonly 'endRod': BlockType;\n        static readonly 'endStone': BlockType;\n        static readonly 'exposedCopper': BlockType;\n        static readonly 'exposedCutCopper': BlockType;\n        static readonly 'exposedCutCopperSlab': BlockType;\n        static readonly 'exposedCutCopperStairs': BlockType;\n        static readonly 'exposedDoubleCutCopperSlab': BlockType;\n        static readonly 'farmland': BlockType;\n        static readonly 'fence': BlockType;\n        static readonly 'fenceGate': BlockType;\n        static readonly 'fire': BlockType;\n        static readonly 'fletchingTable': BlockType;\n        static readonly 'floweringAzalea': BlockType;\n        static readonly 'flowerPot': BlockType;\n        static readonly 'flowingLava': BlockType;\n        static readonly 'flowingWater': BlockType;\n        static readonly 'frame': BlockType;\n        static readonly 'frogSpawn': BlockType;\n        static readonly 'frostedIce': BlockType;\n        static readonly 'furnace': BlockType;\n        static readonly 'gildedBlackstone': BlockType;\n        static readonly 'glass': BlockType;\n        static readonly 'glassPane': BlockType;\n        static readonly 'glowFrame': BlockType;\n        static readonly 'glowingobsidian': BlockType;\n        static readonly 'glowLichen': BlockType;\n        static readonly 'glowstone': BlockType;\n        static readonly 'goldBlock': BlockType;\n        static readonly 'goldenRail': BlockType;\n        static readonly 'goldOre': BlockType;\n        static readonly 'graniteStairs': BlockType;\n        static readonly 'grass': BlockType;\n        static readonly 'grassPath': BlockType;\n        static readonly 'gravel': BlockType;\n        static readonly 'grayCandle': BlockType;\n        static readonly 'grayCandleCake': BlockType;\n        static readonly 'grayGlazedTerracotta': BlockType;\n        static readonly 'greenCandle': BlockType;\n        static readonly 'greenCandleCake': BlockType;\n        static readonly 'greenGlazedTerracotta': BlockType;\n        static readonly 'grindstone': BlockType;\n        static readonly 'hangingRoots': BlockType;\n        static readonly 'hardenedClay': BlockType;\n        static readonly 'hardGlass': BlockType;\n        static readonly 'hardGlassPane': BlockType;\n        static readonly 'hardStainedGlass': BlockType;\n        static readonly 'hardStainedGlassPane': BlockType;\n        static readonly 'hayBlock': BlockType;\n        static readonly 'heavyWeightedPressurePlate': BlockType;\n        static readonly 'honeyBlock': BlockType;\n        static readonly 'honeycombBlock': BlockType;\n        static readonly 'hopper': BlockType;\n        static readonly 'ice': BlockType;\n        static readonly 'infestedDeepslate': BlockType;\n        static readonly 'infoUpdate': BlockType;\n        static readonly 'infoUpdate2': BlockType;\n        static readonly 'invisibleBedrock': BlockType;\n        static readonly 'ironBars': BlockType;\n        static readonly 'ironBlock': BlockType;\n        static readonly 'ironDoor': BlockType;\n        static readonly 'ironOre': BlockType;\n        static readonly 'ironTrapdoor': BlockType;\n        static readonly 'jigsaw': BlockType;\n        static readonly 'jukebox': BlockType;\n        static readonly 'jungleButton': BlockType;\n        static readonly 'jungleDoor': BlockType;\n        static readonly 'jungleFenceGate': BlockType;\n        static readonly 'junglePressurePlate': BlockType;\n        static readonly 'jungleStairs': BlockType;\n        static readonly 'jungleStandingSign': BlockType;\n        static readonly 'jungleTrapdoor': BlockType;\n        static readonly 'jungleWallSign': BlockType;\n        static readonly 'kelp': BlockType;\n        static readonly 'ladder': BlockType;\n        static readonly 'lantern': BlockType;\n        static readonly 'lapisBlock': BlockType;\n        static readonly 'lapisOre': BlockType;\n        static readonly 'largeAmethystBud': BlockType;\n        static readonly 'lava': BlockType;\n        static readonly 'lavaCauldron': BlockType;\n        static readonly 'leaves': BlockType;\n        static readonly 'leaves2': BlockType;\n        static readonly 'lectern': BlockType;\n        static readonly 'lever': BlockType;\n        static readonly 'lightBlock': BlockType;\n        static readonly 'lightBlueCandle': BlockType;\n        static readonly 'lightBlueCandleCake': BlockType;\n        static readonly 'lightBlueGlazedTerracotta': BlockType;\n        static readonly 'lightGrayCandle': BlockType;\n        static readonly 'lightGrayCandleCake': BlockType;\n        static readonly 'lightningRod': BlockType;\n        static readonly 'lightWeightedPressurePlate': BlockType;\n        static readonly 'limeCandle': BlockType;\n        static readonly 'limeCandleCake': BlockType;\n        static readonly 'limeGlazedTerracotta': BlockType;\n        static readonly 'litBlastFurnace': BlockType;\n        static readonly 'litDeepslateRedstoneOre': BlockType;\n        static readonly 'litFurnace': BlockType;\n        static readonly 'litPumpkin': BlockType;\n        static readonly 'litRedstoneLamp': BlockType;\n        static readonly 'litRedstoneOre': BlockType;\n        static readonly 'litSmoker': BlockType;\n        static readonly 'lodestone': BlockType;\n        static readonly 'log': BlockType;\n        static readonly 'log2': BlockType;\n        static readonly 'loom': BlockType;\n        static readonly 'magentaCandle': BlockType;\n        static readonly 'magentaCandleCake': BlockType;\n        static readonly 'magentaGlazedTerracotta': BlockType;\n        static readonly 'magma': BlockType;\n        static readonly 'mangroveButton': BlockType;\n        static readonly 'mangroveDoor': BlockType;\n        static readonly 'mangroveDoubleSlab': BlockType;\n        static readonly 'mangroveFence': BlockType;\n        static readonly 'mangroveFenceGate': BlockType;\n        static readonly 'mangroveLeaves': BlockType;\n        static readonly 'mangroveLog': BlockType;\n        static readonly 'mangrovePlanks': BlockType;\n        static readonly 'mangrovePressurePlate': BlockType;\n        static readonly 'mangrovePropagule': BlockType;\n        static readonly 'mangroveRoots': BlockType;\n        static readonly 'mangroveSlab': BlockType;\n        static readonly 'mangroveStairs': BlockType;\n        static readonly 'mangroveStandingSign': BlockType;\n        static readonly 'mangroveTrapdoor': BlockType;\n        static readonly 'mangroveWallSign': BlockType;\n        static readonly 'mangroveWood': BlockType;\n        static readonly 'mediumAmethystBud': BlockType;\n        static readonly 'melonBlock': BlockType;\n        static readonly 'melonStem': BlockType;\n        static readonly 'mobSpawner': BlockType;\n        static readonly 'monsterEgg': BlockType;\n        static readonly 'mossBlock': BlockType;\n        static readonly 'mossCarpet': BlockType;\n        static readonly 'mossyCobblestone': BlockType;\n        static readonly 'mossyCobblestoneStairs': BlockType;\n        static readonly 'mossyStoneBrickStairs': BlockType;\n        static readonly 'movingBlock': BlockType;\n        static readonly 'mud': BlockType;\n        static readonly 'mudBrickDoubleSlab': BlockType;\n        static readonly 'mudBricks': BlockType;\n        static readonly 'mudBrickSlab': BlockType;\n        static readonly 'mudBrickStairs': BlockType;\n        static readonly 'mudBrickWall': BlockType;\n        static readonly 'muddyMangroveRoots': BlockType;\n        static readonly 'mycelium': BlockType;\n        static readonly 'netherBrick': BlockType;\n        static readonly 'netherBrickFence': BlockType;\n        static readonly 'netherBrickStairs': BlockType;\n        static readonly 'netherGoldOre': BlockType;\n        static readonly 'netheriteBlock': BlockType;\n        static readonly 'netherrack': BlockType;\n        static readonly 'netherreactor': BlockType;\n        static readonly 'netherSprouts': BlockType;\n        static readonly 'netherWart': BlockType;\n        static readonly 'netherWartBlock': BlockType;\n        static readonly 'normalStoneStairs': BlockType;\n        static readonly 'noteblock': BlockType;\n        static readonly 'oakStairs': BlockType;\n        static readonly 'observer': BlockType;\n        static readonly 'obsidian': BlockType;\n        static readonly 'ochreFroglight': BlockType;\n        static readonly 'orangeCandle': BlockType;\n        static readonly 'orangeCandleCake': BlockType;\n        static readonly 'orangeGlazedTerracotta': BlockType;\n        static readonly 'oxidizedCopper': BlockType;\n        static readonly 'oxidizedCutCopper': BlockType;\n        static readonly 'oxidizedCutCopperSlab': BlockType;\n        static readonly 'oxidizedCutCopperStairs': BlockType;\n        static readonly 'oxidizedDoubleCutCopperSlab': BlockType;\n        static readonly 'packedIce': BlockType;\n        static readonly 'packedMud': BlockType;\n        static readonly 'pearlescentFroglight': BlockType;\n        static readonly 'pinkCandle': BlockType;\n        static readonly 'pinkCandleCake': BlockType;\n        static readonly 'pinkGlazedTerracotta': BlockType;\n        static readonly 'piston': BlockType;\n        static readonly 'pistonArmCollision': BlockType;\n        static readonly 'planks': BlockType;\n        static readonly 'podzol': BlockType;\n        static readonly 'pointedDripstone': BlockType;\n        static readonly 'polishedAndesiteStairs': BlockType;\n        static readonly 'polishedBasalt': BlockType;\n        static readonly 'polishedBlackstone': BlockType;\n        static readonly 'polishedBlackstoneBrickDoubleSlab': BlockType;\n        static readonly 'polishedBlackstoneBricks': BlockType;\n        static readonly 'polishedBlackstoneBrickSlab': BlockType;\n        static readonly 'polishedBlackstoneBrickStairs': BlockType;\n        static readonly 'polishedBlackstoneBrickWall': BlockType;\n        static readonly 'polishedBlackstoneButton': BlockType;\n        static readonly 'polishedBlackstoneDoubleSlab': BlockType;\n        static readonly 'polishedBlackstonePressurePlate': BlockType;\n        static readonly 'polishedBlackstoneSlab': BlockType;\n        static readonly 'polishedBlackstoneStairs': BlockType;\n        static readonly 'polishedBlackstoneWall': BlockType;\n        static readonly 'polishedDeepslate': BlockType;\n        static readonly 'polishedDeepslateDoubleSlab': BlockType;\n        static readonly 'polishedDeepslateSlab': BlockType;\n        static readonly 'polishedDeepslateStairs': BlockType;\n        static readonly 'polishedDeepslateWall': BlockType;\n        static readonly 'polishedDioriteStairs': BlockType;\n        static readonly 'polishedGraniteStairs': BlockType;\n        static readonly 'portal': BlockType;\n        static readonly 'potatoes': BlockType;\n        static readonly 'powderSnow': BlockType;\n        static readonly 'poweredComparator': BlockType;\n        static readonly 'poweredRepeater': BlockType;\n        static readonly 'prismarine': BlockType;\n        static readonly 'prismarineBricksStairs': BlockType;\n        static readonly 'prismarineStairs': BlockType;\n        static readonly 'pumpkin': BlockType;\n        static readonly 'pumpkinStem': BlockType;\n        static readonly 'purpleCandle': BlockType;\n        static readonly 'purpleCandleCake': BlockType;\n        static readonly 'purpleGlazedTerracotta': BlockType;\n        static readonly 'purpurBlock': BlockType;\n        static readonly 'purpurStairs': BlockType;\n        static readonly 'quartzBlock': BlockType;\n        static readonly 'quartzBricks': BlockType;\n        static readonly 'quartzOre': BlockType;\n        static readonly 'quartzStairs': BlockType;\n        static readonly 'rail': BlockType;\n        static readonly 'rawCopperBlock': BlockType;\n        static readonly 'rawGoldBlock': BlockType;\n        static readonly 'rawIronBlock': BlockType;\n        static readonly 'redCandle': BlockType;\n        static readonly 'redCandleCake': BlockType;\n        static readonly 'redFlower': BlockType;\n        static readonly 'redGlazedTerracotta': BlockType;\n        static readonly 'redMushroom': BlockType;\n        static readonly 'redMushroomBlock': BlockType;\n        static readonly 'redNetherBrick': BlockType;\n        static readonly 'redNetherBrickStairs': BlockType;\n        static readonly 'redSandstone': BlockType;\n        static readonly 'redSandstoneStairs': BlockType;\n        static readonly 'redstoneBlock': BlockType;\n        static readonly 'redstoneLamp': BlockType;\n        static readonly 'redstoneOre': BlockType;\n        static readonly 'redstoneTorch': BlockType;\n        static readonly 'redstoneWire': BlockType;\n        static readonly 'reeds': BlockType;\n        static readonly 'reinforcedDeepslate': BlockType;\n        static readonly 'repeatingCommandBlock': BlockType;\n        static readonly 'reserved6': BlockType;\n        static readonly 'respawnAnchor': BlockType;\n        static readonly 'sand': BlockType;\n        static readonly 'sandstone': BlockType;\n        static readonly 'sandstoneStairs': BlockType;\n        static readonly 'sapling': BlockType;\n        static readonly 'scaffolding': BlockType;\n        static readonly 'sculk': BlockType;\n        static readonly 'sculkCatalyst': BlockType;\n        static readonly 'sculkSensor': BlockType;\n        static readonly 'sculkShrieker': BlockType;\n        static readonly 'sculkVein': BlockType;\n        static readonly 'seagrass': BlockType;\n        static readonly 'seaLantern': BlockType;\n        static readonly 'seaPickle': BlockType;\n        static readonly 'shroomlight': BlockType;\n        static readonly 'shulkerBox': BlockType;\n        static readonly 'silverGlazedTerracotta': BlockType;\n        static readonly 'skull': BlockType;\n        static readonly 'slime': BlockType;\n        static readonly 'smallAmethystBud': BlockType;\n        static readonly 'smallDripleafBlock': BlockType;\n        static readonly 'smithingTable': BlockType;\n        static readonly 'smoker': BlockType;\n        static readonly 'smoothBasalt': BlockType;\n        static readonly 'smoothQuartzStairs': BlockType;\n        static readonly 'smoothRedSandstoneStairs': BlockType;\n        static readonly 'smoothSandstoneStairs': BlockType;\n        static readonly 'smoothStone': BlockType;\n        static readonly 'snow': BlockType;\n        static readonly 'snowLayer': BlockType;\n        static readonly 'soulCampfire': BlockType;\n        static readonly 'soulFire': BlockType;\n        static readonly 'soulLantern': BlockType;\n        static readonly 'soulSand': BlockType;\n        static readonly 'soulSoil': BlockType;\n        static readonly 'soulTorch': BlockType;\n        static readonly 'sponge': BlockType;\n        static readonly 'sporeBlossom': BlockType;\n        static readonly 'spruceButton': BlockType;\n        static readonly 'spruceDoor': BlockType;\n        static readonly 'spruceFenceGate': BlockType;\n        static readonly 'sprucePressurePlate': BlockType;\n        static readonly 'spruceStairs': BlockType;\n        static readonly 'spruceStandingSign': BlockType;\n        static readonly 'spruceTrapdoor': BlockType;\n        static readonly 'spruceWallSign': BlockType;\n        static readonly 'stainedGlass': BlockType;\n        static readonly 'stainedGlassPane': BlockType;\n        static readonly 'stainedHardenedClay': BlockType;\n        static readonly 'standingBanner': BlockType;\n        static readonly 'standingSign': BlockType;\n        static readonly 'stickyPiston': BlockType;\n        static readonly 'stickyPistonArmCollision': BlockType;\n        static readonly 'stone': BlockType;\n        static readonly 'stoneBlockSlab': BlockType;\n        static readonly 'stoneBlockSlab2': BlockType;\n        static readonly 'stoneBlockSlab3': BlockType;\n        static readonly 'stoneBlockSlab4': BlockType;\n        static readonly 'stonebrick': BlockType;\n        static readonly 'stoneBrickStairs': BlockType;\n        static readonly 'stoneButton': BlockType;\n        static readonly 'stonecutter': BlockType;\n        static readonly 'stonecutterBlock': BlockType;\n        static readonly 'stonePressurePlate': BlockType;\n        static readonly 'stoneSlab': BlockType;\n        static readonly 'stoneSlab2': BlockType;\n        static readonly 'stoneSlab3': BlockType;\n        static readonly 'stoneSlab4': BlockType;\n        static readonly 'stoneStairs': BlockType;\n        static readonly 'strippedAcaciaLog': BlockType;\n        static readonly 'strippedBirchLog': BlockType;\n        static readonly 'strippedCrimsonHyphae': BlockType;\n        static readonly 'strippedCrimsonStem': BlockType;\n        static readonly 'strippedDarkOakLog': BlockType;\n        static readonly 'strippedJungleLog': BlockType;\n        static readonly 'strippedMangroveLog': BlockType;\n        static readonly 'strippedMangroveWood': BlockType;\n        static readonly 'strippedOakLog': BlockType;\n        static readonly 'strippedSpruceLog': BlockType;\n        static readonly 'strippedWarpedHyphae': BlockType;\n        static readonly 'strippedWarpedStem': BlockType;\n        static readonly 'structureBlock': BlockType;\n        static readonly 'structureVoid': BlockType;\n        static readonly 'sweetBerryBush': BlockType;\n        static readonly 'tallgrass': BlockType;\n        static readonly 'target': BlockType;\n        static readonly 'tintedGlass': BlockType;\n        static readonly 'tnt': BlockType;\n        static readonly 'torch': BlockType;\n        static readonly 'trapdoor': BlockType;\n        static readonly 'trappedChest': BlockType;\n        static readonly 'tripWire': BlockType;\n        static readonly 'tripwireHook': BlockType;\n        static readonly 'tuff': BlockType;\n        static readonly 'turtleEgg': BlockType;\n        static readonly 'twistingVines': BlockType;\n        static readonly 'underwaterTorch': BlockType;\n        static readonly 'undyedShulkerBox': BlockType;\n        static readonly 'unknown': BlockType;\n        static readonly 'unlitRedstoneTorch': BlockType;\n        static readonly 'unpoweredComparator': BlockType;\n        static readonly 'unpoweredRepeater': BlockType;\n        static readonly 'verdantFroglight': BlockType;\n        static readonly 'vine': BlockType;\n        static readonly 'wallBanner': BlockType;\n        static readonly 'wallSign': BlockType;\n        static readonly 'warpedButton': BlockType;\n        static readonly 'warpedDoor': BlockType;\n        static readonly 'warpedDoubleSlab': BlockType;\n        static readonly 'warpedFence': BlockType;\n        static readonly 'warpedFenceGate': BlockType;\n        static readonly 'warpedFungus': BlockType;\n        static readonly 'warpedHyphae': BlockType;\n        static readonly 'warpedNylium': BlockType;\n        static readonly 'warpedPlanks': BlockType;\n        static readonly 'warpedPressurePlate': BlockType;\n        static readonly 'warpedRoots': BlockType;\n        static readonly 'warpedSlab': BlockType;\n        static readonly 'warpedStairs': BlockType;\n        static readonly 'warpedStandingSign': BlockType;\n        static readonly 'warpedStem': BlockType;\n        static readonly 'warpedTrapdoor': BlockType;\n        static readonly 'warpedWallSign': BlockType;\n        static readonly 'warpedWartBlock': BlockType;\n        static readonly 'water': BlockType;\n        static readonly 'waterlily': BlockType;\n        static readonly 'waxedCopper': BlockType;\n        static readonly 'waxedCutCopper': BlockType;\n        static readonly 'waxedCutCopperSlab': BlockType;\n        static readonly 'waxedCutCopperStairs': BlockType;\n        static readonly 'waxedDoubleCutCopperSlab': BlockType;\n        static readonly 'waxedExposedCopper': BlockType;\n        static readonly 'waxedExposedCutCopper': BlockType;\n        static readonly 'waxedExposedCutCopperSlab': BlockType;\n        static readonly 'waxedExposedCutCopperStairs': BlockType;\n        static readonly 'waxedExposedDoubleCutCopperSlab': BlockType;\n        static readonly 'waxedOxidizedCopper': BlockType;\n        static readonly 'waxedOxidizedCutCopper': BlockType;\n        static readonly 'waxedOxidizedCutCopperSlab': BlockType;\n        static readonly 'waxedOxidizedCutCopperStairs': BlockType;\n        static readonly 'waxedOxidizedDoubleCutCopperSlab': BlockType;\n        static readonly 'waxedWeatheredCopper': BlockType;\n        static readonly 'waxedWeatheredCutCopper': BlockType;\n        static readonly 'waxedWeatheredCutCopperSlab': BlockType;\n        static readonly 'waxedWeatheredCutCopperStairs': BlockType;\n        static readonly 'waxedWeatheredDoubleCutCopperSlab': BlockType;\n        static readonly 'weatheredCopper': BlockType;\n        static readonly 'weatheredCutCopper': BlockType;\n        static readonly 'weatheredCutCopperSlab': BlockType;\n        static readonly 'weatheredCutCopperStairs': BlockType;\n        static readonly 'weatheredDoubleCutCopperSlab': BlockType;\n        static readonly 'web': BlockType;\n        static readonly 'weepingVines': BlockType;\n        static readonly 'wheat': BlockType;\n        static readonly 'whiteCandle': BlockType;\n        static readonly 'whiteCandleCake': BlockType;\n        static readonly 'whiteGlazedTerracotta': BlockType;\n        static readonly 'witherRose': BlockType;\n        static readonly 'wood': BlockType;\n        static readonly 'woodenButton': BlockType;\n        static readonly 'woodenDoor': BlockType;\n        static readonly 'woodenPressurePlate': BlockType;\n        static readonly 'woodenSlab': BlockType;\n        static readonly 'wool': BlockType;\n        static readonly 'yellowCandle': BlockType;\n        static readonly 'yellowCandleCake': BlockType;\n        static readonly 'yellowFlower': BlockType;\n        static readonly 'yellowGlazedTerracotta': BlockType;\n        static get(typeName: string): BlockType;\n        static getAllBlockTypes(): BlockType[];\n        protected constructor();\n    }\n    export class MinecraftDimensionTypes {\n        static readonly 'nether' = 'minecraft:nether';\n        static readonly 'overworld' = 'minecraft:overworld';\n        static readonly 'theEnd' = 'minecraft:the_end';\n        protected constructor();\n    }\n    export class MinecraftEffectTypes {\n        static readonly 'absorption': EffectType;\n        static readonly 'badOmen': EffectType;\n        static readonly 'blindness': EffectType;\n        static readonly 'conduitPower': EffectType;\n        static readonly 'darkness': EffectType;\n        static readonly 'empty': EffectType;\n        static readonly 'fatalPoison': EffectType;\n        static readonly 'fireResistance': EffectType;\n        static readonly 'haste': EffectType;\n        static readonly 'healthBoost': EffectType;\n        static readonly 'hunger': EffectType;\n        static readonly 'instantDamage': EffectType;\n        static readonly 'instantHealth': EffectType;\n        static readonly 'invisibility': EffectType;\n        static readonly 'jumpBoost': EffectType;\n        static readonly 'levitation': EffectType;\n        static readonly 'miningFatigue': EffectType;\n        static readonly 'nausea': EffectType;\n        static readonly 'nightVision': EffectType;\n        static readonly 'poison': EffectType;\n        static readonly 'regeneration': EffectType;\n        static readonly 'resistance': EffectType;\n        static readonly 'saturation': EffectType;\n        static readonly 'slowFalling': EffectType;\n        static readonly 'slowness': EffectType;\n        static readonly 'speed': EffectType;\n        static readonly 'strength': EffectType;\n        static readonly 'villageHero': EffectType;\n        static readonly 'waterBreathing': EffectType;\n        static readonly 'weakness': EffectType;\n        static readonly 'wither': EffectType;\n        protected constructor();\n    }\n    export class MinecraftEnchantmentTypes {\n        static readonly 'aquaAffinity': EnchantmentType;\n        static readonly 'baneOfArthropods': EnchantmentType;\n        static readonly 'binding': EnchantmentType;\n        static readonly 'blastProtection': EnchantmentType;\n        static readonly 'channeling': EnchantmentType;\n        static readonly 'depthStrider': EnchantmentType;\n        static readonly 'efficiency': EnchantmentType;\n        static readonly 'featherFalling': EnchantmentType;\n        static readonly 'fireAspect': EnchantmentType;\n        static readonly 'fireProtection': EnchantmentType;\n        static readonly 'flame': EnchantmentType;\n        static readonly 'fortune': EnchantmentType;\n        static readonly 'frostWalker': EnchantmentType;\n        static readonly 'impaling': EnchantmentType;\n        static readonly 'infinity': EnchantmentType;\n        static readonly 'knockback': EnchantmentType;\n        static readonly 'looting': EnchantmentType;\n        static readonly 'loyalty': EnchantmentType;\n        static readonly 'luckOfTheSea': EnchantmentType;\n        static readonly 'lure': EnchantmentType;\n        static readonly 'mending': EnchantmentType;\n        static readonly 'multishot': EnchantmentType;\n        static readonly 'piercing': EnchantmentType;\n        static readonly 'power': EnchantmentType;\n        static readonly 'projectileProtection': EnchantmentType;\n        static readonly 'protection': EnchantmentType;\n        static readonly 'punch': EnchantmentType;\n        static readonly 'quickCharge': EnchantmentType;\n        static readonly 'respiration': EnchantmentType;\n        static readonly 'riptide': EnchantmentType;\n        static readonly 'sharpness': EnchantmentType;\n        static readonly 'silkTouch': EnchantmentType;\n        static readonly 'smite': EnchantmentType;\n        static readonly 'soulSpeed': EnchantmentType;\n        static readonly 'swiftSneak': EnchantmentType;\n        static readonly 'thorns': EnchantmentType;\n        static readonly 'unbreaking': EnchantmentType;\n        static readonly 'vanishing': EnchantmentType;\n        protected constructor();\n    }\n    export class MinecraftEntityTypes {\n        static readonly 'agent': EntityType;\n        static readonly 'allay': EntityType;\n        static readonly 'areaEffectCloud': EntityType;\n        static readonly 'armorStand': EntityType;\n        static readonly 'arrow': EntityType;\n        static readonly 'axolotl': EntityType;\n        static readonly 'bat': EntityType;\n        static readonly 'bee': EntityType;\n        static readonly 'blaze': EntityType;\n        static readonly 'boat': EntityType;\n        static readonly 'cat': EntityType;\n        static readonly 'caveSpider': EntityType;\n        static readonly 'chestBoat': EntityType;\n        static readonly 'chestMinecart': EntityType;\n        static readonly 'chicken': EntityType;\n        static readonly 'cod': EntityType;\n        static readonly 'commandBlockMinecart': EntityType;\n        static readonly 'cow': EntityType;\n        static readonly 'creeper': EntityType;\n        static readonly 'dolphin': EntityType;\n        static readonly 'donkey': EntityType;\n        static readonly 'dragonFireball': EntityType;\n        static readonly 'drowned': EntityType;\n        static readonly 'egg': EntityType;\n        static readonly 'elderGuardian': EntityType;\n        static readonly 'enderCrystal': EntityType;\n        static readonly 'enderDragon': EntityType;\n        static readonly 'enderman': EntityType;\n        static readonly 'endermite': EntityType;\n        static readonly 'enderPearl': EntityType;\n        static readonly 'evocationIllager': EntityType;\n        static readonly 'eyeOfEnderSignal': EntityType;\n        static readonly 'fireball': EntityType;\n        static readonly 'fireworksRocket': EntityType;\n        static readonly 'fishingHook': EntityType;\n        static readonly 'fox': EntityType;\n        static readonly 'frog': EntityType;\n        static readonly 'ghast': EntityType;\n        static readonly 'glowSquid': EntityType;\n        static readonly 'goat': EntityType;\n        static readonly 'guardian': EntityType;\n        static readonly 'hoglin': EntityType;\n        static readonly 'hopperMinecart': EntityType;\n        static readonly 'horse': EntityType;\n        static readonly 'husk': EntityType;\n        static readonly 'ironGolem': EntityType;\n        static readonly 'lightningBolt': EntityType;\n        static readonly 'lingeringPotion': EntityType;\n        static readonly 'llama': EntityType;\n        static readonly 'llamaSpit': EntityType;\n        static readonly 'magmaCube': EntityType;\n        static readonly 'minecart': EntityType;\n        static readonly 'mooshroom': EntityType;\n        static readonly 'mule': EntityType;\n        static readonly 'npc': EntityType;\n        static readonly 'ocelot': EntityType;\n        static readonly 'panda': EntityType;\n        static readonly 'parrot': EntityType;\n        static readonly 'phantom': EntityType;\n        static readonly 'pig': EntityType;\n        static readonly 'piglin': EntityType;\n        static readonly 'piglinBrute': EntityType;\n        static readonly 'pillager': EntityType;\n        static readonly 'player': EntityType;\n        static readonly 'polarBear': EntityType;\n        static readonly 'pufferfish': EntityType;\n        static readonly 'rabbit': EntityType;\n        static readonly 'ravager': EntityType;\n        static readonly 'salmon': EntityType;\n        static readonly 'sheep': EntityType;\n        static readonly 'shulker': EntityType;\n        static readonly 'shulkerBullet': EntityType;\n        static readonly 'silverfish': EntityType;\n        static readonly 'skeleton': EntityType;\n        static readonly 'skeletonHorse': EntityType;\n        static readonly 'slime': EntityType;\n        static readonly 'smallFireball': EntityType;\n        static readonly 'snowball': EntityType;\n        static readonly 'snowGolem': EntityType;\n        static readonly 'spider': EntityType;\n        static readonly 'splashPotion': EntityType;\n        static readonly 'squid': EntityType;\n        static readonly 'stray': EntityType;\n        static readonly 'strider': EntityType;\n        static readonly 'tadpole': EntityType;\n        static readonly 'thrownTrident': EntityType;\n        static readonly 'tnt': EntityType;\n        static readonly 'tntMinecart': EntityType;\n        static readonly 'tripodCamera': EntityType;\n        static readonly 'tropicalfish': EntityType;\n        static readonly 'turtle': EntityType;\n        static readonly 'vex': EntityType;\n        static readonly 'villager': EntityType;\n        static readonly 'villagerV2': EntityType;\n        static readonly 'vindicator': EntityType;\n        static readonly 'wanderingTrader': EntityType;\n        static readonly 'warden': EntityType;\n        static readonly 'witch': EntityType;\n        static readonly 'wither': EntityType;\n        static readonly 'witherSkeleton': EntityType;\n        static readonly 'witherSkull': EntityType;\n        static readonly 'witherSkullDangerous': EntityType;\n        static readonly 'wolf': EntityType;\n        static readonly 'xpBottle': EntityType;\n        static readonly 'xpOrb': EntityType;\n        static readonly 'zoglin': EntityType;\n        static readonly 'zombie': EntityType;\n        static readonly 'zombieHorse': EntityType;\n        static readonly 'zombiePigman': EntityType;\n        static readonly 'zombieVillager': EntityType;\n        static readonly 'zombieVillagerV2': EntityType;\n        protected constructor();\n    }\n    export class MinecraftItemTypes {\n        static readonly 'acaciaBoat': ItemType;\n        static readonly 'acaciaButton': ItemType;\n        static readonly 'acaciaChestBoat': ItemType;\n        static readonly 'acaciaDoor': ItemType;\n        static readonly 'acaciaFenceGate': ItemType;\n        static readonly 'acaciaPressurePlate': ItemType;\n        static readonly 'acaciaSign': ItemType;\n        static readonly 'acaciaStairs': ItemType;\n        static readonly 'acaciaStandingSign': ItemType;\n        static readonly 'acaciaTrapdoor': ItemType;\n        static readonly 'acaciaWallSign': ItemType;\n        static readonly 'activatorRail': ItemType;\n        static readonly 'agentSpawnEgg': ItemType;\n        static readonly 'air': ItemType;\n        static readonly 'allaySpawnEgg': ItemType;\n        static readonly 'allow': ItemType;\n        static readonly 'amethystBlock': ItemType;\n        static readonly 'amethystCluster': ItemType;\n        static readonly 'amethystShard': ItemType;\n        static readonly 'ancientDebris': ItemType;\n        static readonly 'andesiteStairs': ItemType;\n        static readonly 'anvil': ItemType;\n        static readonly 'apple': ItemType;\n        static readonly 'armorStand': ItemType;\n        static readonly 'arrow': ItemType;\n        static readonly 'axolotlBucket': ItemType;\n        static readonly 'axolotlSpawnEgg': ItemType;\n        static readonly 'azalea': ItemType;\n        static readonly 'azaleaLeaves': ItemType;\n        static readonly 'azaleaLeavesFlowered': ItemType;\n        static readonly 'bakedPotato': ItemType;\n        static readonly 'balloon': ItemType;\n        static readonly 'bamboo': ItemType;\n        static readonly 'bambooSapling': ItemType;\n        static readonly 'banner': ItemType;\n        static readonly 'bannerPattern': ItemType;\n        static readonly 'barrel': ItemType;\n        static readonly 'barrier': ItemType;\n        static readonly 'basalt': ItemType;\n        static readonly 'batSpawnEgg': ItemType;\n        static readonly 'beacon': ItemType;\n        static readonly 'bed': ItemType;\n        static readonly 'bedrock': ItemType;\n        static readonly 'beef': ItemType;\n        static readonly 'beehive': ItemType;\n        static readonly 'beeNest': ItemType;\n        static readonly 'beeSpawnEgg': ItemType;\n        static readonly 'beetroot': ItemType;\n        static readonly 'beetrootSeeds': ItemType;\n        static readonly 'beetrootSoup': ItemType;\n        static readonly 'bell': ItemType;\n        static readonly 'bigDripleaf': ItemType;\n        static readonly 'birchBoat': ItemType;\n        static readonly 'birchButton': ItemType;\n        static readonly 'birchChestBoat': ItemType;\n        static readonly 'birchDoor': ItemType;\n        static readonly 'birchFenceGate': ItemType;\n        static readonly 'birchPressurePlate': ItemType;\n        static readonly 'birchSign': ItemType;\n        static readonly 'birchStairs': ItemType;\n        static readonly 'birchStandingSign': ItemType;\n        static readonly 'birchTrapdoor': ItemType;\n        static readonly 'birchWallSign': ItemType;\n        static readonly 'blackCandle': ItemType;\n        static readonly 'blackCandleCake': ItemType;\n        static readonly 'blackDye': ItemType;\n        static readonly 'blackGlazedTerracotta': ItemType;\n        static readonly 'blackstone': ItemType;\n        static readonly 'blackstoneDoubleSlab': ItemType;\n        static readonly 'blackstoneSlab': ItemType;\n        static readonly 'blackstoneStairs': ItemType;\n        static readonly 'blackstoneWall': ItemType;\n        static readonly 'blastFurnace': ItemType;\n        static readonly 'blazePowder': ItemType;\n        static readonly 'blazeRod': ItemType;\n        static readonly 'blazeSpawnEgg': ItemType;\n        static readonly 'bleach': ItemType;\n        static readonly 'blueCandle': ItemType;\n        static readonly 'blueCandleCake': ItemType;\n        static readonly 'blueDye': ItemType;\n        static readonly 'blueGlazedTerracotta': ItemType;\n        static readonly 'blueIce': ItemType;\n        static readonly 'boat': ItemType;\n        static readonly 'bone': ItemType;\n        static readonly 'boneBlock': ItemType;\n        static readonly 'boneMeal': ItemType;\n        static readonly 'book': ItemType;\n        static readonly 'bookshelf': ItemType;\n        static readonly 'borderBlock': ItemType;\n        static readonly 'bordureIndentedBannerPattern': ItemType;\n        static readonly 'bow': ItemType;\n        static readonly 'bowl': ItemType;\n        static readonly 'bread': ItemType;\n        static readonly 'brewingStand': ItemType;\n        static readonly 'brick': ItemType;\n        static readonly 'brickBlock': ItemType;\n        static readonly 'brickStairs': ItemType;\n        static readonly 'brownCandle': ItemType;\n        static readonly 'brownCandleCake': ItemType;\n        static readonly 'brownDye': ItemType;\n        static readonly 'brownGlazedTerracotta': ItemType;\n        static readonly 'brownMushroom': ItemType;\n        static readonly 'brownMushroomBlock': ItemType;\n        static readonly 'bubbleColumn': ItemType;\n        static readonly 'bucket': ItemType;\n        static readonly 'buddingAmethyst': ItemType;\n        static readonly 'cactus': ItemType;\n        static readonly 'cake': ItemType;\n        static readonly 'calcite': ItemType;\n        static readonly 'camera': ItemType;\n        static readonly 'campfire': ItemType;\n        static readonly 'candle': ItemType;\n        static readonly 'candleCake': ItemType;\n        static readonly 'carpet': ItemType;\n        static readonly 'carrot': ItemType;\n        static readonly 'carrotOnAStick': ItemType;\n        static readonly 'carrots': ItemType;\n        static readonly 'cartographyTable': ItemType;\n        static readonly 'carvedPumpkin': ItemType;\n        static readonly 'catSpawnEgg': ItemType;\n        static readonly 'cauldron': ItemType;\n        static readonly 'caveSpiderSpawnEgg': ItemType;\n        static readonly 'caveVines': ItemType;\n        static readonly 'caveVinesBodyWithBerries': ItemType;\n        static readonly 'caveVinesHeadWithBerries': ItemType;\n        static readonly 'chain': ItemType;\n        static readonly 'chainCommandBlock': ItemType;\n        static readonly 'chainmailBoots': ItemType;\n        static readonly 'chainmailChestplate': ItemType;\n        static readonly 'chainmailHelmet': ItemType;\n        static readonly 'chainmailLeggings': ItemType;\n        static readonly 'charcoal': ItemType;\n        static readonly 'chemicalHeat': ItemType;\n        static readonly 'chemistryTable': ItemType;\n        static readonly 'chest': ItemType;\n        static readonly 'chestBoat': ItemType;\n        static readonly 'chestMinecart': ItemType;\n        static readonly 'chicken': ItemType;\n        static readonly 'chickenSpawnEgg': ItemType;\n        static readonly 'chiseledDeepslate': ItemType;\n        static readonly 'chiseledNetherBricks': ItemType;\n        static readonly 'chiseledPolishedBlackstone': ItemType;\n        static readonly 'chorusFlower': ItemType;\n        static readonly 'chorusFruit': ItemType;\n        static readonly 'chorusPlant': ItemType;\n        static readonly 'clay': ItemType;\n        static readonly 'clayBall': ItemType;\n        static readonly 'clientRequestPlaceholderBlock': ItemType;\n        static readonly 'clock': ItemType;\n        static readonly 'coal': ItemType;\n        static readonly 'coalBlock': ItemType;\n        static readonly 'coalOre': ItemType;\n        static readonly 'cobbledDeepslate': ItemType;\n        static readonly 'cobbledDeepslateDoubleSlab': ItemType;\n        static readonly 'cobbledDeepslateSlab': ItemType;\n        static readonly 'cobbledDeepslateStairs': ItemType;\n        static readonly 'cobbledDeepslateWall': ItemType;\n        static readonly 'cobblestone': ItemType;\n        static readonly 'cobblestoneWall': ItemType;\n        static readonly 'cocoa': ItemType;\n        static readonly 'cocoaBeans': ItemType;\n        static readonly 'cod': ItemType;\n        static readonly 'codBucket': ItemType;\n        static readonly 'codSpawnEgg': ItemType;\n        static readonly 'coloredTorchBp': ItemType;\n        static readonly 'coloredTorchRg': ItemType;\n        static readonly 'commandBlock': ItemType;\n        static readonly 'commandBlockMinecart': ItemType;\n        static readonly 'comparator': ItemType;\n        static readonly 'compass': ItemType;\n        static readonly 'composter': ItemType;\n        static readonly 'compound': ItemType;\n        static readonly 'concrete': ItemType;\n        static readonly 'concretePowder': ItemType;\n        static readonly 'conduit': ItemType;\n        static readonly 'cookedBeef': ItemType;\n        static readonly 'cookedChicken': ItemType;\n        static readonly 'cookedCod': ItemType;\n        static readonly 'cookedMutton': ItemType;\n        static readonly 'cookedPorkchop': ItemType;\n        static readonly 'cookedRabbit': ItemType;\n        static readonly 'cookedSalmon': ItemType;\n        static readonly 'cookie': ItemType;\n        static readonly 'copperBlock': ItemType;\n        static readonly 'copperIngot': ItemType;\n        static readonly 'copperOre': ItemType;\n        static readonly 'coral': ItemType;\n        static readonly 'coralBlock': ItemType;\n        static readonly 'coralFan': ItemType;\n        static readonly 'coralFanDead': ItemType;\n        static readonly 'coralFanHang': ItemType;\n        static readonly 'coralFanHang2': ItemType;\n        static readonly 'coralFanHang3': ItemType;\n        static readonly 'cowSpawnEgg': ItemType;\n        static readonly 'crackedDeepslateBricks': ItemType;\n        static readonly 'crackedDeepslateTiles': ItemType;\n        static readonly 'crackedNetherBricks': ItemType;\n        static readonly 'crackedPolishedBlackstoneBricks': ItemType;\n        static readonly 'craftingTable': ItemType;\n        static readonly 'creeperBannerPattern': ItemType;\n        static readonly 'creeperSpawnEgg': ItemType;\n        static readonly 'crimsonButton': ItemType;\n        static readonly 'crimsonDoor': ItemType;\n        static readonly 'crimsonDoubleSlab': ItemType;\n        static readonly 'crimsonFence': ItemType;\n        static readonly 'crimsonFenceGate': ItemType;\n        static readonly 'crimsonFungus': ItemType;\n        static readonly 'crimsonHyphae': ItemType;\n        static readonly 'crimsonNylium': ItemType;\n        static readonly 'crimsonPlanks': ItemType;\n        static readonly 'crimsonPressurePlate': ItemType;\n        static readonly 'crimsonRoots': ItemType;\n        static readonly 'crimsonSign': ItemType;\n        static readonly 'crimsonSlab': ItemType;\n        static readonly 'crimsonStairs': ItemType;\n        static readonly 'crimsonStandingSign': ItemType;\n        static readonly 'crimsonStem': ItemType;\n        static readonly 'crimsonTrapdoor': ItemType;\n        static readonly 'crimsonWallSign': ItemType;\n        static readonly 'crossbow': ItemType;\n        static readonly 'cryingObsidian': ItemType;\n        static readonly 'cutCopper': ItemType;\n        static readonly 'cutCopperSlab': ItemType;\n        static readonly 'cutCopperStairs': ItemType;\n        static readonly 'cyanCandle': ItemType;\n        static readonly 'cyanCandleCake': ItemType;\n        static readonly 'cyanDye': ItemType;\n        static readonly 'cyanGlazedTerracotta': ItemType;\n        static readonly 'darkOakBoat': ItemType;\n        static readonly 'darkOakButton': ItemType;\n        static readonly 'darkOakChestBoat': ItemType;\n        static readonly 'darkOakDoor': ItemType;\n        static readonly 'darkOakFenceGate': ItemType;\n        static readonly 'darkOakPressurePlate': ItemType;\n        static readonly 'darkOakSign': ItemType;\n        static readonly 'darkOakStairs': ItemType;\n        static readonly 'darkoakStandingSign': ItemType;\n        static readonly 'darkOakTrapdoor': ItemType;\n        static readonly 'darkoakWallSign': ItemType;\n        static readonly 'darkPrismarineStairs': ItemType;\n        static readonly 'daylightDetector': ItemType;\n        static readonly 'daylightDetectorInverted': ItemType;\n        static readonly 'deadbush': ItemType;\n        static readonly 'debugStick': ItemType;\n        static readonly 'deepslate': ItemType;\n        static readonly 'deepslateBrickDoubleSlab': ItemType;\n        static readonly 'deepslateBricks': ItemType;\n        static readonly 'deepslateBrickSlab': ItemType;\n        static readonly 'deepslateBrickStairs': ItemType;\n        static readonly 'deepslateBrickWall': ItemType;\n        static readonly 'deepslateCoalOre': ItemType;\n        static readonly 'deepslateCopperOre': ItemType;\n        static readonly 'deepslateDiamondOre': ItemType;\n        static readonly 'deepslateEmeraldOre': ItemType;\n        static readonly 'deepslateGoldOre': ItemType;\n        static readonly 'deepslateIronOre': ItemType;\n        static readonly 'deepslateLapisOre': ItemType;\n        static readonly 'deepslateRedstoneOre': ItemType;\n        static readonly 'deepslateTileDoubleSlab': ItemType;\n        static readonly 'deepslateTiles': ItemType;\n        static readonly 'deepslateTileSlab': ItemType;\n        static readonly 'deepslateTileStairs': ItemType;\n        static readonly 'deepslateTileWall': ItemType;\n        static readonly 'deny': ItemType;\n        static readonly 'detectorRail': ItemType;\n        static readonly 'diamond': ItemType;\n        static readonly 'diamondAxe': ItemType;\n        static readonly 'diamondBlock': ItemType;\n        static readonly 'diamondBoots': ItemType;\n        static readonly 'diamondChestplate': ItemType;\n        static readonly 'diamondHelmet': ItemType;\n        static readonly 'diamondHoe': ItemType;\n        static readonly 'diamondHorseArmor': ItemType;\n        static readonly 'diamondLeggings': ItemType;\n        static readonly 'diamondOre': ItemType;\n        static readonly 'diamondPickaxe': ItemType;\n        static readonly 'diamondShovel': ItemType;\n        static readonly 'diamondSword': ItemType;\n        static readonly 'dioriteStairs': ItemType;\n        static readonly 'dirt': ItemType;\n        static readonly 'dirtWithRoots': ItemType;\n        static readonly 'discFragment5': ItemType;\n        static readonly 'dispenser': ItemType;\n        static readonly 'dolphinSpawnEgg': ItemType;\n        static readonly 'donkeySpawnEgg': ItemType;\n        static readonly 'doubleCutCopperSlab': ItemType;\n        static readonly 'doublePlant': ItemType;\n        static readonly 'doubleStoneBlockSlab': ItemType;\n        static readonly 'doubleStoneBlockSlab2': ItemType;\n        static readonly 'doubleStoneBlockSlab3': ItemType;\n        static readonly 'doubleStoneBlockSlab4': ItemType;\n        static readonly 'doubleWoodenSlab': ItemType;\n        static readonly 'dragonBreath': ItemType;\n        static readonly 'dragonEgg': ItemType;\n        static readonly 'driedKelp': ItemType;\n        static readonly 'driedKelpBlock': ItemType;\n        static readonly 'dripstoneBlock': ItemType;\n        static readonly 'dropper': ItemType;\n        static readonly 'drownedSpawnEgg': ItemType;\n        static readonly 'dye': ItemType;\n        static readonly 'echoShard': ItemType;\n        static readonly 'egg': ItemType;\n        static readonly 'elderGuardianSpawnEgg': ItemType;\n        static readonly 'element0': ItemType;\n        static readonly 'element1': ItemType;\n        static readonly 'element10': ItemType;\n        static readonly 'element100': ItemType;\n        static readonly 'element101': ItemType;\n        static readonly 'element102': ItemType;\n        static readonly 'element103': ItemType;\n        static readonly 'element104': ItemType;\n        static readonly 'element105': ItemType;\n        static readonly 'element106': ItemType;\n        static readonly 'element107': ItemType;\n        static readonly 'element108': ItemType;\n        static readonly 'element109': ItemType;\n        static readonly 'element11': ItemType;\n        static readonly 'element110': ItemType;\n        static readonly 'element111': ItemType;\n        static readonly 'element112': ItemType;\n        static readonly 'element113': ItemType;\n        static readonly 'element114': ItemType;\n        static readonly 'element115': ItemType;\n        static readonly 'element116': ItemType;\n        static readonly 'element117': ItemType;\n        static readonly 'element118': ItemType;\n        static readonly 'element12': ItemType;\n        static readonly 'element13': ItemType;\n        static readonly 'element14': ItemType;\n        static readonly 'element15': ItemType;\n        static readonly 'element16': ItemType;\n        static readonly 'element17': ItemType;\n        static readonly 'element18': ItemType;\n        static readonly 'element19': ItemType;\n        static readonly 'element2': ItemType;\n        static readonly 'element20': ItemType;\n        static readonly 'element21': ItemType;\n        static readonly 'element22': ItemType;\n        static readonly 'element23': ItemType;\n        static readonly 'element24': ItemType;\n        static readonly 'element25': ItemType;\n        static readonly 'element26': ItemType;\n        static readonly 'element27': ItemType;\n        static readonly 'element28': ItemType;\n        static readonly 'element29': ItemType;\n        static readonly 'element3': ItemType;\n        static readonly 'element30': ItemType;\n        static readonly 'element31': ItemType;\n        static readonly 'element32': ItemType;\n        static readonly 'element33': ItemType;\n        static readonly 'element34': ItemType;\n        static readonly 'element35': ItemType;\n        static readonly 'element36': ItemType;\n        static readonly 'element37': ItemType;\n        static readonly 'element38': ItemType;\n        static readonly 'element39': ItemType;\n        static readonly 'element4': ItemType;\n        static readonly 'element40': ItemType;\n        static readonly 'element41': ItemType;\n        static readonly 'element42': ItemType;\n        static readonly 'element43': ItemType;\n        static readonly 'element44': ItemType;\n        static readonly 'element45': ItemType;\n        static readonly 'element46': ItemType;\n        static readonly 'element47': ItemType;\n        static readonly 'element48': ItemType;\n        static readonly 'element49': ItemType;\n        static readonly 'element5': ItemType;\n        static readonly 'element50': ItemType;\n        static readonly 'element51': ItemType;\n        static readonly 'element52': ItemType;\n        static readonly 'element53': ItemType;\n        static readonly 'element54': ItemType;\n        static readonly 'element55': ItemType;\n        static readonly 'element56': ItemType;\n        static readonly 'element57': ItemType;\n        static readonly 'element58': ItemType;\n        static readonly 'element59': ItemType;\n        static readonly 'element6': ItemType;\n        static readonly 'element60': ItemType;\n        static readonly 'element61': ItemType;\n        static readonly 'element62': ItemType;\n        static readonly 'element63': ItemType;\n        static readonly 'element64': ItemType;\n        static readonly 'element65': ItemType;\n        static readonly 'element66': ItemType;\n        static readonly 'element67': ItemType;\n        static readonly 'element68': ItemType;\n        static readonly 'element69': ItemType;\n        static readonly 'element7': ItemType;\n        static readonly 'element70': ItemType;\n        static readonly 'element71': ItemType;\n        static readonly 'element72': ItemType;\n        static readonly 'element73': ItemType;\n        static readonly 'element74': ItemType;\n        static readonly 'element75': ItemType;\n        static readonly 'element76': ItemType;\n        static readonly 'element77': ItemType;\n        static readonly 'element78': ItemType;\n        static readonly 'element79': ItemType;\n        static readonly 'element8': ItemType;\n        static readonly 'element80': ItemType;\n        static readonly 'element81': ItemType;\n        static readonly 'element82': ItemType;\n        static readonly 'element83': ItemType;\n        static readonly 'element84': ItemType;\n        static readonly 'element85': ItemType;\n        static readonly 'element86': ItemType;\n        static readonly 'element87': ItemType;\n        static readonly 'element88': ItemType;\n        static readonly 'element89': ItemType;\n        static readonly 'element9': ItemType;\n        static readonly 'element90': ItemType;\n        static readonly 'element91': ItemType;\n        static readonly 'element92': ItemType;\n        static readonly 'element93': ItemType;\n        static readonly 'element94': ItemType;\n        static readonly 'element95': ItemType;\n        static readonly 'element96': ItemType;\n        static readonly 'element97': ItemType;\n        static readonly 'element98': ItemType;\n        static readonly 'element99': ItemType;\n        static readonly 'elytra': ItemType;\n        static readonly 'emerald': ItemType;\n        static readonly 'emeraldBlock': ItemType;\n        static readonly 'emeraldOre': ItemType;\n        static readonly 'emptyMap': ItemType;\n        static readonly 'enchantedBook': ItemType;\n        static readonly 'enchantedGoldenApple': ItemType;\n        static readonly 'enchantingTable': ItemType;\n        static readonly 'endBricks': ItemType;\n        static readonly 'endBrickStairs': ItemType;\n        static readonly 'endCrystal': ItemType;\n        static readonly 'enderChest': ItemType;\n        static readonly 'enderEye': ItemType;\n        static readonly 'endermanSpawnEgg': ItemType;\n        static readonly 'endermiteSpawnEgg': ItemType;\n        static readonly 'enderPearl': ItemType;\n        static readonly 'endGateway': ItemType;\n        static readonly 'endPortal': ItemType;\n        static readonly 'endPortalFrame': ItemType;\n        static readonly 'endRod': ItemType;\n        static readonly 'endStone': ItemType;\n        static readonly 'evokerSpawnEgg': ItemType;\n        static readonly 'experienceBottle': ItemType;\n        static readonly 'exposedCopper': ItemType;\n        static readonly 'exposedCutCopper': ItemType;\n        static readonly 'exposedCutCopperSlab': ItemType;\n        static readonly 'exposedCutCopperStairs': ItemType;\n        static readonly 'exposedDoubleCutCopperSlab': ItemType;\n        static readonly 'farmland': ItemType;\n        static readonly 'feather': ItemType;\n        static readonly 'fence': ItemType;\n        static readonly 'fenceGate': ItemType;\n        static readonly 'fermentedSpiderEye': ItemType;\n        static readonly 'fieldMasonedBannerPattern': ItemType;\n        static readonly 'filledMap': ItemType;\n        static readonly 'fire': ItemType;\n        static readonly 'fireCharge': ItemType;\n        static readonly 'fireflySpawnEgg': ItemType;\n        static readonly 'fireworkRocket': ItemType;\n        static readonly 'fireworkStar': ItemType;\n        static readonly 'fishingRod': ItemType;\n        static readonly 'fletchingTable': ItemType;\n        static readonly 'flint': ItemType;\n        static readonly 'flintAndSteel': ItemType;\n        static readonly 'flowerBannerPattern': ItemType;\n        static readonly 'floweringAzalea': ItemType;\n        static readonly 'flowerPot': ItemType;\n        static readonly 'flowingLava': ItemType;\n        static readonly 'flowingWater': ItemType;\n        static readonly 'foxSpawnEgg': ItemType;\n        static readonly 'frame': ItemType;\n        static readonly 'frogSpawn': ItemType;\n        static readonly 'frogSpawnEgg': ItemType;\n        static readonly 'frostedIce': ItemType;\n        static readonly 'furnace': ItemType;\n        static readonly 'ghastSpawnEgg': ItemType;\n        static readonly 'ghastTear': ItemType;\n        static readonly 'gildedBlackstone': ItemType;\n        static readonly 'glass': ItemType;\n        static readonly 'glassBottle': ItemType;\n        static readonly 'glassPane': ItemType;\n        static readonly 'glisteringMelonSlice': ItemType;\n        static readonly 'globeBannerPattern': ItemType;\n        static readonly 'glowBerries': ItemType;\n        static readonly 'glowFrame': ItemType;\n        static readonly 'glowingobsidian': ItemType;\n        static readonly 'glowInkSac': ItemType;\n        static readonly 'glowLichen': ItemType;\n        static readonly 'glowSquidSpawnEgg': ItemType;\n        static readonly 'glowStick': ItemType;\n        static readonly 'glowstone': ItemType;\n        static readonly 'glowstoneDust': ItemType;\n        static readonly 'goatHorn': ItemType;\n        static readonly 'goatSpawnEgg': ItemType;\n        static readonly 'goldBlock': ItemType;\n        static readonly 'goldenApple': ItemType;\n        static readonly 'goldenAxe': ItemType;\n        static readonly 'goldenBoots': ItemType;\n        static readonly 'goldenCarrot': ItemType;\n        static readonly 'goldenChestplate': ItemType;\n        static readonly 'goldenHelmet': ItemType;\n        static readonly 'goldenHoe': ItemType;\n        static readonly 'goldenHorseArmor': ItemType;\n        static readonly 'goldenLeggings': ItemType;\n        static readonly 'goldenPickaxe': ItemType;\n        static readonly 'goldenRail': ItemType;\n        static readonly 'goldenShovel': ItemType;\n        static readonly 'goldenSword': ItemType;\n        static readonly 'goldIngot': ItemType;\n        static readonly 'goldNugget': ItemType;\n        static readonly 'goldOre': ItemType;\n        static readonly 'graniteStairs': ItemType;\n        static readonly 'grass': ItemType;\n        static readonly 'grassPath': ItemType;\n        static readonly 'gravel': ItemType;\n        static readonly 'grayCandle': ItemType;\n        static readonly 'grayCandleCake': ItemType;\n        static readonly 'grayDye': ItemType;\n        static readonly 'grayGlazedTerracotta': ItemType;\n        static readonly 'greenCandle': ItemType;\n        static readonly 'greenCandleCake': ItemType;\n        static readonly 'greenDye': ItemType;\n        static readonly 'greenGlazedTerracotta': ItemType;\n        static readonly 'grindstone': ItemType;\n        static readonly 'guardianSpawnEgg': ItemType;\n        static readonly 'gunpowder': ItemType;\n        static readonly 'hangingRoots': ItemType;\n        static readonly 'hardenedClay': ItemType;\n        static readonly 'hardGlass': ItemType;\n        static readonly 'hardGlassPane': ItemType;\n        static readonly 'hardStainedGlass': ItemType;\n        static readonly 'hardStainedGlassPane': ItemType;\n        static readonly 'hayBlock': ItemType;\n        static readonly 'heartOfTheSea': ItemType;\n        static readonly 'heavyWeightedPressurePlate': ItemType;\n        static readonly 'hoglinSpawnEgg': ItemType;\n        static readonly 'honeyBlock': ItemType;\n        static readonly 'honeyBottle': ItemType;\n        static readonly 'honeycomb': ItemType;\n        static readonly 'honeycombBlock': ItemType;\n        static readonly 'hopper': ItemType;\n        static readonly 'hopperMinecart': ItemType;\n        static readonly 'horseSpawnEgg': ItemType;\n        static readonly 'huskSpawnEgg': ItemType;\n        static readonly 'ice': ItemType;\n        static readonly 'iceBomb': ItemType;\n        static readonly 'infestedDeepslate': ItemType;\n        static readonly 'infoUpdate': ItemType;\n        static readonly 'infoUpdate2': ItemType;\n        static readonly 'inkSac': ItemType;\n        static readonly 'invisibleBedrock': ItemType;\n        static readonly 'ironAxe': ItemType;\n        static readonly 'ironBars': ItemType;\n        static readonly 'ironBlock': ItemType;\n        static readonly 'ironBoots': ItemType;\n        static readonly 'ironChestplate': ItemType;\n        static readonly 'ironDoor': ItemType;\n        static readonly 'ironHelmet': ItemType;\n        static readonly 'ironHoe': ItemType;\n        static readonly 'ironHorseArmor': ItemType;\n        static readonly 'ironIngot': ItemType;\n        static readonly 'ironLeggings': ItemType;\n        static readonly 'ironNugget': ItemType;\n        static readonly 'ironOre': ItemType;\n        static readonly 'ironPickaxe': ItemType;\n        static readonly 'ironShovel': ItemType;\n        static readonly 'ironSword': ItemType;\n        static readonly 'ironTrapdoor': ItemType;\n        static readonly 'item.acaciaDoor': ItemType;\n        static readonly 'item.bed': ItemType;\n        static readonly 'item.beetroot': ItemType;\n        static readonly 'item.birchDoor': ItemType;\n        static readonly 'item.brewingStand': ItemType;\n        static readonly 'item.cake': ItemType;\n        static readonly 'item.camera': ItemType;\n        static readonly 'item.campfire': ItemType;\n        static readonly 'item.cauldron': ItemType;\n        static readonly 'item.chain': ItemType;\n        static readonly 'item.crimsonDoor': ItemType;\n        static readonly 'item.darkOakDoor': ItemType;\n        static readonly 'item.flowerPot': ItemType;\n        static readonly 'item.frame': ItemType;\n        static readonly 'item.glowFrame': ItemType;\n        static readonly 'item.hopper': ItemType;\n        static readonly 'item.ironDoor': ItemType;\n        static readonly 'item.jungleDoor': ItemType;\n        static readonly 'item.kelp': ItemType;\n        static readonly 'item.mangroveDoor': ItemType;\n        static readonly 'item.netherSprouts': ItemType;\n        static readonly 'item.netherWart': ItemType;\n        static readonly 'item.reeds': ItemType;\n        static readonly 'item.skull': ItemType;\n        static readonly 'item.soulCampfire': ItemType;\n        static readonly 'item.spruceDoor': ItemType;\n        static readonly 'item.warpedDoor': ItemType;\n        static readonly 'item.wheat': ItemType;\n        static readonly 'item.woodenDoor': ItemType;\n        static readonly 'jigsaw': ItemType;\n        static readonly 'jukebox': ItemType;\n        static readonly 'jungleBoat': ItemType;\n        static readonly 'jungleButton': ItemType;\n        static readonly 'jungleChestBoat': ItemType;\n        static readonly 'jungleDoor': ItemType;\n        static readonly 'jungleFenceGate': ItemType;\n        static readonly 'junglePressurePlate': ItemType;\n        static readonly 'jungleSign': ItemType;\n        static readonly 'jungleStairs': ItemType;\n        static readonly 'jungleStandingSign': ItemType;\n        static readonly 'jungleTrapdoor': ItemType;\n        static readonly 'jungleWallSign': ItemType;\n        static readonly 'kelp': ItemType;\n        static readonly 'ladder': ItemType;\n        static readonly 'lantern': ItemType;\n        static readonly 'lapisBlock': ItemType;\n        static readonly 'lapisLazuli': ItemType;\n        static readonly 'lapisOre': ItemType;\n        static readonly 'largeAmethystBud': ItemType;\n        static readonly 'lava': ItemType;\n        static readonly 'lavaBucket': ItemType;\n        static readonly 'lavaCauldron': ItemType;\n        static readonly 'lead': ItemType;\n        static readonly 'leather': ItemType;\n        static readonly 'leatherBoots': ItemType;\n        static readonly 'leatherChestplate': ItemType;\n        static readonly 'leatherHelmet': ItemType;\n        static readonly 'leatherHorseArmor': ItemType;\n        static readonly 'leatherLeggings': ItemType;\n        static readonly 'leaves': ItemType;\n        static readonly 'leaves2': ItemType;\n        static readonly 'lectern': ItemType;\n        static readonly 'lever': ItemType;\n        static readonly 'lightBlock': ItemType;\n        static readonly 'lightBlueCandle': ItemType;\n        static readonly 'lightBlueCandleCake': ItemType;\n        static readonly 'lightBlueDye': ItemType;\n        static readonly 'lightBlueGlazedTerracotta': ItemType;\n        static readonly 'lightGrayCandle': ItemType;\n        static readonly 'lightGrayCandleCake': ItemType;\n        static readonly 'lightGrayDye': ItemType;\n        static readonly 'lightningRod': ItemType;\n        static readonly 'lightWeightedPressurePlate': ItemType;\n        static readonly 'limeCandle': ItemType;\n        static readonly 'limeCandleCake': ItemType;\n        static readonly 'limeDye': ItemType;\n        static readonly 'limeGlazedTerracotta': ItemType;\n        static readonly 'lingeringPotion': ItemType;\n        static readonly 'litBlastFurnace': ItemType;\n        static readonly 'litDeepslateRedstoneOre': ItemType;\n        static readonly 'litFurnace': ItemType;\n        static readonly 'litPumpkin': ItemType;\n        static readonly 'litRedstoneLamp': ItemType;\n        static readonly 'litRedstoneOre': ItemType;\n        static readonly 'litSmoker': ItemType;\n        static readonly 'llamaSpawnEgg': ItemType;\n        static readonly 'lodestone': ItemType;\n        static readonly 'lodestoneCompass': ItemType;\n        static readonly 'log': ItemType;\n        static readonly 'log2': ItemType;\n        static readonly 'loom': ItemType;\n        static readonly 'magentaCandle': ItemType;\n        static readonly 'magentaCandleCake': ItemType;\n        static readonly 'magentaDye': ItemType;\n        static readonly 'magentaGlazedTerracotta': ItemType;\n        static readonly 'magma': ItemType;\n        static readonly 'magmaCream': ItemType;\n        static readonly 'magmaCubeSpawnEgg': ItemType;\n        static readonly 'mangroveBoat': ItemType;\n        static readonly 'mangroveButton': ItemType;\n        static readonly 'mangroveChestBoat': ItemType;\n        static readonly 'mangroveDoor': ItemType;\n        static readonly 'mangroveDoubleSlab': ItemType;\n        static readonly 'mangroveFence': ItemType;\n        static readonly 'mangroveFenceGate': ItemType;\n        static readonly 'mangroveLeaves': ItemType;\n        static readonly 'mangroveLog': ItemType;\n        static readonly 'mangrovePlanks': ItemType;\n        static readonly 'mangrovePressurePlate': ItemType;\n        static readonly 'mangrovePropagule': ItemType;\n        static readonly 'mangroveRoots': ItemType;\n        static readonly 'mangroveSign': ItemType;\n        static readonly 'mangroveSlab': ItemType;\n        static readonly 'mangroveStairs': ItemType;\n        static readonly 'mangroveStandingSign': ItemType;\n        static readonly 'mangroveTrapdoor': ItemType;\n        static readonly 'mangroveWallSign': ItemType;\n        static readonly 'mangroveWood': ItemType;\n        static readonly 'medicine': ItemType;\n        static readonly 'mediumAmethystBud': ItemType;\n        static readonly 'melonBlock': ItemType;\n        static readonly 'melonSeeds': ItemType;\n        static readonly 'melonSlice': ItemType;\n        static readonly 'melonStem': ItemType;\n        static readonly 'milkBucket': ItemType;\n        static readonly 'minecart': ItemType;\n        static readonly 'mobSpawner': ItemType;\n        static readonly 'mojangBannerPattern': ItemType;\n        static readonly 'monsterEgg': ItemType;\n        static readonly 'mooshroomSpawnEgg': ItemType;\n        static readonly 'mossBlock': ItemType;\n        static readonly 'mossCarpet': ItemType;\n        static readonly 'mossyCobblestone': ItemType;\n        static readonly 'mossyCobblestoneStairs': ItemType;\n        static readonly 'mossyStoneBrickStairs': ItemType;\n        static readonly 'movingBlock': ItemType;\n        static readonly 'mud': ItemType;\n        static readonly 'mudBrickDoubleSlab': ItemType;\n        static readonly 'mudBricks': ItemType;\n        static readonly 'mudBrickSlab': ItemType;\n        static readonly 'mudBrickStairs': ItemType;\n        static readonly 'mudBrickWall': ItemType;\n        static readonly 'muddyMangroveRoots': ItemType;\n        static readonly 'muleSpawnEgg': ItemType;\n        static readonly 'mushroomStew': ItemType;\n        static readonly 'musicDisc11': ItemType;\n        static readonly 'musicDisc13': ItemType;\n        static readonly 'musicDisc5': ItemType;\n        static readonly 'musicDiscBlocks': ItemType;\n        static readonly 'musicDiscCat': ItemType;\n        static readonly 'musicDiscChirp': ItemType;\n        static readonly 'musicDiscFar': ItemType;\n        static readonly 'musicDiscMall': ItemType;\n        static readonly 'musicDiscMellohi': ItemType;\n        static readonly 'musicDiscOtherside': ItemType;\n        static readonly 'musicDiscPigstep': ItemType;\n        static readonly 'musicDiscStal': ItemType;\n        static readonly 'musicDiscStrad': ItemType;\n        static readonly 'musicDiscWait': ItemType;\n        static readonly 'musicDiscWard': ItemType;\n        static readonly 'mutton': ItemType;\n        static readonly 'mycelium': ItemType;\n        static readonly 'nameTag': ItemType;\n        static readonly 'nautilusShell': ItemType;\n        static readonly 'netherbrick': ItemType;\n        static readonly 'netherBrick': ItemType;\n        static readonly 'netherBrickFence': ItemType;\n        static readonly 'netherBrickStairs': ItemType;\n        static readonly 'netherGoldOre': ItemType;\n        static readonly 'netheriteAxe': ItemType;\n        static readonly 'netheriteBlock': ItemType;\n        static readonly 'netheriteBoots': ItemType;\n        static readonly 'netheriteChestplate': ItemType;\n        static readonly 'netheriteHelmet': ItemType;\n        static readonly 'netheriteHoe': ItemType;\n        static readonly 'netheriteIngot': ItemType;\n        static readonly 'netheriteLeggings': ItemType;\n        static readonly 'netheritePickaxe': ItemType;\n        static readonly 'netheriteScrap': ItemType;\n        static readonly 'netheriteShovel': ItemType;\n        static readonly 'netheriteSword': ItemType;\n        static readonly 'netherrack': ItemType;\n        static readonly 'netherreactor': ItemType;\n        static readonly 'netherSprouts': ItemType;\n        static readonly 'netherStar': ItemType;\n        static readonly 'netherWart': ItemType;\n        static readonly 'netherWartBlock': ItemType;\n        static readonly 'normalStoneStairs': ItemType;\n        static readonly 'noteblock': ItemType;\n        static readonly 'npcSpawnEgg': ItemType;\n        static readonly 'oakBoat': ItemType;\n        static readonly 'oakChestBoat': ItemType;\n        static readonly 'oakSign': ItemType;\n        static readonly 'oakStairs': ItemType;\n        static readonly 'observer': ItemType;\n        static readonly 'obsidian': ItemType;\n        static readonly 'ocelotSpawnEgg': ItemType;\n        static readonly 'ochreFroglight': ItemType;\n        static readonly 'orangeCandle': ItemType;\n        static readonly 'orangeCandleCake': ItemType;\n        static readonly 'orangeDye': ItemType;\n        static readonly 'orangeGlazedTerracotta': ItemType;\n        static readonly 'oxidizedCopper': ItemType;\n        static readonly 'oxidizedCutCopper': ItemType;\n        static readonly 'oxidizedCutCopperSlab': ItemType;\n        static readonly 'oxidizedCutCopperStairs': ItemType;\n        static readonly 'oxidizedDoubleCutCopperSlab': ItemType;\n        static readonly 'packedIce': ItemType;\n        static readonly 'packedMud': ItemType;\n        static readonly 'painting': ItemType;\n        static readonly 'pandaSpawnEgg': ItemType;\n        static readonly 'paper': ItemType;\n        static readonly 'parrotSpawnEgg': ItemType;\n        static readonly 'pearlescentFroglight': ItemType;\n        static readonly 'phantomMembrane': ItemType;\n        static readonly 'phantomSpawnEgg': ItemType;\n        static readonly 'piglinBannerPattern': ItemType;\n        static readonly 'piglinBruteSpawnEgg': ItemType;\n        static readonly 'piglinSpawnEgg': ItemType;\n        static readonly 'pigSpawnEgg': ItemType;\n        static readonly 'pillagerSpawnEgg': ItemType;\n        static readonly 'pinkCandle': ItemType;\n        static readonly 'pinkCandleCake': ItemType;\n        static readonly 'pinkDye': ItemType;\n        static readonly 'pinkGlazedTerracotta': ItemType;\n        static readonly 'piston': ItemType;\n        static readonly 'pistonArmCollision': ItemType;\n        static readonly 'planks': ItemType;\n        static readonly 'podzol': ItemType;\n        static readonly 'pointedDripstone': ItemType;\n        static readonly 'poisonousPotato': ItemType;\n        static readonly 'polarBearSpawnEgg': ItemType;\n        static readonly 'polishedAndesiteStairs': ItemType;\n        static readonly 'polishedBasalt': ItemType;\n        static readonly 'polishedBlackstone': ItemType;\n        static readonly 'polishedBlackstoneBrickDoubleSlab': ItemType;\n        static readonly 'polishedBlackstoneBricks': ItemType;\n        static readonly 'polishedBlackstoneBrickSlab': ItemType;\n        static readonly 'polishedBlackstoneBrickStairs': ItemType;\n        static readonly 'polishedBlackstoneBrickWall': ItemType;\n        static readonly 'polishedBlackstoneButton': ItemType;\n        static readonly 'polishedBlackstoneDoubleSlab': ItemType;\n        static readonly 'polishedBlackstonePressurePlate': ItemType;\n        static readonly 'polishedBlackstoneSlab': ItemType;\n        static readonly 'polishedBlackstoneStairs': ItemType;\n        static readonly 'polishedBlackstoneWall': ItemType;\n        static readonly 'polishedDeepslate': ItemType;\n        static readonly 'polishedDeepslateDoubleSlab': ItemType;\n        static readonly 'polishedDeepslateSlab': ItemType;\n        static readonly 'polishedDeepslateStairs': ItemType;\n        static readonly 'polishedDeepslateWall': ItemType;\n        static readonly 'polishedDioriteStairs': ItemType;\n        static readonly 'polishedGraniteStairs': ItemType;\n        static readonly 'poppedChorusFruit': ItemType;\n        static readonly 'porkchop': ItemType;\n        static readonly 'portal': ItemType;\n        static readonly 'potato': ItemType;\n        static readonly 'potatoes': ItemType;\n        static readonly 'potion': ItemType;\n        static readonly 'powderSnow': ItemType;\n        static readonly 'powderSnowBucket': ItemType;\n        static readonly 'poweredComparator': ItemType;\n        static readonly 'poweredRepeater': ItemType;\n        static readonly 'prismarine': ItemType;\n        static readonly 'prismarineBricksStairs': ItemType;\n        static readonly 'prismarineCrystals': ItemType;\n        static readonly 'prismarineShard': ItemType;\n        static readonly 'prismarineStairs': ItemType;\n        static readonly 'pufferfish': ItemType;\n        static readonly 'pufferfishBucket': ItemType;\n        static readonly 'pufferfishSpawnEgg': ItemType;\n        static readonly 'pumpkin': ItemType;\n        static readonly 'pumpkinPie': ItemType;\n        static readonly 'pumpkinSeeds': ItemType;\n        static readonly 'pumpkinStem': ItemType;\n        static readonly 'purpleCandle': ItemType;\n        static readonly 'purpleCandleCake': ItemType;\n        static readonly 'purpleDye': ItemType;\n        static readonly 'purpleGlazedTerracotta': ItemType;\n        static readonly 'purpurBlock': ItemType;\n        static readonly 'purpurStairs': ItemType;\n        static readonly 'quartz': ItemType;\n        static readonly 'quartzBlock': ItemType;\n        static readonly 'quartzBricks': ItemType;\n        static readonly 'quartzOre': ItemType;\n        static readonly 'quartzStairs': ItemType;\n        static readonly 'rabbit': ItemType;\n        static readonly 'rabbitFoot': ItemType;\n        static readonly 'rabbitHide': ItemType;\n        static readonly 'rabbitSpawnEgg': ItemType;\n        static readonly 'rabbitStew': ItemType;\n        static readonly 'rail': ItemType;\n        static readonly 'rapidFertilizer': ItemType;\n        static readonly 'ravagerSpawnEgg': ItemType;\n        static readonly 'rawCopper': ItemType;\n        static readonly 'rawCopperBlock': ItemType;\n        static readonly 'rawGold': ItemType;\n        static readonly 'rawGoldBlock': ItemType;\n        static readonly 'rawIron': ItemType;\n        static readonly 'rawIronBlock': ItemType;\n        static readonly 'recoveryCompass': ItemType;\n        static readonly 'redCandle': ItemType;\n        static readonly 'redCandleCake': ItemType;\n        static readonly 'redDye': ItemType;\n        static readonly 'redFlower': ItemType;\n        static readonly 'redGlazedTerracotta': ItemType;\n        static readonly 'redMushroom': ItemType;\n        static readonly 'redMushroomBlock': ItemType;\n        static readonly 'redNetherBrick': ItemType;\n        static readonly 'redNetherBrickStairs': ItemType;\n        static readonly 'redSandstone': ItemType;\n        static readonly 'redSandstoneStairs': ItemType;\n        static readonly 'redstone': ItemType;\n        static readonly 'redstoneBlock': ItemType;\n        static readonly 'redstoneLamp': ItemType;\n        static readonly 'redstoneOre': ItemType;\n        static readonly 'redstoneTorch': ItemType;\n        static readonly 'redstoneWire': ItemType;\n        static readonly 'reinforcedDeepslate': ItemType;\n        static readonly 'repeater': ItemType;\n        static readonly 'repeatingCommandBlock': ItemType;\n        static readonly 'reserved6': ItemType;\n        static readonly 'respawnAnchor': ItemType;\n        static readonly 'rottenFlesh': ItemType;\n        static readonly 'saddle': ItemType;\n        static readonly 'salmon': ItemType;\n        static readonly 'salmonBucket': ItemType;\n        static readonly 'salmonSpawnEgg': ItemType;\n        static readonly 'sand': ItemType;\n        static readonly 'sandstone': ItemType;\n        static readonly 'sandstoneStairs': ItemType;\n        static readonly 'sapling': ItemType;\n        static readonly 'scaffolding': ItemType;\n        static readonly 'sculk': ItemType;\n        static readonly 'sculkCatalyst': ItemType;\n        static readonly 'sculkSensor': ItemType;\n        static readonly 'sculkShrieker': ItemType;\n        static readonly 'sculkVein': ItemType;\n        static readonly 'scute': ItemType;\n        static readonly 'seagrass': ItemType;\n        static readonly 'seaLantern': ItemType;\n        static readonly 'seaPickle': ItemType;\n        static readonly 'shears': ItemType;\n        static readonly 'sheepSpawnEgg': ItemType;\n        static readonly 'shield': ItemType;\n        static readonly 'shroomlight': ItemType;\n        static readonly 'shulkerBox': ItemType;\n        static readonly 'shulkerShell': ItemType;\n        static readonly 'shulkerSpawnEgg': ItemType;\n        static readonly 'silverfishSpawnEgg': ItemType;\n        static readonly 'silverGlazedTerracotta': ItemType;\n        static readonly 'skeletonHorseSpawnEgg': ItemType;\n        static readonly 'skeletonSpawnEgg': ItemType;\n        static readonly 'skull': ItemType;\n        static readonly 'skullBannerPattern': ItemType;\n        static readonly 'slime': ItemType;\n        static readonly 'slimeBall': ItemType;\n        static readonly 'slimeSpawnEgg': ItemType;\n        static readonly 'smallAmethystBud': ItemType;\n        static readonly 'smallDripleafBlock': ItemType;\n        static readonly 'smithingTable': ItemType;\n        static readonly 'smoker': ItemType;\n        static readonly 'smoothBasalt': ItemType;\n        static readonly 'smoothQuartzStairs': ItemType;\n        static readonly 'smoothRedSandstoneStairs': ItemType;\n        static readonly 'smoothSandstoneStairs': ItemType;\n        static readonly 'smoothStone': ItemType;\n        static readonly 'snow': ItemType;\n        static readonly 'snowball': ItemType;\n        static readonly 'snowLayer': ItemType;\n        static readonly 'soulCampfire': ItemType;\n        static readonly 'soulFire': ItemType;\n        static readonly 'soulLantern': ItemType;\n        static readonly 'soulSand': ItemType;\n        static readonly 'soulSoil': ItemType;\n        static readonly 'soulTorch': ItemType;\n        static readonly 'sparkler': ItemType;\n        static readonly 'spawnEgg': ItemType;\n        static readonly 'spiderEye': ItemType;\n        static readonly 'spiderSpawnEgg': ItemType;\n        static readonly 'splashPotion': ItemType;\n        static readonly 'sponge': ItemType;\n        static readonly 'sporeBlossom': ItemType;\n        static readonly 'spruceBoat': ItemType;\n        static readonly 'spruceButton': ItemType;\n        static readonly 'spruceChestBoat': ItemType;\n        static readonly 'spruceDoor': ItemType;\n        static readonly 'spruceFenceGate': ItemType;\n        static readonly 'sprucePressurePlate': ItemType;\n        static readonly 'spruceSign': ItemType;\n        static readonly 'spruceStairs': ItemType;\n        static readonly 'spruceStandingSign': ItemType;\n        static readonly 'spruceTrapdoor': ItemType;\n        static readonly 'spruceWallSign': ItemType;\n        static readonly 'spyglass': ItemType;\n        static readonly 'squidSpawnEgg': ItemType;\n        static readonly 'stainedGlass': ItemType;\n        static readonly 'stainedGlassPane': ItemType;\n        static readonly 'stainedHardenedClay': ItemType;\n        static readonly 'standingBanner': ItemType;\n        static readonly 'standingSign': ItemType;\n        static readonly 'stick': ItemType;\n        static readonly 'stickyPiston': ItemType;\n        static readonly 'stickyPistonArmCollision': ItemType;\n        static readonly 'stone': ItemType;\n        static readonly 'stoneAxe': ItemType;\n        static readonly 'stoneBlockSlab': ItemType;\n        static readonly 'stoneBlockSlab2': ItemType;\n        static readonly 'stoneBlockSlab3': ItemType;\n        static readonly 'stoneBlockSlab4': ItemType;\n        static readonly 'stonebrick': ItemType;\n        static readonly 'stoneBrickStairs': ItemType;\n        static readonly 'stoneButton': ItemType;\n        static readonly 'stonecutter': ItemType;\n        static readonly 'stonecutterBlock': ItemType;\n        static readonly 'stoneHoe': ItemType;\n        static readonly 'stonePickaxe': ItemType;\n        static readonly 'stonePressurePlate': ItemType;\n        static readonly 'stoneShovel': ItemType;\n        static readonly 'stoneStairs': ItemType;\n        static readonly 'stoneSword': ItemType;\n        static readonly 'straySpawnEgg': ItemType;\n        static readonly 'striderSpawnEgg': ItemType;\n        static readonly 'string': ItemType;\n        static readonly 'strippedAcaciaLog': ItemType;\n        static readonly 'strippedBirchLog': ItemType;\n        static readonly 'strippedCrimsonHyphae': ItemType;\n        static readonly 'strippedCrimsonStem': ItemType;\n        static readonly 'strippedDarkOakLog': ItemType;\n        static readonly 'strippedJungleLog': ItemType;\n        static readonly 'strippedMangroveLog': ItemType;\n        static readonly 'strippedMangroveWood': ItemType;\n        static readonly 'strippedOakLog': ItemType;\n        static readonly 'strippedSpruceLog': ItemType;\n        static readonly 'strippedWarpedHyphae': ItemType;\n        static readonly 'strippedWarpedStem': ItemType;\n        static readonly 'structureBlock': ItemType;\n        static readonly 'structureVoid': ItemType;\n        static readonly 'sugar': ItemType;\n        static readonly 'sugarCane': ItemType;\n        static readonly 'suspiciousStew': ItemType;\n        static readonly 'sweetBerries': ItemType;\n        static readonly 'sweetBerryBush': ItemType;\n        static readonly 'tadpoleBucket': ItemType;\n        static readonly 'tadpoleSpawnEgg': ItemType;\n        static readonly 'tallgrass': ItemType;\n        static readonly 'target': ItemType;\n        static readonly 'tintedGlass': ItemType;\n        static readonly 'tnt': ItemType;\n        static readonly 'tntMinecart': ItemType;\n        static readonly 'torch': ItemType;\n        static readonly 'totemOfUndying': ItemType;\n        static readonly 'trapdoor': ItemType;\n        static readonly 'trappedChest': ItemType;\n        static readonly 'trident': ItemType;\n        static readonly 'tripWire': ItemType;\n        static readonly 'tripwireHook': ItemType;\n        static readonly 'tropicalFish': ItemType;\n        static readonly 'tropicalFishBucket': ItemType;\n        static readonly 'tropicalFishSpawnEgg': ItemType;\n        static readonly 'tuff': ItemType;\n        static readonly 'turtleEgg': ItemType;\n        static readonly 'turtleHelmet': ItemType;\n        static readonly 'turtleSpawnEgg': ItemType;\n        static readonly 'twistingVines': ItemType;\n        static readonly 'underwaterTorch': ItemType;\n        static readonly 'undyedShulkerBox': ItemType;\n        static readonly 'unknown': ItemType;\n        static readonly 'unlitRedstoneTorch': ItemType;\n        static readonly 'unpoweredComparator': ItemType;\n        static readonly 'unpoweredRepeater': ItemType;\n        static readonly 'verdantFroglight': ItemType;\n        static readonly 'vexSpawnEgg': ItemType;\n        static readonly 'villagerSpawnEgg': ItemType;\n        static readonly 'vindicatorSpawnEgg': ItemType;\n        static readonly 'vine': ItemType;\n        static readonly 'wallBanner': ItemType;\n        static readonly 'wallSign': ItemType;\n        static readonly 'wanderingTraderSpawnEgg': ItemType;\n        static readonly 'wardenSpawnEgg': ItemType;\n        static readonly 'warpedButton': ItemType;\n        static readonly 'warpedDoor': ItemType;\n        static readonly 'warpedDoubleSlab': ItemType;\n        static readonly 'warpedFence': ItemType;\n        static readonly 'warpedFenceGate': ItemType;\n        static readonly 'warpedFungus': ItemType;\n        static readonly 'warpedFungusOnAStick': ItemType;\n        static readonly 'warpedHyphae': ItemType;\n        static readonly 'warpedNylium': ItemType;\n        static readonly 'warpedPlanks': ItemType;\n        static readonly 'warpedPressurePlate': ItemType;\n        static readonly 'warpedRoots': ItemType;\n        static readonly 'warpedSign': ItemType;\n        static readonly 'warpedSlab': ItemType;\n        static readonly 'warpedStairs': ItemType;\n        static readonly 'warpedStandingSign': ItemType;\n        static readonly 'warpedStem': ItemType;\n        static readonly 'warpedTrapdoor': ItemType;\n        static readonly 'warpedWallSign': ItemType;\n        static readonly 'warpedWartBlock': ItemType;\n        static readonly 'water': ItemType;\n        static readonly 'waterBucket': ItemType;\n        static readonly 'waterlily': ItemType;\n        static readonly 'waxedCopper': ItemType;\n        static readonly 'waxedCutCopper': ItemType;\n        static readonly 'waxedCutCopperSlab': ItemType;\n        static readonly 'waxedCutCopperStairs': ItemType;\n        static readonly 'waxedDoubleCutCopperSlab': ItemType;\n        static readonly 'waxedExposedCopper': ItemType;\n        static readonly 'waxedExposedCutCopper': ItemType;\n        static readonly 'waxedExposedCutCopperSlab': ItemType;\n        static readonly 'waxedExposedCutCopperStairs': ItemType;\n        static readonly 'waxedExposedDoubleCutCopperSlab': ItemType;\n        static readonly 'waxedOxidizedCopper': ItemType;\n        static readonly 'waxedOxidizedCutCopper': ItemType;\n        static readonly 'waxedOxidizedCutCopperSlab': ItemType;\n        static readonly 'waxedOxidizedCutCopperStairs': ItemType;\n        static readonly 'waxedOxidizedDoubleCutCopperSlab': ItemType;\n        static readonly 'waxedWeatheredCopper': ItemType;\n        static readonly 'waxedWeatheredCutCopper': ItemType;\n        static readonly 'waxedWeatheredCutCopperSlab': ItemType;\n        static readonly 'waxedWeatheredCutCopperStairs': ItemType;\n        static readonly 'waxedWeatheredDoubleCutCopperSlab': ItemType;\n        static readonly 'weatheredCopper': ItemType;\n        static readonly 'weatheredCutCopper': ItemType;\n        static readonly 'weatheredCutCopperSlab': ItemType;\n        static readonly 'weatheredCutCopperStairs': ItemType;\n        static readonly 'weatheredDoubleCutCopperSlab': ItemType;\n        static readonly 'web': ItemType;\n        static readonly 'weepingVines': ItemType;\n        static readonly 'wheat': ItemType;\n        static readonly 'wheatSeeds': ItemType;\n        static readonly 'whiteCandle': ItemType;\n        static readonly 'whiteCandleCake': ItemType;\n        static readonly 'whiteDye': ItemType;\n        static readonly 'whiteGlazedTerracotta': ItemType;\n        static readonly 'witchSpawnEgg': ItemType;\n        static readonly 'witherRose': ItemType;\n        static readonly 'witherSkeletonSpawnEgg': ItemType;\n        static readonly 'wolfSpawnEgg': ItemType;\n        static readonly 'wood': ItemType;\n        static readonly 'woodenAxe': ItemType;\n        static readonly 'woodenButton': ItemType;\n        static readonly 'woodenDoor': ItemType;\n        static readonly 'woodenHoe': ItemType;\n        static readonly 'woodenPickaxe': ItemType;\n        static readonly 'woodenPressurePlate': ItemType;\n        static readonly 'woodenShovel': ItemType;\n        static readonly 'woodenSlab': ItemType;\n        static readonly 'woodenSword': ItemType;\n        static readonly 'wool': ItemType;\n        static readonly 'writableBook': ItemType;\n        static readonly 'writtenBook': ItemType;\n        static readonly 'yellowCandle': ItemType;\n        static readonly 'yellowCandleCake': ItemType;\n        static readonly 'yellowDye': ItemType;\n        static readonly 'yellowFlower': ItemType;\n        static readonly 'yellowGlazedTerracotta': ItemType;\n        static readonly 'zoglinSpawnEgg': ItemType;\n        static readonly 'zombieHorseSpawnEgg': ItemType;\n        static readonly 'zombiePigmanSpawnEgg': ItemType;\n        static readonly 'zombieSpawnEgg': ItemType;\n        static readonly 'zombieVillagerSpawnEgg': ItemType;\n        protected constructor();\n    }\n    export class MolangVariableMap {\n        setColorRGB(variableName: string, color: Color): MolangVariableMap;\n        setColorRGBA(variableName: string, color: Color): MolangVariableMap;\n        setSpeedAndDirection(variableName: string, speed: number, direction: Vector): MolangVariableMap;\n        setVector3(variableName: string, vector: Vector): MolangVariableMap;\n    }\n    export class MusicOptions {\n        'fade': number;\n        'loop': boolean;\n        'volume': number;\n    }\n    export class NavigationResult {\n        readonly 'isFullPath': boolean;\n        readonly 'path': BlockLocation[];\n        protected constructor();\n    }\n    export class NumberRange {\n        'max': number;\n        'min': number;\n        next(): number;\n        protected constructor();\n    }\n    export class PistonActivateEvent extends BlockEvent {\n        readonly 'block': Block;\n        readonly 'dimension': Dimension;\n        readonly 'isExpanding': boolean;\n        readonly 'piston': BlockPistonComponent;\n        protected constructor();\n    }\n    export class PistonActivateEventSignal {\n        subscribe(callback: (arg: PistonActivateEvent) => void): (arg: PistonActivateEvent) => void;\n        unsubscribe(callback: (arg: PistonActivateEvent) => void): void;\n        protected constructor();\n    }\n    export class Player extends Entity {\n        readonly 'dimension': Dimension;\n        readonly 'headLocation': Location;\n        readonly 'id': string;\n        'isSneaking': boolean;\n        readonly 'location': Location;\n        readonly 'name': string;\n        'nameTag': string;\n        readonly 'onScreenDisplay': ScreenDisplay;\n        readonly 'rotation': XYRotation;\n        readonly 'scoreboard': ScoreboardIdentity;\n        'selectedSlot': number;\n        'target': Entity;\n        readonly 'velocity': Vector;\n        readonly 'viewVector': Vector;\n        addEffect(effectType: EffectType, duration: number, amplifier?: number, showParticles?: boolean): void;\n        addTag(tag: string): boolean;\n        getBlockFromViewVector(options?: BlockRaycastOptions): Block;\n        getComponent: EntityComponents;\n        getComponents(): IEntityComponent[];\n        getDynamicProperty(identifier: string): boolean | number | string;\n        getEffect(effectType: EffectType): Effect;\n        getEntitiesFromViewVector(options?: EntityRaycastOptions): Entity[];\n        getItemCooldown(itemCategory: string): number;\n        getTags(): string[];\n        hasComponent(componentId: string): boolean;\n        hasTag(tag: string): boolean;\n        kill(): void;\n        playSound(soundID: string, soundOptions?: SoundOptions): void;\n        removeDynamicProperty(identifier: string): boolean;\n        removeTag(tag: string): boolean;\n        runCommand(commandString: string): any;\n        runCommandAsync(commandString: string): Promise<CommandResult>;\n        setDynamicProperty(identifier: string, value: boolean | number | string): void;\n        setRotation(degreesX: number, degreesY: number): void;\n        setVelocity(velocity: Vector): void;\n        startItemCooldown(itemCategory: string, tickDuration: number): void;\n        teleport(\n            location: Location,\n            dimension: Dimension,\n            xRotation: number,\n            yRotation: number,\n            keepVelocity?: boolean,\n        ): void;\n        teleportFacing(location: Location, dimension: Dimension, facingLocation: Location, keepVelocity?: boolean): void;\n        triggerEvent(eventName: string): void;\n        protected constructor();\n    }\n    export class PlayerInventoryComponentContainer extends InventoryComponentContainer {\n        readonly 'emptySlotsCount': number;\n        readonly 'size': number;\n        addItem(itemStack: ItemStack): void;\n        getItem(slot: number): ItemStack;\n        setItem(slot: number, itemStack: ItemStack): void;\n        swapItems(slot: number, otherSlot: number, otherContainer: Container): boolean;\n        transferItem(fromSlot: number, toSlot: number, toContainer: Container): boolean;\n        protected constructor();\n    }\n    export class PlayerIterator implements Iterable<Player> {\n        [Symbol.iterator](): Iterator<Player>;\n        next(): IteratorResult<Player>;\n        protected constructor();\n    }\n    export class PlayerJoinEvent {\n        'player': Player;\n        protected constructor();\n    }\n    export class PlayerJoinEventSignal {\n        subscribe(callback: (arg: PlayerJoinEvent) => void): (arg: PlayerJoinEvent) => void;\n        unsubscribe(callback: (arg: PlayerJoinEvent) => void): void;\n        protected constructor();\n    }\n    export class PlayerLeaveEvent {\n        readonly 'playerName': string;\n        protected constructor();\n    }\n    export class PlayerLeaveEventSignal {\n        subscribe(callback: (arg: PlayerLeaveEvent) => void): (arg: PlayerLeaveEvent) => void;\n        unsubscribe(callback: (arg: PlayerLeaveEvent) => void): void;\n        protected constructor();\n    }\n    export class ProjectileHitEvent {\n        readonly 'blockHit': BlockHitInformation;\n        readonly 'dimension': Dimension;\n        readonly 'entityHit': EntityHitInformation;\n        readonly 'hitVector': Vector;\n        readonly 'location': Location;\n        readonly 'projectile': Entity;\n        readonly 'source': Entity;\n        protected constructor();\n    }\n    export class ProjectileHitEventSignal {\n        subscribe(callback: (arg: ProjectileHitEvent) => void): (arg: ProjectileHitEvent) => void;\n        unsubscribe(callback: (arg: ProjectileHitEvent) => void): void;\n        protected constructor();\n    }\n    export class PropertyRegistry {\n        registerEntityTypeDynamicProperties(\n            propertiesDefinition: DynamicPropertiesDefinition,\n            entityType: EntityType,\n        ): void;\n        registerWorldDynamicProperties(propertiesDefinition: DynamicPropertiesDefinition): void;\n        protected constructor();\n    }\n    export class Scoreboard {\n        getObjective(objectiveId: string): ScoreboardObjective;\n        getObjectives(): ScoreboardObjective[];\n        getParticipants(): ScoreboardIdentity[];\n        protected constructor();\n    }\n    export class ScoreboardIdentity {\n        readonly 'displayName': string;\n        readonly 'id': number;\n        readonly 'type': ScoreboardIdentityType;\n        getEntity(): Entity;\n        protected constructor();\n    }\n    export class ScoreboardObjective {\n        readonly 'displayName': string;\n        readonly 'id': string;\n        getParticipants(): ScoreboardIdentity[];\n        getScore(participant: ScoreboardIdentity): number;\n        getScores(): ScoreboardScoreInfo[];\n        protected constructor();\n    }\n    export class ScoreboardScoreInfo {\n        readonly 'participant': ScoreboardIdentity;\n        readonly 'score': number;\n        protected constructor();\n    }\n    export class ScreenDisplay {\n        clearTitle(): void;\n        setActionBar(text: string): void;\n        setTitle(title: string, options?: TitleDisplayOptions): void;\n        updateSubtitle(subtitle: string): void;\n        protected constructor();\n    }\n    export class Seat {\n        'lockRiderRotation': number;\n        'maxRiderCount': number;\n        'minRiderCount': number;\n        'position': Location;\n        protected constructor();\n    }\n    export class SoundOptions {\n        'location': Location;\n        'pitch': number;\n        'volume': number;\n    }\n    export class StringBlockProperty extends IBlockProperty {\n        readonly 'name': string;\n        readonly 'validValues': string[];\n        'value': string;\n        protected constructor();\n    }\n    export class TickEvent {\n        readonly 'currentTick': number;\n        readonly 'deltaTime': number;\n        protected constructor();\n    }\n    export class TickEventSignal {\n        subscribe(callback: (arg: TickEvent) => void): (arg: TickEvent) => void;\n        unsubscribe(callback: (arg: TickEvent) => void): void;\n        protected constructor();\n    }\n    export class TitleDisplayOptions {\n        'fadeInSeconds': number;\n        'fadeOutSeconds': number;\n        'staySeconds': number;\n        'subtitle': string;\n    }\n    export class Trigger {\n        'eventName': string;\n        constructor(eventName: string);\n    }\n    export class Vector {\n        'x': number;\n        'y': number;\n        'z': number;\n        static readonly 'back': Vector;\n        static readonly 'down': Vector;\n        static readonly 'forward': Vector;\n        static readonly 'left': Vector;\n        static readonly 'one': Vector;\n        static readonly 'right': Vector;\n        static readonly 'up': Vector;\n        static readonly 'zero': Vector;\n        static add(a: Vector, b: Vector): Vector;\n        constructor(x: number, y: number, z: number);\n        static cross(a: Vector, b: Vector): Vector;\n        static distance(a: Vector, b: Vector): number;\n        static divide(a: Vector, b: number | Vector): Vector;\n        equals(other: Vector): boolean;\n        length(): number;\n        static lerp(a: Vector, b: Vector, t: number): Vector;\n        static max(a: Vector, b: Vector): Vector;\n        static min(a: Vector, b: Vector): Vector;\n        static multiply(a: Vector, b: number | Vector): Vector;\n        normalized(): Vector;\n        static slerp(a: Vector, b: Vector, s: number): Vector;\n        static subtract(a: Vector, b: Vector): Vector;\n    }\n    export class WeatherChangeEvent {\n        readonly 'dimension': string;\n        readonly 'lightning': boolean;\n        readonly 'raining': boolean;\n        protected constructor();\n    }\n    export class WeatherChangeEventSignal {\n        subscribe(callback: (arg: WeatherChangeEvent) => void): (arg: WeatherChangeEvent) => void;\n        unsubscribe(callback: (arg: WeatherChangeEvent) => void): void;\n        protected constructor();\n    }\n    export class World {\n        readonly 'events': Events;\n        readonly 'scoreboard': Scoreboard;\n        getDimension(dimensionId: \"overworld\" | \"nether\" | \"the end\" | \"minecraft:overworld\" | \"minecraft:nether\" | \"minecraft:the_end\"): Dimension;\n        getDynamicProperty(identifier: string): boolean | number | string;\n        getPlayers(options?: EntityQueryOptions): PlayerIterator;\n        playMusic(trackID: string, musicOptions?: MusicOptions): void;\n        playSound(soundID: string, soundOptions?: SoundOptions): void;\n        queueMusic(trackID: string, musicOptions?: MusicOptions): void;\n        removeDynamicProperty(identifier: string): boolean;\n        setDynamicProperty(identifier: string, value: boolean | number | string): void;\n        stopMusic(): void;\n        protected constructor();\n    }\n    export class WorldInitializeEvent {\n        readonly 'propertyRegistry': PropertyRegistry;\n        protected constructor();\n    }\n    export class WorldInitializeEventSignal {\n        subscribe(callback: (arg: WorldInitializeEvent) => void): (arg: WorldInitializeEvent) => void;\n        unsubscribe(callback: (arg: WorldInitializeEvent) => void): void;\n        protected constructor();\n    }\n    export class XYRotation {\n        'x': number;\n        'y': number;\n        protected constructor();\n    }\n    export const TicksPerSecond = 20;\n    export const world: World;\n};";export const module="";