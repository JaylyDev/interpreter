export default'// Type definitions for Minecraft Bedrock Edition script APIs (experimental) 0.1\n// Project: https://docs.microsoft.com/minecraft/creator/\n// Definitions by: Jake Shirley <https://github.com/JakeShirley>\n//                 Mike Ammerlaan <https://github.com/mammerla>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n\n/* *****************************************************************************\n   Copyright (c) Microsoft Corporation.\n   ***************************************************************************** */\n/**\n * The `mojang-minecraft-ui` module contains types for\n * expressing simple dialog-based user experiences.\n *\n *   * {@link mojang-minecraft-ui.ActionFormData} contain a list of\n * buttons with captions and images that can be used for\n * presenting a set of options to a player.\n *   * {@link mojang-minecraft-ui.MessageFormData} are simple\n * two-button message experiences that are functional for\n * Yes/No or OK/Cancel questions.\n *   * {@link mojang-minecraft-ui.ModalFormData} allow for a more\n * flexible "questionnaire-style" list of controls that can be\n * used to take input.\n * @example createActionForm.js\n * ```typescript\n * const form = new ActionFormData()\n *   .title("Months")\n *   .body("Choose your favorite month!")\n *   .button("January")\n *   .button("February")\n *   .button("March")\n *   .button("April")\n *   .button("May");\n *\n * form.show(players[0]).then((response) => {\n *   if (response.selection === 3) {\n *     dimension.runCommand("say I like April too!");\n *   }\n * });\n *\n * ```\n *\n * Manifest Details\n * ```json\n * {\n *   // mojang-minecraft-ui\n *   "uuid": "2bd50a27-ab5f-4f40-a596-3641627c635e",\n *   "version": [ 0, 1, 0 ]\n * }\n * ```\n *\n */\n/**\n * Builds a simple player form with buttons that let the player\n * take action.\n */\nexport class ActionFormData {\n    /**\n     * @remarks\n     * Method that sets the body text for the modal form.\n     * @param bodyText\n     */\n    body(bodyText: string): ActionFormData;\n    /**\n     * @remarks\n     * Adds a button to this form with an icon from a resource\n     * pack.\n     * @param text\n     * @param iconPath\n     */\n    button(text: string, iconPath?: string): ActionFormData;\n    /**\n     * @remarks\n     * Creates and shows this modal popup form. Returns\n     * asynchronously when the player confirms or cancels the\n     * dialog.\n     * @param player\n     * Player to show this dialog to.\n     * @throws This function can throw errors.\n     */\n    show(player: Player): Promise<ActionFormResponse>;\n    /**\n     * @remarks\n     * This builder method sets the title for the modal dialog.\n     * @param titleText\n     */\n    title(titleText: string): ActionFormData;\n}\n/**\n * Returns data about the player results from a modal action\n * form.\n */\nexport class ActionFormResponse extends FormResponse {\n    /**\n     * If true, the form was canceled by the player (e.g., they\n     * selected the pop-up X close button).\n     */\n    readonly \'isCanceled\': boolean;\n    /**\n     * Returns the index of the button that was pushed.\n     */\n    readonly \'selection\': number;\n    protected constructor();\n}\n/**\n * Base type for a form response.\n */\nexport class FormResponse {\n    /**\n     * If true, the form was canceled by the player (e.g., they\n     * selected the pop-up X close button).\n     */\n    readonly \'isCanceled\': boolean;\n    protected constructor();\n}\n/**\n * Builds a simple two-button modal dialog.\n */\nexport class MessageFormData {\n    /**\n     * @remarks\n     * Method that sets the body text for the modal form.\n     * @param bodyText\n     */\n    body(bodyText: string): MessageFormData;\n    /**\n     * @remarks\n     * Method that sets the text for the first button of the\n     * dialog.\n     * @param text\n     */\n    button1(text: string): MessageFormData;\n    /**\n     * @remarks\n     * This method sets the text for the second button on the\n     * dialog.\n     * @param text\n     */\n    button2(text: string): MessageFormData;\n    /**\n     * @remarks\n     * Creates and shows this modal popup form. Returns\n     * asynchronously when the player confirms or cancels the\n     * dialog.\n     * @param player\n     * Player to show this dialog to.\n     * @throws This function can throw errors.\n     */\n    show(player: Player): Promise<MessageFormResponse>;\n    /**\n     * @remarks\n     * This builder method sets the title for the modal dialog.\n     * @param titleText\n     */\n    title(titleText: string): MessageFormData;\n}\n/**\n * Returns data about the player results from a modal message\n * form.\n */\nexport class MessageFormResponse extends FormResponse {\n    /**\n     * If true, the form was canceled by the player (e.g., they\n     * selected the pop-up X close button).\n     */\n    readonly \'isCanceled\': boolean;\n    /**\n     * Returns the index of the button that was pushed.\n     */\n    readonly \'selection\': number;\n    protected constructor();\n}\n/**\n * Used to create a fully customizable pop-up form for a\n * player.\n */\nexport class ModalFormData {\n    /**\n     * @remarks\n     * Adds a dropdown with choices to the form.\n     * @param label\n     * @param options\n     * @param defaultValueIndex\n     */\n    dropdown(label: string, options: string[], defaultValueIndex?: number): ModalFormData;\n    /**\n     * @remarks\n     * Adds an icon to the form using a graphic resource from a\n     * resource pack.\n     * @param iconPath\n     */\n    icon(iconPath: string): ModalFormData;\n    /**\n     * @remarks\n     * Creates and shows this modal popup form. Returns\n     * asynchronously when the player confirms or cancels the\n     * dialog.\n     * @param player\n     * Player to show this dialog to.\n     * @throws This function can throw errors.\n     */\n    show(player: Player): Promise<ModalFormResponse>;\n    /**\n     * @remarks\n     * Adds a numeric slider to the form.\n     * @param label\n     * @param minimumValue\n     * @param maximumValue\n     * @param valueStep\n     * @param defaultValue\n     */\n    slider(\n        label: string,\n        minimumValue: number,\n        maximumValue: number,\n        valueStep: number,\n        defaultValue?: number,\n    ): ModalFormData;\n    /**\n     * @remarks\n     * Adds a textbox to the form.\n     * @param label\n     * @param placeholderText\n     * @param defaultValue\n     */\n    textField(label: string, placeholderText: string, defaultValue?: string): ModalFormData;\n    /**\n     * @remarks\n     * This builder method sets the title for the modal dialog.\n     * @param titleText\n     */\n    title(titleText: string): ModalFormData;\n    /**\n     * @remarks\n     * Adds a toggle checkbox button to the form.\n     * @param label\n     * @param defaultValue\n     */\n    toggle(label: string, defaultValue?: boolean): ModalFormData;\n}\n/**\n * Returns data about player responses to a modal form.\n */\nexport class ModalFormResponse extends FormResponse {\n    /**\n     * An ordered set of values based on the order of controls\n     * specified by ModalFormData.\n     */\n    readonly \'formValues\': any[];\n    /**\n     * If true, the form was canceled by the player (e.g., they\n     * selected the pop-up X close button).\n     */\n    readonly \'isCanceled\': boolean;\n    protected constructor();\n}\n';export const Namespace="declare namespace mojangminecraftui {\n    export class ActionFormData {\n        body(bodyText: string): ActionFormData;\n        button(text: string, iconPath?: string): ActionFormData;\n        show(player: mojangminecraft.Player): Promise<ActionFormResponse>;\n        title(titleText: string): ActionFormData;\n    }\n    export class ActionFormResponse extends FormResponse {\n        readonly 'isCanceled': boolean;\n        readonly 'selection': number;\n        protected constructor();\n    }\n    export class FormResponse {\n        readonly 'isCanceled': boolean;\n        protected constructor();\n    }\n    export class MessageFormData {\n        body(bodyText: string): MessageFormData;\n        button1(text: string): MessageFormData;\n        button2(text: string): MessageFormData;\n        show(player: mojangminecraft.Player): Promise<MessageFormResponse>;\n        title(titleText: string): MessageFormData;\n    }\n    export class MessageFormResponse extends FormResponse {\n        readonly 'isCanceled': boolean;\n        readonly 'selection': number;\n        protected constructor();\n    }\n    export class ModalFormData {\n        dropdown(label: string, options: string[], defaultValueIndex?: number): ModalFormData;\n        icon(iconPath: string): ModalFormData;\n        show(player: mojangminecraft.Player): Promise<ModalFormResponse>;\n        slider(\n            label: string,\n            minimumValue: number,\n            maximumValue: number,\n            valueStep: number,\n            defaultValue?: number,\n        ): ModalFormData;\n        textField(label: string, placeholderText: string, defaultValue?: string): ModalFormData;\n        title(titleText: string): ModalFormData;\n        toggle(label: string, defaultValue?: boolean): ModalFormData;\n    }\n    export class ModalFormResponse extends FormResponse {\n        readonly 'formValues': any[];\n        readonly 'isCanceled': boolean;\n        protected constructor();\n    }\n}";