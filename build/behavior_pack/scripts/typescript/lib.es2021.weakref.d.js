export const lib_es2021_weakref_d_ts='/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n\n/// <reference no-default-lib="true"/>\n\n\ninterface WeakRef<T extends object> {\n    readonly [Symbol.toStringTag]: "WeakRef";\n\n    /**\n     * Returns the WeakRef instance\'s target object, or undefined if the target object has been\n     * reclaimed.\n     */\n    deref(): T | undefined;\n}\n\ninterface WeakRefConstructor {\n    readonly prototype: WeakRef<any>;\n\n    /**\n     * Creates a WeakRef instance for the given target object.\n     * @param target The target object for the WeakRef instance.\n     */\n    new<T extends object>(target: T): WeakRef<T>;\n}\n\ndeclare var WeakRef: WeakRefConstructor;\n\ninterface FinalizationRegistry<T> {\n    readonly [Symbol.toStringTag]: "FinalizationRegistry";\n\n    /**\n     * Registers an object with the registry.\n     * @param target The target object to register.\n     * @param heldValue The value to pass to the finalizer for this object. This cannot be the\n     * target object.\n     * @param unregisterToken The token to pass to the unregister method to unregister the target\n     * object. If provided (and not undefined), this must be an object. If not provided, the target\n     * cannot be unregistered.\n     */\n    register(target: object, heldValue: T, unregisterToken?: object): void;\n\n    /**\n     * Unregisters an object from the registry.\n     * @param unregisterToken The token that was used as the unregisterToken argument when calling\n     * register to register the target object.\n     */\n    unregister(unregisterToken: object): void;\n}\n\ninterface FinalizationRegistryConstructor {\n    readonly prototype: FinalizationRegistry<any>;\n\n    /**\n     * Creates a finalization registry with an associated cleanup callback\n     * @param cleanupCallback The callback to call after an object in the registry has been reclaimed.\n     */\n    new<T>(cleanupCallback: (heldValue: T) => void): FinalizationRegistry<T>;\n}\n\ndeclare var FinalizationRegistry: FinalizationRegistryConstructor;\n';